function AnalysisFigure = Matching_SS_MLE_ChoiceForaging_Visualisation(DataFile, Model)
% SS = SingleSession
% MLE = Maximum Log Likelihood
% Matching Analysis Function
% Developed by Antonio Lee @ BCCN Berlin
% Version 1.0 ~ July 2024
% Version 2.0 ~ Dec 2024 <- Convert to symmertric with forgetting
% Model iteration see the end of script

if nargin < 1
    global BpodSystem
    if isempty(BpodSystem) || isempty(BpodSystem.Data)
        [datafile, datapath] = uigetfile('\\ottlabfs.bccn-berlin.pri\ottlab\data\');
        load(fullfile(datapath, datafile));
        SessionDateTime = datapath(end-15:end-1);
    else
        SessionData = BpodSystem.Data;
        [~, name, ~] = fileparts(BpodSystem.Path.CurrentDataFile);
        SessionDateTime = name(end-14:end);
    end
elseif ischar(DataFile) || isstring(DataFile)
    load(DataFile);
    SessionDateTime = DataFile(end-18:end-4);
elseif isstruct(DataFile)
    SessionData = DataFile;

    % mismatch in time saved in .mat and the time used as file name
    SessionDateTime = strcat(datestr(SessionData.Info.SessionDate, 'yyyymmdd'), '_000000');
else
    disp('Error: Unknown input format. No further analysis can be performed.')
    return
end

if ~isfield(SessionData, 'SettingsFile')
    disp('Error: The selected file does not have the field "SettingsFile". No further Matching Analysis is performed.')
    AnalysisFigure = [];
    return
elseif ~isfield(SessionData.SettingsFile.GUIMeta, 'RiskType')
    disp('Error: The selected SessionFile may not be a TwoArmBanditVariant session. No further Matching Analysis is performed.')
    AnalysisFigure = [];
    return
elseif ~strcmpi(SessionData.SettingsFile.GUIMeta.RiskType.String{SessionData.SettingsFile.GUI.RiskType}, 'BlockFixHolding')
    disp('Error: The selected SessionData is not a Matching session. No further Matching Analysis is performed.')
    AnalysisFigure = [];
    return
end

AnalysisName = 'Matching_SS_MLE_ChoiceForaging';

%% Load related data to local variabels
RatID = str2double(SessionData.Info.Subject);
if isnan(RatID)
    RatID = -1;
end
RatName = num2str(RatID);
% %%The following three lines doesn't not work, as the timestamp documented
% in the SessionData may not be the same as the one being used for saving
% Date = datestr(SessionData.Info.SessionDate, 'yyyymmdd');

nTrials = SessionData.nTrials;
if nTrials < 50
    disp('nTrial < 50. Impossible for analysis.')
    AnalysisFigure = [];
    return
end
ChoiceLeft = SessionData.Custom.TrialData.ChoiceLeft(1:nTrials);
Baited = SessionData.Custom.TrialData.Baited(:, 1:nTrials);
IncorrectChoice = SessionData.Custom.TrialData.IncorrectChoice(1:nTrials);
NoDecision = SessionData.Custom.TrialData.NoDecision(1:nTrials);
NoTrialStart = SessionData.Custom.TrialData.NoTrialStart(1:nTrials);
BrokeFixation = SessionData.Custom.TrialData.BrokeFixation(1:nTrials);
EarlyWithdrawal = SessionData.Custom.TrialData.EarlyWithdrawal(1:nTrials);
StartNewTrial = SessionData.Custom.TrialData.StartNewTrial(1:nTrials);
SkippedFeedback = SessionData.Custom.TrialData.SkippedFeedback(1:nTrials);
Rewarded = SessionData.Custom.TrialData.Rewarded(1:nTrials);

SampleTime = SessionData.Custom.TrialData.SampleTime(1:nTrials);
MoveTime = SessionData.Custom.TrialData.MoveTime(1:nTrials);
FeedbackWaitingTime = SessionData.Custom.TrialData.FeedbackWaitingTime(1:nTrials);
% FeedbackDelay = SessionData.Custom.TrialData.FeedbackDelay(1:nTrials);
% FeedbackWaitingTime = rand(nTrials,1)*10; %delete this
% FeedbackWaitingTime = FeedbackWaitingTime';  %delete this
% FeedbackDelay = rand(nTrials,1)*10; %delete this
% FeedbackDelay= FeedbackDelay'; 

RewardProb = SessionData.Custom.TrialData.RewardProb(:, 1:nTrials);
LightLeft = SessionData.Custom.TrialData.LightLeft(1:nTrials);
LightLeftRight = [LightLeft; 1-LightLeft]; 
ChoiceLeftRight = [ChoiceLeft; 1-ChoiceLeft]; 

BlockNumber = SessionData.Custom.TrialData.BlockNumber(:, 1:nTrials);
BlockTrialNumber = SessionData.Custom.TrialData.BlockTrialNumber(:, 1:nTrials);

% for files before April 2023, no DrinkingTime is available
try
    DrinkingTime = SessionData.Custom.TrialData.DrinkingTime(1:nTrials);
catch
    DrinkingTime = nan(1, nTrials);
end

LeftFeedbackDelayGraceTime = [];
RightFeedbackDelayGraceTime = [];
FirstDrinkingTime = [];
LatestRewardTimestamp = [];
for iTrial = 1:nTrials
    if ChoiceLeft(iTrial) == 1
        LeftFeedbackDelayGraceTime = [LeftFeedbackDelayGraceTime;...
                                      SessionData.RawEvents.Trial{iTrial}.States.LInGrace(:,2) -...
                                      SessionData.RawEvents.Trial{iTrial}.States.LInGrace(:,1)];
    elseif ChoiceLeft(iTrial) == 0
        RightFeedbackDelayGraceTime = [RightFeedbackDelayGraceTime;...
                                       SessionData.RawEvents.Trial{iTrial}.States.RInGrace(:,2) -...
                                       SessionData.RawEvents.Trial{iTrial}.States.RInGrace(:,1)];
    end
    
    FirstDrinkingTime = [FirstDrinkingTime SessionData.RawEvents.Trial{iTrial}.States.Drinking(1,1)];
    if iTrial == 1
        LatestRewardTimestamp(iTrial) = 0;
    elseif isnan(SessionData.RawEvents.Trial{iTrial-1}.States.Drinking(1,1))
        LatestRewardTimestamp(iTrial) = LatestRewardTimestamp(iTrial-1);
    else
        LatestRewardTimestamp(iTrial) = SessionData.RawEvents.Trial{iTrial-1}.States.Drinking(1,1) + SessionData.TrialStartTimestamp(iTrial-1);
    end
end
LatestRewardTime = SessionData.TrialStartTimestamp - LatestRewardTimestamp;

LeftFeedbackDelayGraceTime = LeftFeedbackDelayGraceTime(~isnan(LeftFeedbackDelayGraceTime))';
LeftFeedbackDelayGraceTime = LeftFeedbackDelayGraceTime(LeftFeedbackDelayGraceTime < SessionData.SettingsFile.GUI.FeedbackDelayGrace - 0.0001);
RightFeedbackDelayGraceTime = RightFeedbackDelayGraceTime(~isnan(RightFeedbackDelayGraceTime))';
RightFeedbackDelayGraceTime = RightFeedbackDelayGraceTime(RightFeedbackDelayGraceTime < SessionData.SettingsFile.GUI.FeedbackDelayGrace - 0.0001);

%% Common plots regardless of task design/ risk type
% create figure
AnalysisFigure = figure('Position', [   0    0 1191  842],... % DIN A3, 72 ppi (window will crop it to _ x 1024, same as disp resolution)
                        'NumberTitle', 'off',...
                        'Name', strcat(RatName, '_', SessionDateTime, '_Matching'),...
                        'MenuBar', 'none',...
                        'Resize', 'off');

% spacer for correct saving dimension
FrameAxes = axes(AnalysisFigure, 'Position', [0 0 1 1]); % spacer for correct saving dimension
set(FrameAxes,...
    'XTick', [],...
    'YTick', [],...
    'XColor', 'w',...
    'YColor', 'w')

% Figure Info
FigureInfoAxes = axes(AnalysisFigure, 'Position', [0.01    0.96    0.48    0.01]);
set(FigureInfoAxes,...
    'XTick', [],...
    'YTick', [],...
    'XColor', 'w',...
    'YColor', 'w')

FigureTitle = strcat(RatName, '_', SessionDateTime, '_', AnalysisName);

FigureTitleText = text(FigureInfoAxes, 0, 0,...
                       FigureTitle,...
                       'FontSize', 14,...
                       'FontWeight','bold',...
                       'Interpreter', 'none');

% colour palette
ColourPalette = CommonColourPalette();

%% Block switching behaviour across session
BlockSwitchAxes = axes(AnalysisFigure, 'Position', [0.01    0.82    0.37    0.11]);
hold(BlockSwitchAxes, 'on');
if ~isempty(ChoiceLeft) && ~all(isnan(ChoiceLeft))
    idxTrial = 1:nTrials;
    RewardProbLeft = RewardProb(1,:);
    RewardProbRight = RewardProb(2,:);
    RewardProbLeftPlot = plot(BlockSwitchAxes, idxTrial, RewardProbLeft * 100,...
                              'LineStyle', '-',...
                              'Marker', 'none',...
                              'Color', ColourPalette.Left,...
                              'LineWidth', 1);
    RewardProbRightPlot = plot(BlockSwitchAxes, idxTrial, RewardProbRight * 100,...
                               'LineStyle', '-',...
                               'Marker', 'none',...
                               'Color', ColourPalette.Right,...
                               'LineWidth', 1);

    BinWidth = 10;
    ChoiceLeftSmoothed = smooth(ChoiceLeft, BinWidth, 'moving','omitnan'); %current bin width: 10 trials
    BlockChoicePlot = plot(BlockSwitchAxes, idxTrial, ChoiceLeftSmoothed * 100,...
                           'LineStyle', '-',...
                           'Color', 'k',...
                           'Marker', 'none',...
                           'LineWidth', 1);
    % TrialLeftChoicePlot = plot(BlockSwitchAxes, idxTrial(ChoiceLeft==1), ChoiceLeft(ChoiceLeft==1) * 110 - 5,...
    %                            'LineStyle', 'none',...
    %                            'Marker', '.',...
    %                            'MarkerEdgeColor', ColourPalette.Left, ...
    %                            'MarkerSize', 8);
    % TrialRightChoicePlot = plot(BlockSwitchAxes, idxTrial(ChoiceLeft==0), ChoiceLeft(ChoiceLeft==0) * 110 - 5,...
    %                             'LineStyle', 'none',...
    %                             'Marker', '.',...
    %                             'MarkerEdgeColor', ColourPalette.Right,...
    %                             'MarkerSize', 8);
    
    set(BlockSwitchAxes,...
        'TickDir', 'out',...
        'YLim', [-20 120],...
        'YTick', [0 50 100],...
        'YAxisLocation', 'right',...
        'FontSize', 10);
    xlabel('iTrial')
    ylabel('Left Choices (%)')
    % title('Block switching behaviour')
end

%% Symmetric Q-Learning with Forgetting and Stickiness model
% model
if nargin < 2
    try
        Model = Matching_SS_MLE_ChoiceForaging_Model(SessionData);
    catch
        disp('Error: problem in modelling. N further analysis is possible')
        return
    end
end

EstimatedParameters = Model.EstimatedParameters;
MinNegLogDataLikelihood = Model.MinNegLogDataLikelihood;

if isempty(EstimatedParameters) || isnan(MinNegLogDataLikelihood) 
    disp('Error: fail to run model');
    return
end

% extract parameters
LearningRate = EstimatedParameters(1); % alpha
InverseTemperature = EstimatedParameters(2); % beta
Threshold = EstimatedParameters(3); % theta
ForgettingRate = EstimatedParameters(4); % gamma

% make prediction from Model (i.e. estimated parameters)
[~, Values] = ChoiceForaging(EstimatedParameters, nTrials, ChoiceLeft, Rewarded);
ExploitingValue = Values.ExploitingValue;
Exploited = Values.Exploited;
ChoiceExploitLogOdds = Values.ChoiceExploitLogOdds;
ChoiceLeftLogOdds = Values.ChoiceLeftLogOdds;

PredictedLeftChoiceProb = 1 ./ (1 + exp(-ChoiceLeftLogOdds));
ModelResiduals = ChoiceLeft - PredictedLeftChoiceProb;
AbsModelResiduals = abs(ModelResiduals);

PredictedChoice = double(PredictedLeftChoiceProb >= 0.5);
PredictedChoice(isnan(ChoiceLeft)) = nan;

% plot prediction
SmoothedPredictedChoiceLeft = smooth(PredictedChoice, BinWidth, 'moving','omitnan');
SmoothedPredictedChoicePlot = plot(BlockSwitchAxes, idxTrial, SmoothedPredictedChoiceLeft * 100,...
                                   'LineStyle', '-',...
                                   'Color', ColourPalette.RL,...
                                   'LineWidth', 0.2);

ExploringTrial = find(abs(ChoiceLeft - PredictedLeftChoiceProb) >= 0.5);
ExploitingTrial = find(abs(ChoiceLeft - PredictedLeftChoiceProb) < 0.5);
PredictedExplorationChoicePlot = plot(BlockSwitchAxes, ExploringTrial, 110 - PredictedChoice(ExploringTrial) * 120,...
                                      'Color', 'none',...
                                      'Marker', '.',...
                                      'MarkerEdgeColor', ColourPalette.Explore,...
                                      'MarkerSize', 5);

PredictedExploitationChoicePlot = plot(BlockSwitchAxes, ExploitingTrial, PredictedChoice(ExploitingTrial) * 130 - 15,...
                                       'Color', 'none',...
                                       'Marker', '.',...
                                       'MarkerEdgeColor', ColourPalette.Exploit,...
                                       'MarkerSize', 5);

LegendString = {'$\textsf{P(r)}_\textsf{L}$', '$\textsf{P(r)}_\textsf{R}$', '$\textsf{c}_\textsf{smooth}$',...
                '$\hat\textsf{c}_\textsf{smooth}$', '$\hat\textsf{c}_\textsf{explore}$', '$\hat\textsf{c}_\textsf{exploit}$'};

warning('off', 'MATLAB:handle_graphics:exceptions:SceneNode')

BlockSwitchLegend = legend(BlockSwitchAxes, LegendString,...
                           'Position', [0.01    0.70    0.37    0.06],...
                           'NumColumns', 3);
set(BlockSwitchLegend,...
    'Interpreter', 'latex');

disp('YOu aRE a bEAutIFul HUmaN BeiNG, saID anTOniO.')

%% psychometric
PsychometricAxes = axes(AnalysisFigure, 'Position', [0.23    0.56    0.15    0.11]);
hold(PsychometricAxes, 'on')

set(PsychometricAxes,...
    'FontSize', 10,...
    'XLim', [0 5],...
    'YLim', [0, 100],...
    'YAxisLocation', 'right')
title(PsychometricAxes, 'Psychometric')
xlabel('log(odds_{exploit})')
ylabel('Exploited Choices (%)')

% Choice Psychometric
ValidTrial = ~isnan(ChoiceLeft); % and EarlyWithdrawal is always 0
ValidExploitLogOdds = ChoiceExploitLogOdds(ValidTrial);
ValidChoice = ChoiceLeft(ValidTrial);
Exploited = [0, ValidChoice(2:end) == ValidChoice(1:end-1)];

dvbin = linspace(min(ValidExploitLogOdds), max(ValidExploitLogOdds), 10);
[xdata, ydata, error] = BinData(ValidExploitLogOdds, Exploited, dvbin);
vv = ~isnan(xdata) & ~isnan(ydata) & ~isnan(error);

ExploitedPsychometricErrorBar = errorbar(PsychometricAxes, xdata(vv), ydata(vv)*100, error(vv)*100,...
                                         'LineStyle', 'none',...
                                         'LineWidth', 1.5,...
                                         'Color', 'k',...
                                         'Marker', 'o',...
                                         'MarkerEdgeColor', 'k');

PsychometricGLM = fitglm(ValidExploitLogOdds, ValidChoice(:), 'Distribution', 'binomial');
PsychometricGLMPlot = plot(PsychometricAxes, xdata, predict(PsychometricGLM, xdata)*100, '-', 'Color', [.5,.5,.5], 'LineWidth', 0.5);

%% Coefficient of Symmetric Q with forgetting and stickiness
ModelParameterAxes = axes(AnalysisFigure, 'Position', [0.04    0.56    0.15    0.11]);
hold(ModelParameterAxes, 'on');

set(ModelParameterAxes, 'FontSize', 10)
title(ModelParameterAxes, 'Q-RL Fitted Parameters')

LearningRateText = text(ModelParameterAxes, 0, 6,...
                        strcat('\alpha = ', sprintf('%5.3f', LearningRate)),...
                        'FontSize', 12,...
                        'Interpreter', 'tex');

InverseTemperatureText = text(ModelParameterAxes, 0, 5,...
                              strcat('\beta = ', sprintf('%5.2f', InverseTemperature)),...
                              'FontSize', 12,...
                              'Interpreter', 'tex');

ForgettingRateText = text(ModelParameterAxes, 0, 4,...
                          strcat('\gamma = ', sprintf('%5.3f', ForgettingRate)),...
                          'FontSize', 12,...
                          'Interpreter', 'tex');

ChoiceStickinessText = text(ModelParameterAxes, 0, 3,...
                            strcat('\phi = ', sprintf('%5.3f', ChoiceStickiness)),...
                            'FontSize', 12,...
                            'Interpreter', 'tex');

ChoiceForgettingRateText = text(ModelParameterAxes, 0, 2,...
                                strcat('\gamma_c = ', sprintf('%5.3f', ChoiceForgettingRate)),...
                                'FontSize', 12,...
                                'Interpreter', 'tex');

BiasText = text(ModelParameterAxes, 0, 1,...
                strcat('bias = ', sprintf('%5.3f', Bias)),...
                'FontSize', 12,...
                'Interpreter', 'tex');

set(ModelParameterAxes,...
    'YLim', [0, 6],...
    'XTick', [],...
    'YTick', [],...
    'XColor', 'w',...
    'YColor', 'w')
disp('YOu aRE a bEAutIFul HUmaN BeiNG, saID anTOniO.')

%% Residual Histogram
ResidualHistogramAxes = axes(AnalysisFigure, 'Position', [0.04    0.36    0.15    0.11]);

ResidualHistogram = histogram(ResidualHistogramAxes, ModelResiduals,...
                              'FaceColor', 'b',...
                              'Normalization', 'pdf');

title(ResidualHistogramAxes, 'Histogram of residuals')

%% Residual Histogram
ResidualLaggedAxes = axes(AnalysisFigure, 'Position', [0.23    0.36    0.15    0.11]);

ResidualLaggedScatter = scatter(ResidualLaggedAxes, ModelResiduals(1:end-1), ModelResiduals(2:end),...
                                'SizeData', 1,...
                                'CData', [0, 0, 1]);

title(ResidualLaggedAxes, 'Plot of residuals vs. lagged residuals')
xlabel(ResidualLaggedAxes, 'Residual(t-1)');
ylabel(ResidualLaggedAxes, 'Residual(t)');

set(ResidualLaggedAxes,...
    'box', 'on')

%% Residual Histogram
ResidualFittedAxes = axes(AnalysisFigure, 'Position', [0.04    0.19    0.15    0.11]);

ResidualFittedScatter = scatter(ResidualFittedAxes, PredictedLeftChoiceProb, ModelResiduals,...
                                'SizeData', 1,...
                                'CData', [0, 0, 1]);

title(ResidualFittedAxes, 'Plot of residuals vs. fitted values')
xlabel(ResidualFittedAxes, 'Fitted values');
ylabel(ResidualFittedAxes, 'Residuals');

set(ResidualFittedAxes,...
    'box', 'on')

%% Residual Histogram
ResidualProbabilityAxes = axes(AnalysisFigure, 'Position', [0.23    0.19    0.15    0.11]);

ResidualProbabilityScatter = scatter(ResidualProbabilityAxes, ModelResiduals(ValidTrial), zscore(ModelResiduals(ValidTrial)),...
                                     'SizeData', 1,...
                                     'CData', [0, 0, 1]);

title(ResidualProbabilityAxes, 'Normal probability plot of residuals')
xlabel(ResidualProbabilityAxes, 'Residuals');
ylabel(ResidualProbabilityAxes, 'z-score');

set(ResidualProbabilityAxes,...
    'box', 'on',...
    'YTickLabel', [0.005, 0.1, 0.5, 0.9, 0.995])

%% Residual trend
ResidualTrendAxes = axes(AnalysisFigure, 'Position', [0.04    0.06    0.34    0.09]);
hold(ResidualTrendAxes, 'on')

AbsModelResiduals = abs(ModelResiduals);

ResidualTrendPlot = plot(ResidualTrendAxes, 1:nTrials, AbsModelResiduals,...
                         'Color', 'k',...
                         'LineStyle', 'none',...
                         'Marker', '.',...
                         'MarkerSize', 1);

MovMeanResidual = movmean(AbsModelResiduals, 10, 'omitnan');
ResidualMovMeanPlot = plot(ResidualTrendAxes, 1:nTrials, MovMeanResidual,...
                           'Color', 'k',...
                           'LineStyle', '-',...
                           'Marker', 'none');

MovStdResidual = movstd(AbsModelResiduals, 10, 'omitnan');
ResidualMovStdPlot = plot(ResidualTrendAxes, 1:nTrials,  MovMeanResidual + MovStdResidual .* [1; -1],...
                          'Color', [0.5, 0.5, 0.5],...
                          'LineStyle', '-',...
                          'Marker', 'none');

set(ResidualTrendAxes,...
    'Box', 'off',...
    'TickDir', 'out',...
    'FontSize', 10,...
    'YLim', [0, 1],...
    'YAxisLocation', 'right')
xlabel(ResidualTrendAxes, 'iTrial')
ylabel(ResidualTrendAxes, 'Abs(Residuals)')

if ~all(isnan(FeedbackWaitingTime))
    %% Time Investment (TI) (only NotBaited Waiting Time) across session 
    TrialTIAxes = axes(AnalysisFigure, 'Position', [0.45    0.82    0.37    0.11]);
    hold(TrialTIAxes, 'on');
    
    NotBaited = any(~Baited .* ChoiceLeftRight, 1) & (IncorrectChoice ~= 1);
    Explore = abs(ChoiceLeft - PredictedLeftChoiceProb) >= 0.5;
    Exploit = abs(ChoiceLeft - PredictedLeftChoiceProb) < 0.5;
    
    ExploringTITrial = NotBaited & Explore;
    ExploitingTITrial = NotBaited & Exploit;
    ExploringTI = FeedbackWaitingTime(ExploringTITrial);
    ExploitingTI = FeedbackWaitingTime(ExploitingTITrial);
    
    % NotBaited invested time per explore/exploit across session
    TrialExploringTIPlot = plot(TrialTIAxes, idxTrial(ExploringTITrial), ExploringTI,...
                                'Marker', '.',...
                                'MarkerSize', 4,...
                                'MarkerEdgeColor', ColourPalette.Explore,...
                                'Color', 'none');
    
    TrialExploitingTIPlot = plot(TrialTIAxes, idxTrial(ExploitingTITrial), ExploitingTI,...
                                 'Marker', '.',...
                                 'MarkerSize', 4,...
                                 'MarkerEdgeColor', ColourPalette.Exploit,...
                                 'Color', 'none');
    
    VevaiometryLegend = legend(TrialTIAxes, {'Explore', 'Exploit'},...
                               'Box', 'off',...
                               'Position', [0.75    0.90    0.05    0.03]);

    set(TrialTIAxes,...
        'TickDir', 'out',...
        'XLim', BlockSwitchAxes.XLim,...
        'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
        'YAxisLocation', 'right',...
        'FontSize', 10);
    ylabel('Invested Time (s)')
    % title('Block switching behaviour')
    
    %% plot vevaiometric      
    VevaiometricAxes = axes(AnalysisFigure, 'Position', [0.89    0.82    0.10    0.11]);
    hold(VevaiometricAxes, 'on')
    
    ExploringLogOdds = LogOdds(ExploringTITrial);
    ExploitingLogOdds = LogOdds(ExploitingTITrial);
    
    ExploringTrialTIScatter = scatter(VevaiometricAxes, ExploringLogOdds, ExploringTI,...
                                      'Marker', '.',...
                                      'MarkerEdgeColor', ColourPalette.Explore,...
                                      'SizeData', 18);
    
    ExploitingTrialTIScatter = scatter(VevaiometricAxes, ExploitingLogOdds, ExploitingTI,...
                                       'Marker', '.',...
                                       'MarkerEdgeColor', ColourPalette.Exploit,...
                                       'SizeData', 18);

    [ExploreLineXData, ExploreLineYData] = Binvevaio(ExploringLogOdds, ExploringTI, 10);
    [ExploitLineXData, ExploitLineYData] = Binvevaio(ExploitingLogOdds, ExploitingTI, 10);
    
    ExplorePlot = plot(VevaiometricAxes, ExploreLineXData, ExploreLineYData,...
                       'Color', ColourPalette.Explore,...
                       'LineWidth', 1);       
    
    ExploitPlot = plot(VevaiometricAxes, ExploitLineXData, ExploitLineYData,...
                       'Color', ColourPalette.Exploit,...
                       'LineWidth', 1);
    
    set(VevaiometricAxes,...
        'FontSize', 10,...
        'XLim', [-5 5],...
        'YLim', [0 SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5])
    title(VevaiometricAxes, 'Vevaiometric');
    xlabel(VevaiometricAxes, 'log(odds)');
    % ylabel(VevaiometricAxes, 'Invested Time (s)');
    
    %% Psychometrics of NotBaited Choice with High- and Low-time investment (TI)
    % Time investment is limited to NotBaited trials
    TISortedPsychometricAxes = axes(AnalysisFigure, 'Position', [0.45    0.56    0.15    0.11]);
    hold(TISortedPsychometricAxes, 'on')
    
    TI = FeedbackWaitingTime(NotBaited);
    TImed = median(TI, "omitnan");
    HighTITrial = FeedbackWaitingTime>TImed & NotBaited;
    LowTITrial = FeedbackWaitingTime<=TImed & NotBaited;
    
    [xdata, ydata, error] = BinData(LogOdds(HighTITrial), ChoiceLeft(HighTITrial), dvbin);
    vv = ~isnan(xdata) & ~isnan(ydata) & ~isnan(error);

    HighTIErrorBar = errorbar(TISortedPsychometricAxes, xdata(vv), ydata(vv)*100, error(vv)*100,...
                              'LineStyle', 'none',...
                              'LineWidth', 1,...
                              'Marker', 'o',...
                              'MarkerFaceColor', 'none',...
                              'MarkerEdgeColor', 'k',...
                              'Color', 'k');

    [xdata, ydata, error] = BinData(LogOdds(LowTITrial), ChoiceLeft(LowTITrial), dvbin);
    vv = ~isnan(xdata) & ~isnan(ydata) & ~isnan(error);

    LowTIErrorBar = errorbar(TISortedPsychometricAxes, xdata(vv), ydata(vv)*100, error(vv)*100,...
                             'LineStyle', 'none',...
                             'LineWidth', 1,...
                             'Marker', 'o',...
                             'MarkerFaceColor', 'none',...
                             'MarkerEdgeColor', [0.5 0.5 0.5],...
                             'Color', [0.5 0.5 0.5]);
    
    HighTIGLM = fitglm(LogOdds(HighTITrial), ChoiceLeft(HighTITrial), 'Distribution', 'binomial');
    HighTIGLMPlot = plot(TISortedPsychometricAxes, xdata, predict(HighTIGLM, xdata)*100,...
                         'Marker', 'none',...
                         'Color', 'k',...
                         'LineWidth', 0.5);

    LowTIGLM = fitglm(LogOdds(LowTITrial), ChoiceLeft(LowTITrial), 'Distribution', 'binomial');
    LowTIGLMPlot = plot(TISortedPsychometricAxes, xdata, predict(LowTIGLM, xdata)*100,...
                        'Marker', 'none',...
                        'Color', [0.5, 0.5, 0.5],...
                        'LineWidth', 0.5);
    
    TIPsychometricLegend = legend(TISortedPsychometricAxes, {'High TI','Low TI'},...
                                  'Box', 'off',...
                                  'Position', [0.55    0.57    0.05    0.03]);
    
    set(TISortedPsychometricAxes,...
        'FontSize', 10,...
        'XLim', [-5 5],...
        'YLim', [0, 100])
    title(TISortedPsychometricAxes, 'TI Sorted Psychometric')
    xlabel('log(odds)')
    % ylabel('Left Choices (%)')
    
    %% callibration plot
    CalibrationAxes = axes(AnalysisFigure, 'Position', [0.66    0.56    0.15    0.11]);
    hold(CalibrationAxes, 'on')
    
    Correct = Exploit(NotBaited); %'correct'
    edges = linspace(min(TI), max(TI), 8);
    
    [xdata, ydata, error] = BinData(TI, Correct, edges);
    vv = ~isnan(xdata) & ~isnan(ydata) & ~isnan(error);
    CalibrationErrorBar = errorbar(CalibrationAxes,...
                                   xdata(vv), ydata(vv)*100, error(vv),...
                                   'LineWidth', 2, ...
                                   'Color', 'k');
    
    set(CalibrationAxes,...
        'FontSize', 10,...
        'XLim', [0 SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5])
    % title(CalibrationHandle, 'Calibration');
    xlabel(CalibrationAxes, 'Invested Time (s)');
    ylabel(CalibrationAxes, 'Exploit Ratio (%)');
    
    % Value-TI GLM
    ValueTIGLMAxes = axes(AnalysisFigure, 'Position', [0.84, 0.56, 0.15, 0.11]);
    hold(ValueTIGLMAxes, 'on')

    ChosenValue = LeftValue .* ChoiceLeft + RightValue .* (1 - ChoiceLeft);
    UnchosenValue = LeftValue .* (1 - ChoiceLeft) + RightValue .* ChoiceLeft;
    ChosenMemory = ChoiceMemory .* ChoiceLeft - ChoiceMemory .* (1 - ChoiceLeft);

    TIChosenValue = ChosenValue(NotBaited);
    TIUnchosenValue = UnchosenValue(NotBaited);
    TIChosenMemory = ChosenMemory(NotBaited);

    X = [TIChosenValue', TIUnchosenValue', TIChosenMemory'];
    ValueTIGLM = fitglm(X, TI);
    
    ValueTICoeffBar = bar(ValueTIGLMAxes, ValueTIGLM.Coefficients.Estimate, 'w');
    ValueTICoeffErrorbar = errorbar(ValueTIGLMAxes,...
                                    ValueTIGLM.Coefficients.Estimate,...
                                    ValueTIGLM.Coefficients.SE,...
                                    'LineStyle', 'none',...
                                    'Color', 'k');
    
    SignificantLevel = 0.05;
    SignificanceIdx = find(ValueTIGLM.Coefficients.pValue < SignificantLevel);
    ValueTISignificantLine = line(ValueTIGLMAxes,...
                                  SignificanceIdx,...
                                  zeros(size(SignificanceIdx)),...
                                  'LineStyle', 'none',...
                                  'Color', 'k',...
                                  'Marker', '*');
    set(ValueTIGLMAxes,...
        'TickDir', 'out',...
        'XLim', [0, 5],...
        'XTick', [1, 2, 3, 4],...
        'XTickLabel', {'\beta_0', 'Q_{chosen}', 'Q_{unchosen}', 'm_{chosen}'},...
        'XTickLabelRotation', 90,...
        'FontSize', 10);
    ylabel(ValueTIGLMAxes, 'GLM Coeff.')
    title(ValueTIGLMAxes, 'Value-TI');

    %% Time Investment (TI) (only NotBaited Waiting Time) across session 
    LRTrialTIAxes = axes(AnalysisFigure, 'Position', [0.45    0.36    0.37    0.11]);
    hold(LRTrialTIAxes, 'on');
    
    % Smoothed NotBaited invested time per left/right across session
    LeftTITrial = NotBaited & ChoiceLeft==1;
    RightTITrial = NotBaited & ChoiceLeft==0;
    LeftTI = FeedbackWaitingTime(LeftTITrial);
    RightTI = FeedbackWaitingTime(RightTITrial);
    
    TrialLeftTIPlot = plot(LRTrialTIAxes, idxTrial(LeftTITrial), LeftTI,...
                           'LineStyle', 'none',...
                           'Marker', '.',...
                           'MarkerSize', 4,...
                           'MarkerEdgeColor', ColourPalette.Left);
    
    TrialRightTIPlot = plot(LRTrialTIAxes, idxTrial(RightTITrial), RightTI,...
                            'LineStyle', 'none',...
                            'Marker', '.',...
                            'MarkerSize', 4,...
                            'MarkerEdgeColor', ColourPalette.Right);
    
    LRVevaiometryLegend = legend(LRTrialTIAxes, {'Left', 'Right'},...
                                 'Box', 'off',...
                                 'Position', [0.75    0.44    0.05    0.03]);

    set(LRTrialTIAxes,...
        'TickDir', 'out',...
        'XLim', BlockSwitchAxes.XLim,...
        'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
        'YAxisLocation', 'right',...
        'FontSize', 10);
    ylabel('Invested Time (s)')
    % title('Block switching behaviour')
    
    %% plot vevaiometric (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
    LRTIVevaiometricAxes = axes(AnalysisFigure, 'Position', [0.89    0.36    0.10    0.11]);
    hold(LRTIVevaiometricAxes, 'on')
    
    LeftAbsResidual = AbsModelResiduals(LeftTITrial);
    RightAbsResidual = AbsModelResiduals(RightTITrial);
    
    LeftTIScatter = scatter(LRTIVevaiometricAxes, LeftAbsResidual, LeftTI,...
                            'Marker', '.',...
                            'MarkerEdgeColor', ColourPalette.Left,...
                            'SizeData', 18);
    
    RightTIScatter = scatter(LRTIVevaiometricAxes, RightAbsResidual, RightTI,...
                             'Marker', '.',...
                             'MarkerEdgeColor', ColourPalette.Right,...
                             'SizeData', 18);

    [LeftLineXData, LeftLineYData] = Binvevaio(LeftAbsResidual, LeftTI, 10);
    [RightLineXData, RightLineYData] = Binvevaio(RightAbsResidual, RightTI, 10);
    
    LeftTIPlot = plot(LRTIVevaiometricAxes, LeftLineXData, LeftLineYData,...
                      'Color', ColourPalette.Left,...
                      'LineWidth', 1);       
    
    RightTIPlot = plot(LRTIVevaiometricAxes, RightLineXData, RightLineYData,...
                       'Color', ColourPalette.Right,...
                       'LineWidth', 1);
    
    set(LRTIVevaiometricAxes,...
        'FontSize', 10,...
        'XLim', [0 1],...
        'YLim', [0 SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5])
    title(LRTIVevaiometricAxes, 'LRVevaiometric');
    xlabel(LRTIVevaiometricAxes, 'abs(Residuals)');
end

%% Move Time (MT) across session 
LRTrialMTAxes = axes(AnalysisFigure, 'Position', [0.45    0.19    0.37    0.11]);
hold(LRTrialMTAxes, 'on');

% Smoothed NotBaited invested time per left/right across session
LeftMT = MoveTime(ChoiceLeft==1);
RightMT = MoveTime(ChoiceLeft==0);

TrialLeftMTPlot = plot(LRTrialMTAxes, idxTrial(ChoiceLeft==1), LeftMT,...
                       'LineStyle', 'none',...
                       'Marker', '.',...
                       'MarkerSize', 4,...
                       'MarkerEdgeColor', ColourPalette.Left);

TrialRightMTPlot = plot(LRTrialMTAxes, idxTrial(ChoiceLeft==0), RightMT,...
                        'LineStyle', 'none',...
                        'Marker', '.',...
                        'MarkerSize', 4,...
                        'MarkerEdgeColor', ColourPalette.Right);

% LRMTVevaiometryLegend = legend(LRTrialMTAxes, {'Left', 'Right'},...
%                                'Box', 'off',...
%                                'Position', [0.75    0.35    0.05    0.03]);

set(LRTrialMTAxes,...
    'TickDir', 'out',...
    'XLim', BlockSwitchAxes.XLim,...
    'YLim', [0, 0.5],...
    'YAxisLocation', 'right',...
    'FontSize', 10);
ylabel('Move Time (s)')
% title('Block switching behaviour')

%% plot vevaiometric (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
LRMTVevaiometricAxes = axes(AnalysisFigure, 'Position', [0.89    0.19    0.10    0.11]);
hold(LRMTVevaiometricAxes, 'on')

LeftAbsResidual = AbsModelResiduals(ChoiceLeft==1);
RightAbsResidual = AbsModelResiduals(ChoiceLeft==0);

LeftMTScatter = scatter(LRMTVevaiometricAxes, LeftAbsResidual, LeftMT,...
                        'Marker', '.',...
                        'MarkerEdgeColor', ColourPalette.Left,...
                        'SizeData', 18);

RightMTScatter = scatter(LRMTVevaiometricAxes, RightAbsResidual, RightMT,...
                         'Marker', '.',...
                         'MarkerEdgeColor', ColourPalette.Right,...
                         'SizeData', 18);

[LeftLineXData, LeftLineYData] = Binvevaio(LeftAbsResidual, LeftMT, 10);
[RightLineXData, RightLineYData] = Binvevaio(RightAbsResidual, RightMT, 10);

LeftMTPlot = plot(LRMTVevaiometricAxes, LeftLineXData, LeftLineYData,...
                'Color', ColourPalette.Left,...
                'LineWidth', 1);       

RightMTPlot = plot(LRMTVevaiometricAxes, RightLineXData, RightLineYData,...
                 'Color', ColourPalette.Right,...
                 'LineWidth', 1);

set(LRMTVevaiometricAxes,...
    'FontSize', 10,...
    'XLim', [0 1],...
    'YLim', [0 0.5])
% title(LRMTVevaiometricAxes, 'LRMTVevaiometric');
xlabel(LRMTVevaiometricAxes, 'abs(Residuals)');

%% saving
DataFolder = OttLabDataServerFolderPath;
RatName = SessionData.Info.Subject;
% %%The following lines doesn't not work, as the timestamp documented
% in the SessionData may not be the same as the one being used for saving
% SessionDate = string(datetime(SessionData.Info.SessionDate), 'yyyyMMdd')';
% SessionTime = string(datetime(SessionData.Info.SessionStartTime_UTC), 'HHmmSS')';
% SessionDateTime = strcat(SessionDate, '_', SessionTime);
DataPath = strcat(DataFolder, RatName, '\bpod_session\', SessionDateTime, '\',...
                  RatName, '_TwoArmBanditVariant_', SessionDateTime, '_Matching_ChoiceSymmetricQLearning.png');
exportgraphics(AnalysisFigure, DataPath);

DataPath = strcat(DataFolder, RatName, '\bpod_graph\',...
                  RatName, '_TwoArmBanditVariant_', SessionDateTime, '_Matching_ChoiceSymmetricQLearning.png');
exportgraphics(AnalysisFigure, DataPath);

close(AnalysisFigure)

end % function