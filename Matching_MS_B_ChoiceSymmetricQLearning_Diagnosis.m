function AnalysisFigure = Matching_MS_B_ChoiceSymmetricQLearning_Diagnosis(DataFolderPath)
% MS = MultiSession
% B = Bayesian <- Prior using simulation & MCMC (Hamiltonian MC) sampling
% from prior to get marginal posterior
% Matching Analysis Function
% Developed by Antonio Lee @ BCCN Berlin
% Version 1.0 ~ Jan 2025
% Model iteration see the end of script

%% load files
if nargin < 1
    DataFolderPath = uigetdir(OttLabDataServerFolderPath());
elseif ~ischar(DataFolderPath) && ~isstring(DataFolderPath)
    disp('Error: Unknown input format. No further analysis can be performed.')
    return
end

try
    load(fullfile(DataFolderPath, '\Selected_Data.mat'));
    load(fullfile(DataFolderPath, '\Concatenated_Data.mat'));
catch
    disp('Error: Selected DataFolderPath does not contain the required .mat for further steps.')
    return
end

SessionDateRange = DataFolderPath(end-16:end);
[~, RatName] = fileparts(fileparts(fileparts(DataFolderPath)));

RatID = str2double(RatName);
if isnan(RatID)
    RatID = -1;
end
RatName = num2str(RatID);

AnalysisName = 'Matching_MS_B_ChoiceSymmetricQLearning';

%% Hierarchaical Symmetric Q-Learning with Forgetting and Stickiness model
try
    load(fullfile(DataFolderPath, strcat('\', AnalysisName, '.mat')));
catch
    disp('Error: no models are found')
    return
end

if ~exist('Models', 'var')
    disp('Error: Loaded data is not a Models')
    return
end

%% create figure
% create figure
AnalysisFigure = figure('Position', [   0       0    1191     842],... % DIN A3, 72 ppi
                        'NumberTitle', 'off',...
                        'Name', strcat(RatName, '_', SessionDateRange, '_', AnalysisName),...
                        'MenuBar', 'none',...
                        'Resize', 'off');

% spacer for correct saving dimension
FrameAxes = axes(AnalysisFigure, 'Position', [0 0 1 1]);
set(FrameAxes,...
    'XTick', [],...
    'YTick', [],...
    'XColor', 'w',...
    'YColor', 'w')

% Figure Info
FigureInfoAxes = axes(AnalysisFigure, 'Position', [0.01    0.98    0.48    0.01]);
set(FigureInfoAxes,...
    'XTick', [],...
    'YTick', [],...
    'XColor', 'w',...
    'YColor', 'w')

FigureTitle = strcat(RatName, '_', SessionDateRange, '_', AnalysisName, '_Diagnosis');

FigureTitleText = text(FigureInfoAxes, 0, 0,...
                       FigureTitle,...
                       'FontSize', 14,...
                       'FontWeight','bold',...
                       'Interpreter', 'none');

% colour palette
ColourPalette = CommonColourPalette();

%% Analysis across sessions
SessionDateLabel = [];
nSessions = length(DataHolder);

% Posterior mode (i.e. MAP, maximum a posteriori) estimate of ChoiceSymmetricQ
% Photometry site vs non-photometry vs day-of-week (vs estrus if female)
MAPEstimateXTicks = {'all', 'non-photo', 'left-photo', 'right-photo'};

LearningRateMAPAxes = axes(AnalysisFigure, 'Position', [0.05    0.77    0.10    0.16]);
hold(LearningRateMAPAxes, 'on');

LearningRateMAPs = nan(1, nSessions);

set(LearningRateMAPAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [-1, 4],...
    'XTick', 0:3,...
    'XTickLabel', {},...
    'YAxisLocation', 'left')
ylabel(LearningRateMAPAxes, '\alpha (a.u.)')
title(LearningRateMAPAxes, 'MAP estimate')

InverseTemperatureMAPAxes = axes(AnalysisFigure, 'Position', [0.05    0.57    0.10    0.16]);
hold(InverseTemperatureMAPAxes, 'on');

InverseTemperatureMAPs = nan(1, nSessions);

set(InverseTemperatureMAPAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [-1, 4],...
    'XTick', 0:3,...
    'XTickLabel', {},...
    'YAxisLocation', 'left')
ylabel(InverseTemperatureMAPAxes, '\beta (a.u.)')

ForgettingRateMAPAxes = axes(AnalysisFigure, 'Position', [0.05    0.38    0.10    0.16]);
hold(ForgettingRateMAPAxes, 'on');

ForgettingRateMAPs = nan(1, nSessions);

set(ForgettingRateMAPAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [-1, 4],...
    'XTick', 0:3,...
    'XTickLabel', MAPEstimateXTicks,...
    'XTickLabelRotation', 90,...
    'YAxisLocation', 'left')
ylabel(ForgettingRateMAPAxes, '\gamma_v (a.u.)')

ChoiceStickinessMAPAxes = axes(AnalysisFigure, 'Position', [0.20    0.77    0.10    0.16]);
hold(ChoiceStickinessMAPAxes, 'on');

ChoiceStickinessMAPs = nan(1, nSessions);

set(ChoiceStickinessMAPAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [-1, 4],...
    'XTick', 0:3,...
    'XTickLabel', {},...
    'YAxisLocation', 'left')
ylabel(ChoiceStickinessMAPAxes, '\phi (a.u.)')

ChoiceForgettingRateMAPAxes = axes(AnalysisFigure, 'Position', [0.20    0.57    0.10    0.16]);
hold(ChoiceForgettingRateMAPAxes, 'on');

ChoiceForgettingRateMAPs = nan(1, nSessions);

set(ChoiceForgettingRateMAPAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [-1, 4],...
    'XTick', 0:3,...
    'XTickLabel', {},...
    'YAxisLocation', 'left')
ylabel(ChoiceForgettingRateMAPAxes, '\gamma_m (a.u.)')

BiasMAPAxes = axes(AnalysisFigure, 'Position', [0.20    0.38    0.10    0.15]);
hold(BiasMAPAxes, 'on');

BiasMAPs = nan(1, nSessions);

set(BiasMAPAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [-1, 4],...
    'XTick', 0:3,...
    'XTickLabel', MAPEstimateXTicks,...
    'XTickLabelRotation', 90,...
    'YAxisLocation', 'left')
ylabel(BiasMAPAxes, 'bias (a.u.)')

%% residual distribution overview
SessionResidualDistributionAxes = axes(AnalysisFigure, 'Position', [0.35    0.15    0.64    0.09]);
hold(SessionResidualDistributionAxes, 'on')

SessionIdx = [];
Residuals = [];

set(SessionResidualDistributionAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [0 length(DataHolder)+1],...
    'XTickLabel', [],...
    'YLim', [-1, 1],...
    'YAxisLocation', 'left')
ylabel(SessionResidualDistributionAxes, 'Residuals (a.u.)')

%% MAP overview
% inverse temperature
SessionLearningRateMAPAxes = axes(AnalysisFigure, 'Position', [0.35    0.86    0.64    0.10]);
hold(SessionLearningRateMAPAxes, 'on')

set(SessionLearningRateMAPAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [0 length(DataHolder)+1],...
    'XTickLabel', [],...
    'YAxisLocation', 'left')
ylabel(SessionLearningRateMAPAxes, '\alpha (a.u.)')

% inverse temperature
SessionInverseTemperatureMAPAxes = axes(AnalysisFigure, 'Position', [0.35    0.74    0.64    0.10]);
hold(SessionInverseTemperatureMAPAxes, 'on')

set(SessionInverseTemperatureMAPAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [0 length(DataHolder)+1],...
    'XTickLabel', [],...
    'YAxisLocation', 'left')
ylabel(SessionInverseTemperatureMAPAxes, '\beta (a.u.)')

% forgetting rate
SessionForgettingRateMAPAxes = axes(AnalysisFigure, 'Position', [0.35    0.62    0.64    0.10]);
hold(SessionForgettingRateMAPAxes, 'on')

set(SessionForgettingRateMAPAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [0 length(DataHolder)+1],...
    'XTickLabel', [],...
    'YAxisLocation', 'left')
ylabel(SessionForgettingRateMAPAxes, '\gamma_v (a.u.)')

% choice stickiness
SessionChoiceStickinessMAPAxes = axes(AnalysisFigure, 'Position', [0.35    0.50    0.64    0.10]);
hold(SessionChoiceStickinessMAPAxes, 'on')

set(SessionChoiceStickinessMAPAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [0 length(DataHolder)+1],...
    'XTickLabel', [],...
    'YAxisLocation', 'left')
ylabel(SessionChoiceStickinessMAPAxes, '\phi (a.u.)')

% choice forgetting rate
SessionChoiceForgettingRateMAPAxes = axes(AnalysisFigure, 'Position', [0.35    0.38    0.64    0.10]);
hold(SessionChoiceForgettingRateMAPAxes, 'on')

set(SessionChoiceForgettingRateMAPAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [0 length(DataHolder)+1],...
    'XTickLabel', [],...
    'YAxisLocation', 'left')
ylabel(SessionChoiceForgettingRateMAPAxes, '\gamma_m (a.u.)')

% bias
SessionBiasMAPAxes = axes(AnalysisFigure, 'Position', [0.35    0.26    0.64    0.10]);
hold(SessionBiasMAPAxes, 'on')

set(SessionBiasMAPAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [0 length(DataHolder)+1],...
    'XTickLabel', [],...
    'YAxisLocation', 'left')
ylabel(SessionBiasMAPAxes, 'Bias (a.u.)')

%% SessionMeta
PhotometryRecordingTag = nan(1, length(DataHolder)); % 1: non-photo, 2:left, 3:right
WeekdayTag = nan(1, length(DataHolder)); %1: Sunday...

%% Plotting
for iSession = 1:length(DataHolder)
    % Import SessionData
    SessionData = DataHolder{iSession};
    SessionDateLabel = [SessionDateLabel, string(datestr(datetime(SessionData.Info.SessionDate), 'YYYYmmDD(ddd)'))];
    
    nTrials = SessionData.nTrials;
    if nTrials < 200
        disp(['Session ', num2str(iSession), ' has nTrial < 200. Impossible for analysis.'])
        continue
    end

    if ~isfield(SessionData.Custom.SessionMeta, 'PhotometryBrainArea')
        PhotometryRecordingTag(iSession) = 1;
    elseif contains(SessionData.Custom.SessionMeta.PhotometryBrainArea, 'eft')
        PhotometryRecordingTag(iSession) = 2;
    elseif contains(SessionData.Custom.SessionMeta.PhotometryBrainArea, 'ight')
        PhotometryRecordingTag(iSession) = 3;
    end
    WeekdayTag(iSession) = weekday(SessionData.Info.SessionDate);
    
    ChoiceLeft = SessionData.Custom.TrialData.ChoiceLeft(1:nTrials);
    Rewarded = SessionData.Custom.TrialData.Rewarded(1:nTrials);

    %% Analysis across sessions
    Model = Models{iSession};
    Chain = vertcat(Model.Chains{:});
    
    [ProbDensity, Values] = ksdensity(Chain(:, 1));
    LearningRateMAPs(iSession) = Values(ProbDensity == max(ProbDensity));
    
    [ProbDensity, Values] = ksdensity(Chain(:, 2));
    InverseTemperatureMAPs(iSession) = Values(ProbDensity == max(ProbDensity));
    
    [ProbDensity, Values] = ksdensity(Chain(:, 3));
    ForgettingRateMAPs(iSession) = Values(ProbDensity == max(ProbDensity));
    
    [ProbDensity, Values] = ksdensity(Chain(:, 4));
    ChoiceStickinessMAPs(iSession) = Values(ProbDensity == max(ProbDensity));
    
    [ProbDensity, Values] = ksdensity(Chain(:, 5));
    ChoiceForgettingRateMAPs(iSession) = Values(ProbDensity == max(ProbDensity));
    
    [ProbDensity, Values] = ksdensity(Chain(:, 6));
    BiasMAPs(iSession) = Values(ProbDensity == max(ProbDensity));
    
    MAPEstimates = [LearningRateMAPs(iSession), InverseTemperatureMAPs(iSession), ForgettingRateMAPs(iSession),...
                    ChoiceStickinessMAPs(iSession), ChoiceForgettingRateMAPs(iSession), BiasMAPs(iSession)];
    
    [NegLogDataLikelihood, Values] = ChoiceSymmetricQLearning(MAPEstimates, nTrials, ChoiceLeft, Rewarded);
    LogOdds = InverseTemperatureMAPs(iSession) * (Values.LeftValue - Values.RightValue) +...
              + ChoiceStickinessMAPs(iSession) * Values.ChoiceMemory + BiasMAPs(iSession);
    
    PredictedLeftChoiceProb = 1 ./ (1 + exp(-LogOdds));

    PredictedChoice = double(PredictedLeftChoiceProb>=0.5);
    PredictedChoice(isnan(ChoiceLeft)) = nan;
    
    Explore = abs(ChoiceLeft - PredictedLeftChoiceProb) >= 0.5;
    Exploit = abs(ChoiceLeft - PredictedLeftChoiceProb) < 0.5;
    
    AbsModelResiduals = abs(ChoiceLeft - PredictedLeftChoiceProb);

    %% session residuals overview
    SessionIdx = [SessionIdx, iSession .* ones(1, nTrials)];
    Residuals = [Residuals, ChoiceLeft - PredictedLeftChoiceProb];
    
end

%% Average across sessions
% Posterior mode (i.e. MAP, maximum a posteriori) estimate of ChoiceSymmetricQ
XData = zeros(size(LearningRateMAPs));
LearningRateSwarmchart = swarmchart(LearningRateMAPAxes,...
                                    XData,...
                                    LearningRateMAPs,...
                                    'Marker', '.',...
                                    'MarkerEdgeColor', ColourPalette.Session,...
                                    'XJitter', 'density',...
                                    'XJitterWidth', 1);

LearningRateBoxchart = boxchart(LearningRateMAPAxes, XData, LearningRateMAPs);
set(LearningRateBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

PhotometryLearningRateSwarmchart = swarmchart(LearningRateMAPAxes,...
                                              PhotometryRecordingTag,...
                                              LearningRateMAPs,...
                                              'Marker', '.',...
                                              'MarkerEdgeColor', ColourPalette.Session,...
                                              'XJitter', 'density',...
                                              'XJitterWidth', 1);

PhotometryLearningRateBoxchart = boxchart(LearningRateMAPAxes, PhotometryRecordingTag, LearningRateMAPs);
set(PhotometryLearningRateBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

XData = zeros(size(InverseTemperatureMAPs));
InverseTemperatureSwarmchart = swarmchart(InverseTemperatureMAPAxes,...
                                          XData,...
                                          InverseTemperatureMAPs,...
                                          'Marker', '.',...
                                          'MarkerEdgeColor', ColourPalette.Session,...
                                          'XJitter', 'density',...
                                          'XJitterWidth', 1);

InverseTemperatureBoxchart = boxchart(InverseTemperatureMAPAxes, XData, InverseTemperatureMAPs);
set(InverseTemperatureBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

PhotometryInverseTemperatureSwarmchart = swarmchart(InverseTemperatureMAPAxes,...
                                                    PhotometryRecordingTag,...
                                                    InverseTemperatureMAPs,...
                                                    'Marker', '.',...
                                                    'MarkerEdgeColor', ColourPalette.Session,...
                                                    'XJitter', 'density',...
                                                    'XJitterWidth', 1);

PhotometryInverseTemperatureBoxchart = boxchart(InverseTemperatureMAPAxes, PhotometryRecordingTag, InverseTemperatureMAPs);
set(PhotometryInverseTemperatureBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

XData = zeros(size(ForgettingRateMAPs));
ForgettingRateSwarmchart = swarmchart(ForgettingRateMAPAxes,...
                                      XData,...
                                      ForgettingRateMAPs,...
                                      'Marker', '.',...
                                      'MarkerEdgeColor', ColourPalette.Session,...
                                      'XJitter', 'density',...
                                      'XJitterWidth', 1);

ForgettingRateBoxchart = boxchart(ForgettingRateMAPAxes, XData, ForgettingRateMAPs);
set(ForgettingRateBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

PhotometryForgettingRateSwarmchart = swarmchart(ForgettingRateMAPAxes,...
                                                PhotometryRecordingTag,...
                                                ForgettingRateMAPs,...
                                                'Marker', '.',...
                                                'MarkerEdgeColor', ColourPalette.Session,...
                                                'XJitter', 'density',...
                                                'XJitterWidth', 1);

PhotometryForgettingRateBoxchart = boxchart(ForgettingRateMAPAxes, PhotometryRecordingTag, ForgettingRateMAPs);
set(PhotometryForgettingRateBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

XData = zeros(size(ChoiceStickinessMAPs));
ChoiceStickinessSwarmchart = swarmchart(ChoiceStickinessMAPAxes,...
                                        XData,...
                                        ChoiceStickinessMAPs,...
                                        'Marker', '.',...
                                        'MarkerEdgeColor', ColourPalette.Session,...
                                        'XJitter', 'density',...
                                        'XJitterWidth', 1);

ChoiceStickinessBoxchart = boxchart(ChoiceStickinessMAPAxes, XData, ChoiceStickinessMAPs);
set(ChoiceStickinessBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

PhotometryChoiceStickinessSwarmchart = swarmchart(ChoiceStickinessMAPAxes,...
                                                  PhotometryRecordingTag,...
                                                  ChoiceStickinessMAPs,...
                                                  'Marker', '.',...
                                                  'MarkerEdgeColor', ColourPalette.Session,...
                                                  'XJitter', 'density',...
                                                  'XJitterWidth', 1);

PhotometryChoiceStickinessBoxchart = boxchart(ChoiceStickinessMAPAxes, PhotometryRecordingTag, ChoiceStickinessMAPs);
set(PhotometryChoiceStickinessBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

XData = zeros(size(ChoiceForgettingRateMAPs));
ChoiceForgettingRateSwarmchart = swarmchart(ChoiceForgettingRateMAPAxes,...
                                            XData,...
                                            ChoiceForgettingRateMAPs,...
                                            'Marker', '.',...
                                            'MarkerEdgeColor', ColourPalette.Session,...
                                            'XJitter', 'density',...
                                            'XJitterWidth', 1);

ChoiceForgettingRateBoxchart = boxchart(ChoiceForgettingRateMAPAxes, XData, ChoiceForgettingRateMAPs);
set(ChoiceForgettingRateBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

PhotometryChoiceForgettingRateSwarmchart = swarmchart(ChoiceForgettingRateMAPAxes,...
                                                      PhotometryRecordingTag,...
                                                      ChoiceForgettingRateMAPs,...
                                                      'Marker', '.',...
                                                      'MarkerEdgeColor', ColourPalette.Session,...
                                                      'XJitter', 'density',...
                                                      'XJitterWidth', 1);

PhotometryChoiceForgettingRateBoxchart = boxchart(ChoiceForgettingRateMAPAxes, PhotometryRecordingTag, ChoiceForgettingRateMAPs);
set(PhotometryChoiceForgettingRateBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

XData = zeros(size(BiasMAPs));
BiasSwarmchart = swarmchart(BiasMAPAxes,...
                            XData,...
                            BiasMAPs,...
                            'Marker', '.',...
                            'MarkerEdgeColor', ColourPalette.Session,...
                            'XJitter', 'density',...
                            'XJitterWidth', 1);

BiasBoxchart = boxchart(BiasMAPAxes, XData, BiasMAPs);
set(BiasBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

PhotometryBiasSwarmchart = swarmchart(BiasMAPAxes,...
                                      PhotometryRecordingTag,...
                                      BiasMAPs,...
                                      'Marker', '.',...
                                      'MarkerEdgeColor', ColourPalette.Session,...
                                      'XJitter', 'density',...
                                      'XJitterWidth', 1);

PhotometryBiasBoxchart = boxchart(BiasMAPAxes, PhotometryRecordingTag, BiasMAPs);
set(PhotometryBiasBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

%% Session residuals overview
SessionResidualsSwamchart = swarmchart(SessionResidualDistributionAxes,...
                                       SessionIdx,...
                                       Residuals,...
                                       'Marker', '.',...
                                       'MarkerEdgeColor', ColourPalette.Session,...
                                       'XJitter', 'density',...
                                       'XJitterWidth', 1);


set(SessionResidualDistributionAxes,...
    'XTick', 1:length(SessionDateLabel),...
    'XTickLabel', SessionDateLabel,...
    'XTickLabelRotation', 90);

%% session MAP overview
SesionDateDatetime = datetime(SessionDateLabel, 'InputFormat', 'yyyyMMdd(eee)');
SessionDateDiffDays = caldays(caldiff(SesionDateDatetime, 'days'));
WaterDeprivedDayOneIdx = [1, find(SessionDateDiffDays > 1) + 1];

% forgetting rate
SessionLearningRateMAPPlot = plot(SessionLearningRateMAPAxes, 1:nSessions, LearningRateMAPs,...
                                  'Marker', 'o',...
                                  'MarkerIndices', WaterDeprivedDayOneIdx,...
                                  'Color', 'k');

set(SessionLearningRateMAPAxes,...
    'XTick', 1:length(SessionDateLabel),...
    'XTickLabel', {});

% forgetting rate
SessionInverseTemperatureMAPPlot = plot(SessionInverseTemperatureMAPAxes, 1:nSessions, InverseTemperatureMAPs,...
                                        'Marker', 'o',...
                                        'MarkerIndices', WaterDeprivedDayOneIdx,...
                                        'Color', 'k');

set(SessionInverseTemperatureMAPAxes,...
    'XTick', 1:length(SessionDateLabel),...
    'XTickLabel', {});

% forgetting rate
SessionForgettingRateMAPPlot = plot(SessionForgettingRateMAPAxes, 1:nSessions, ForgettingRateMAPs,...
                                    'Marker', 'o',...
                                    'MarkerIndices', WaterDeprivedDayOneIdx,...
                                    'Color', 'k');

set(SessionForgettingRateMAPAxes,...
    'XTick', 1:length(SessionDateLabel),...
    'XTickLabel', {});

% choice stickiness
SessionChoiceStickinessMAPPlot = plot(SessionChoiceStickinessMAPAxes, 1:nSessions, ChoiceStickinessMAPs,...
                                      'Marker', 'o',...
                                      'MarkerIndices', WaterDeprivedDayOneIdx,...
                                      'Color', 'k');

set(SessionChoiceStickinessMAPAxes,...
    'XTick', 1:length(SessionDateLabel),...
    'XTickLabel', {});

% choice forgetting rate
SessionChoiceForgettingRateMAPPlot = plot(SessionChoiceForgettingRateMAPAxes, 1:nSessions, ChoiceForgettingRateMAPs,...
                                          'Marker', 'o',...
                                          'MarkerIndices', WaterDeprivedDayOneIdx,...
                                          'Color', 'k');

set(SessionChoiceForgettingRateMAPAxes,...
    'XTick', 1:length(SessionDateLabel),...
    'XTickLabel', {});

% bias
SessionBiasMAPPlot = plot(SessionBiasMAPAxes, 1:nSessions, BiasMAPs,...
                          'Marker', 'o',...
                          'MarkerIndices', WaterDeprivedDayOneIdx,...
                          'Color', 'k');

set(SessionBiasMAPAxes,...
    'XTick', 1:length(SessionDateLabel),...
    'XTickLabel', {});

disp('YOu aRE a bEAutIFul HUmaN BeiNG, saID anTOniO.')

DataPath = strcat(DataFolderPath, '\', FigureTitle, '.png');
exportgraphics(AnalysisFigure, DataPath);

DataPath = strcat(DataFolderPath, '\', FigureTitle, '.fig');
savefig(AnalysisFigure, DataPath);

end % function