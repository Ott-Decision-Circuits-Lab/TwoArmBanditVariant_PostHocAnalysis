function AnalysisFigure = Matching_MS_MLE_ChoiceRegressionQ_Visualisation(DataFolderPath)
% MS = MultiSession
% B = Bayesian <- Prior using simulation & MCMC (Hamiltonian MC) sampling
% from prior to get marginal posterior
% Matching Analysis Function
% Developed by Antonio Lee @ BCCN Berlin
% Version 1.0 ~ Jan 2025
% Model iteration see the end of script

%% load files
if nargin < 1
    DataFolderPath = uigetdir(OttLabDataServerFolderPath());
elseif ~ischar(DataFolderPath) && ~isstring(DataFolderPath)
    disp('Error: Unknown input format. No further analysis can be performed.')
    return
end

try
    load(fullfile(DataFolderPath, '\Selected_Data.mat'));
    load(fullfile(DataFolderPath, '\Concatenated_Data.mat'));
catch
    disp('Error: Selected DataFolderPath does not contain the required .mat for further steps.')
    return
end

SessionDateRange = DataFolderPath(end-16:end);
[~, RatName] = fileparts(fileparts(fileparts(DataFolderPath)));

RatID = str2double(RatName);
if isnan(RatID)
    RatID = -1;
end
RatName = num2str(RatID);

AnalysisName = 'Matching_MS_MLE_ChoiceRegressionQ';

%% Symmetric Q-Learning with Forgetting and Stickiness model
Models = {};
try
    load(fullfile(DataFolderPath, strcat('\', AnalysisName, '.mat')));
catch
    for iSession = 1:length(DataHolder)
        SessionData = DataHolder{iSession};
        
        try
            Models{iSession} = Matching_SS_MLE_ChoiceRegressionQ_Model(SessionData);
        catch
            Models{iSession} = [];
            disp(strcat('Warning: Problem running model for Session', num2str(iSession)))
        end
    end

    save(fullfile(DataFolderPath, strcat('\', AnalysisName, '.mat')), 'Models')
    disp('YOu aRE a bEAutIFul HUmaN BeiNG, saID anTOniO.')
end

if isempty(Models)
    disp('Error: No model is either computed or loaded. No further visualisation is possible.')
    return
end

%% create figure
% create figure
AnalysisFigure = figure('Position', [   0       0    1191     842],... % DIN A3, 72 ppi
                        'NumberTitle', 'off',...
                        'Name', strcat(RatName, '_', SessionDateRange, '_', AnalysisName),...
                        'MenuBar', 'none',...
                        'Resize', 'off');

% spacer for correct saving dimension
FrameAxes = axes(AnalysisFigure, 'Position', [0 0 1 1]);
set(FrameAxes,...
    'XTick', [],...
    'YTick', [],...
    'XColor', 'w',...
    'YColor', 'w')

% Figure Info
FigureInfoAxes = axes(AnalysisFigure, 'Position', [0.01    0.98    0.48    0.01]);
set(FigureInfoAxes,...
    'XTick', [],...
    'YTick', [],...
    'XColor', 'w',...
    'YColor', 'w')

FigureTitle = strcat(RatName, '_', SessionDateRange, '_', AnalysisName);

FigureTitleText = text(FigureInfoAxes, 0, 0,...
                       FigureTitle,...
                       'FontSize', 14,...
                       'FontWeight','bold',...
                       'Interpreter', 'none');

% colour palette
ColourPalette = CommonColourPalette();

%% Analysis across sessions
SessionDateLabel = [];
nSessions = length(DataHolder);

% Psychometric
PsychometricAxes = axes(AnalysisFigure, 'Position', [0.01    0.75    0.15    0.19]);
hold(PsychometricAxes, 'on')

AllPredictedProb = [];
AllLogOdds = [];
AllChoiceLeft = [];

set(PsychometricAxes,...
    'FontSize', 10,...
    'XLim', [-5 5],...
    'YLim', [0, 100],...
    'YAxisLocation', 'right')
title(PsychometricAxes, 'Psychometric')
xlabel(PsychometricAxes, 'log(odds)')
ylabel(PsychometricAxes, 'Left Choices (%)')

% MLE (maximum likelihood estimation) estimate of ChoiceRegressionQ
BiasMLEAxes = axes(AnalysisFigure, 'Position', [0.22    0.75    0.02    0.19]);
hold(BiasMLEAxes, 'on');

BiasMLEs = [];

set(BiasMLEAxes,...
    'FontSize', 10,...
    'XLim', [-1, 1],...
    'XTick', 0,...
    'XTickLabel', '\beta_0',...
    'YAxisLocation', 'right')

QCoeffMLEAxes = axes(AnalysisFigure, 'Position', [0.27    0.75    0.02    0.19]);
hold(QCoeffMLEAxes, 'on');

QCoeffMLEs = [];

set(QCoeffMLEAxes,...
    'FontSize', 10,...
    'XLim', [-1, 1],...
    'XTick', 0,...
    'XTickLabel', '\beta_{Q_{t-1}}',...
    'YAxisLocation', 'right')

Minus1ChoiceMLEAxes = axes(AnalysisFigure, 'Position', [0.32    0.75    0.02    0.19]);
hold(Minus1ChoiceMLEAxes, 'on');

Minus1ChoiceMLEs = [];

set(Minus1ChoiceMLEAxes,...
    'FontSize', 10,...
    'XLim', [-1, 1],...
    'XTick', 0,...
    'XTickLabel', '\beta_{c_{t-1}}',...
    'YAxisLocation', 'right')

Minus1RewardMLEAxes = axes(AnalysisFigure, 'Position', [0.37    0.75    0.02    0.19]);
hold(Minus1RewardMLEAxes, 'on');

Minus1RewardMLEs = [];

set(Minus1RewardMLEAxes,...
    'FontSize', 10,...
    'XLim', [-1, 1],...
    'XTick', 0,...
    'XTickLabel', '\beta_{r_{t-1}}',...
    'YAxisLocation', 'right')

Minus2ChoiceMLEAxes = axes(AnalysisFigure, 'Position', [0.42    0.75    0.02    0.19]);
hold(Minus2ChoiceMLEAxes, 'on');

Minus2ChoiceMLEs = [];

set(Minus2ChoiceMLEAxes,...
    'FontSize', 10,...
    'XLim', [-1, 1],...
    'XTick', 0,...
    'XTickLabel', '\beta_{c_{t-2}}',...
    'YAxisLocation', 'right')

Minus2RewardMLEAxes = axes(AnalysisFigure, 'Position', [0.47    0.75    0.02    0.19]);
hold(Minus2RewardMLEAxes, 'on');

Minus2RewardMLEs = [];

set(Minus2RewardMLEAxes,...
    'FontSize', 10,...
    'XLim', [-1, 1],...
    'XTick', 0,...
    'XTickLabel', '\beta_{r_{t-2}}',...
    'YAxisLocation', 'right')
ylabel(Minus2RewardMLEAxes, 'MLE estimate (a.u.)')

% Vevaiometric      
VevaiometricAxes = axes(AnalysisFigure, 'Position', [0.01    0.48    0.15    0.19]);
hold(VevaiometricAxes, 'on')

AllExploringTI = [];
AllExploitingTI = [];

AllExploringLogOdds = [];
AllExploitingLogOdds = [];

set(VevaiometricAxes,...
    'FontSize', 10,...
    'XLim', [-5 5],...
    'YLim', [0 12],...
    'YAxisLocation', 'right')
title(VevaiometricAxes, 'Vevaiometric');
ylabel(VevaiometricAxes, 'Invested Time (s)');

% Vevaiometric z-score
VevaiometricSqrtZScoreAxes = axes(AnalysisFigure, 'Position', [0.01    0.25    0.15    0.19]);
hold(VevaiometricSqrtZScoreAxes, 'on')

AllExploringTISqrtZScore = [];
AllExploitingTISqrtZScore = [];

set(VevaiometricSqrtZScoreAxes,...
    'FontSize', 10,...
    'XLim', [-5 5],...
    'YLim', [-2 2],...
    'YAxisLocation', 'right')
xlabel(VevaiometricSqrtZScoreAxes, 'log(odds)');
ylabel(VevaiometricSqrtZScoreAxes, 'sqrt(Invested Time) (z)');

% Vevaiometric (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
LRVevaiometricAxes = axes(AnalysisFigure, 'Position', [0.33    0.48    0.15    0.19]);
hold(LRVevaiometricAxes, 'on')

AllLeftTI = [];
AllRightTI = [];
AllLeftAbsResidual = [];
AllRightAbsResidual = [];

set(LRVevaiometricAxes,...
    'FontSize', 10,...
    'XLim', [0 1],...
    'YLim', [0 12])
title(LRVevaiometricAxes, 'LRVevaiometric');

% Vevaiometric z-score (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
LRVevaiometricSqrtZScoreAxes = axes(AnalysisFigure, 'Position', [0.33    0.25    0.15    0.19]);
hold(LRVevaiometricSqrtZScoreAxes, 'on')

AllLeftTISqrtZScore = [];
AllRightTISqrtZScore = [];

set(LRVevaiometricSqrtZScoreAxes,...
    'FontSize', 10,...
    'XLim', [0 1],...
    'YLim', [-2 2])
xlabel(LRVevaiometricSqrtZScoreAxes, 'abs(Residuals)');

% TI distribution per left-right and explore/exploit
TIDistributionAxes = axes(AnalysisFigure, 'Position', [0.22    0.48    0.09    0.19]);
hold(TIDistributionAxes, 'on')

set(TIDistributionAxes,...
    'TickDir', 'out',...
    'XLim', [-0.5, 1.5],...
    'XTick', [0 1],...
    'XTickLabel', {},...
    'YLim', [0, 12],...
    'FontSize', 10);
xlabel(TIDistributionAxes, '')
title(TIDistributionAxes, 'TI Distribution');

% TI-ZScore distribution per left-right and explore/exploit
TISqrtZScoreDistributionAxes = axes(AnalysisFigure, 'Position', [0.22    0.25    0.09    0.19]);
hold(TISqrtZScoreDistributionAxes, 'on')

set(TISqrtZScoreDistributionAxes,...
    'TickDir', 'out',...
    'XLim', [-0.5, 1.5],...
    'XTick', [0 1],...
    'XTickLabel', {'Left', 'Right'},...
    'YLim', [-2, 2],...
    'FontSize', 10);
xlabel(TISqrtZScoreDistributionAxes, '')
title(TISqrtZScoreDistributionAxes, '');

%% Explore/exploit level around block switch
% Block transition
BlockTransitionAxes = axes(AnalysisFigure, 'Position', [0.01    0.06    0.15    0.12]);
hold(BlockTransitionAxes, 'on');

Block1To2Explore = nan(100, 66);
Block2To3Explore = nan(100, 66);
Block3To4Explore = nan(100, 66);
Block4To5Explore = nan(100, 66);

set(BlockTransitionAxes,...
    'TickDir', 'out',...
    'XLim', [-10 50],...
    'XTick', [0 20 40],...
    'XTickLabel', [1 21 41],...
    'YLim', [0 40],...
    'YAxisLocation', 'right',...
    'FontSize', 10);
xlabel(BlockTransitionAxes, 'iTrial of new block')
ylabel(BlockTransitionAxes, 'Choice_{explore} (%)')

% Block transition of abs(residuals)
BlockTransitionAbsResAxes = axes(AnalysisFigure, 'Position', [0.33    0.06    0.15    0.12]);
hold(BlockTransitionAbsResAxes, 'on');

Block1To2AbsRes = nan(100, 66);
Block2To3AbsRes = nan(100, 66);
Block3To4AbsRes = nan(100, 66);
Block4To5AbsRes = nan(100, 66);

set(BlockTransitionAbsResAxes,...
    'TickDir', 'out',...
    'XLim', [-10 50],...
    'XTick', [0 20 40],...
    'XTickLabel', [1 21 41],...
    'YAxisLocation', 'right',...
    'FontSize', 10);
xlabel(BlockTransitionAbsResAxes, 'iTrial of new block')
ylabel(BlockTransitionAbsResAxes, 'mean(abs(Residuals))')

% Block transition of abs(residuals)
BlockTransitionRewRateAxes = axes(AnalysisFigure, 'Position', [0.53    0.06    0.15    0.12]);
hold(BlockTransitionRewRateAxes, 'on');

Block1To2RewRate = nan(100, 66);
Block2To3RewRate = nan(100, 66);
Block3To4RewRate = nan(100, 66);
Block4To5RewRate = nan(100, 66);

set(BlockTransitionRewRateAxes,...
    'TickDir', 'out',...
    'XLim', [-10 50],...
    'XTick', [0 20 40],...
    'XTickLabel', [1 21 41],...
    'YAxisLocation', 'right',...
    'FontSize', 10);
xlabel(BlockTransitionRewRateAxes, 'iTrial of new block')
ylabel(BlockTransitionRewRateAxes, 'mean(Reward Rate)')

% Explore/exploit level against reward rate
RewardRateAxes = axes(AnalysisFigure, 'Position', [0.77    0.06    0.15    0.12]);
hold(RewardRateAxes, 'on');

AllAbsResidual = [];
AllRewardRate = [];

set(RewardRateAxes,...
    'TickDir', 'out',...
    'XLim', [0 1],...
    'YLim', [0 100],...
    'YAxisLocation', 'left',...
    'FontSize', 10);
xlabel(RewardRateAxes, 'abs(Residuals)')
ylabel(RewardRateAxes, 'Reward rate')

AllLeftTIRewardRate = [];
AllRightTIRewardRate = [];

%% Move time
% Vevaiometric MT
VevaiometricMTAxes = axes(AnalysisFigure, 'Position', [0.51    0.48    0.15    0.19]);
hold(VevaiometricMTAxes, 'on')

AllExploringMT = [];
AllExploitingMT = [];

AllExploringMTLogOdds = [];
AllExploitingMTLogOdds = [];

set(VevaiometricMTAxes,...
    'FontSize', 10,...
    'XLim', [-5 5],...
    'YLim', [0 0.5],...
    'YAxisLocation', 'right')
title(VevaiometricMTAxes, 'Vevaiometric MT');
ylabel(VevaiometricMTAxes, 'Move Time (s)');

% Vevaiometric MT z-score
% use log normal
% NOT USE AS NOT NORMAL DISTRIBUTION
VevaiometricMTLogZScoreAxes = axes(AnalysisFigure, 'Position', [0.51    0.25    0.15    0.19]);
hold(VevaiometricMTLogZScoreAxes, 'on')

AllExploringMTLogZScore = [];
AllExploitingMTLogZScore = [];

set(VevaiometricMTLogZScoreAxes,...
    'FontSize', 10,...
    'XLim', [-5, 5],...
    'YLim', [-4, 4],...
    'YAxisLocation', 'right')
xlabel(VevaiometricMTLogZScoreAxes, 'log(odds)');
ylabel(VevaiometricMTLogZScoreAxes, 'log(Move Time) (z-score)');

% Vevaiometric (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
LRVevaiometricMTAxes = axes(AnalysisFigure, 'Position', [0.83    0.48    0.15    0.19]);
hold(LRVevaiometricMTAxes, 'on')

AllLeftMT = [];
AllRightMT = [];
AllLeftMTAbsResidual = [];
AllRightMTAbsResidual = [];

set(LRVevaiometricMTAxes,...
    'FontSize', 10,...
    'XLim', [0 1],...
    'YLim', [0 0.5])
title(LRVevaiometricMTAxes, 'LRVevaiometric MT');

% Vevaiometric MT Log z-score (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
% use log normal
% NOT USE AS NOT NORMAL DISTRIBUTION
LRVevaiometricMTLogZScoreAxes = axes(AnalysisFigure, 'Position', [0.83    0.25    0.15    0.19]);
hold(LRVevaiometricMTLogZScoreAxes, 'on')

AllLeftMTLogZScore = [];
AllRightMTLogZScore = [];

set(LRVevaiometricMTLogZScoreAxes,...
    'FontSize', 10,...
    'XLim', [0, 1],...
    'YLim', [-4, 4])
xlabel(LRVevaiometricMTLogZScoreAxes, 'abs(Residuals)');

% TI distribution per left-right and explore/exploit
MTDistributionAxes = axes(AnalysisFigure, 'Position', [0.72    0.48    0.09    0.19]);
hold(MTDistributionAxes, 'on')

set(MTDistributionAxes,...
    'TickDir', 'out',...
    'XLim', [-0.5, 1.5],...
    'XTick', [0 1],...
    'XTickLabel', {},...
    'YLim', [0, 0.5],...
    'FontSize', 10);
xlabel(MTDistributionAxes, '')
title(MTDistributionAxes, 'MT Distribution');

% log(MT)-ZScore distribution per left-right and explore/exploit
% use log normal
% NOT USE AS NOT NORMAL DISTRIBUTION
MTLogZScoreDistributionAxes = axes(AnalysisFigure, 'Position', [0.72    0.25    0.09    0.19]);
hold(MTLogZScoreDistributionAxes, 'on')

set(MTLogZScoreDistributionAxes,...
    'TickDir', 'out',...
    'XLim', [-0.5, 1.5],...
    'XTick', [0 1],...
    'XTickLabel', {'Left', 'Right'},...
    'YLim', [-4, 4],...
    'FontSize', 10);
xlabel(MTLogZScoreDistributionAxes, '')
title(MTLogZScoreDistributionAxes, '');

% Value-TI GLM Coeff.
ValueTIGLMAxes = axes(AnalysisFigure, 'Position', [0.56, 0.78, 0.10, 0.16]);
hold(ValueTIGLMAxes, 'on')

AllTI = [];

AllTIChosenLogOdds = [];

set(ValueTIGLMAxes,...
    'TickDir', 'out',...
    'XLim', [0, 3],...
    'XTick', [1, 2],...
    'XTickLabel', {'\beta_0', 'Q_{chosen}'},...
    'XTickLabelRotation', 90,...
    'FontSize', 10);
ylabel(ValueTIGLMAxes, 'GLM Coeff.')
title(ValueTIGLMAxes, 'Value-TI');

% Value-sqrt(TI) z-score GLM Coeff.
ValueTISqrtZScoreGLMAxes = axes(AnalysisFigure, 'Position', [0.68, 0.78, 0.10, 0.16]);
hold(ValueTISqrtZScoreGLMAxes, 'on')

AllTISqrtZScore = [];
AllTIRewardRate = [];

set(ValueTISqrtZScoreGLMAxes,...
    'TickDir', 'out',...
    'XLim', [0, 3],...
    'XTick', [1, 2],...
    'XTickLabel', {'\beta_0', 'Q_{chosen}'},...
    'XTickLabelRotation', 90,...
    'FontSize', 10);
% ylabel(ValueTISqrtZScoreGLMAxes, 'GLM Coeff.')
title(ValueTISqrtZScoreGLMAxes, 'Value-sqrt(TI) (z)');

disp('YOu aRE a bEAutIFul HUmaN BeiNG, saID anTOniO.')

%% Plotting
for iSession = 1:length(DataHolder)
    % Import SessionData
    SessionData = DataHolder{iSession};
    SessionDateLabel = [SessionDateLabel, string(datestr(datetime(SessionData.Info.SessionDate), 'YYYYmmDD(ddd)'))];
    
    nTrials = SessionData.nTrials;
    if nTrials < 200
        disp(['Session ', num2str(iSession), ' has nTrial < 200. Impossible for analysis.'])
        continue
    end
    idxTrial = 1:nTrials;

    ChoiceLeft = SessionData.Custom.TrialData.ChoiceLeft(1:nTrials);
    Baited = SessionData.Custom.TrialData.Baited(:, 1:nTrials);
    IncorrectChoice = SessionData.Custom.TrialData.IncorrectChoice(1:nTrials);
    NoDecision = SessionData.Custom.TrialData.NoDecision(1:nTrials);
    NoTrialStart = SessionData.Custom.TrialData.NoTrialStart(1:nTrials);
    BrokeFixation = SessionData.Custom.TrialData.BrokeFixation(1:nTrials);
    EarlyWithdrawal = SessionData.Custom.TrialData.EarlyWithdrawal(1:nTrials);
    StartNewTrial = SessionData.Custom.TrialData.StartNewTrial(1:nTrials);
    SkippedFeedback = SessionData.Custom.TrialData.SkippedFeedback(1:nTrials);
    Rewarded = SessionData.Custom.TrialData.Rewarded(1:nTrials);
    
    SampleTime = SessionData.Custom.TrialData.SampleTime(1:nTrials);
    MoveTime = SessionData.Custom.TrialData.MoveTime(1:nTrials);
    FeedbackWaitingTime = SessionData.Custom.TrialData.FeedbackWaitingTime(1:nTrials);
    % FeedbackDelay = SessionData.Custom.TrialData.FeedbackDelay(1:nTrials);
    % FeedbackWaitingTime = rand(nTrials,1)*10; %delete this
    % FeedbackWaitingTime = FeedbackWaitingTime';  %delete this
    % FeedbackDelay = rand(nTrials,1)*10; %delete this
    % FeedbackDelay= FeedbackDelay'; 
    
    RewardProb = SessionData.Custom.TrialData.RewardProb(:, 1:nTrials);
    RewardProbCategories = unique(RewardProb);
    
    LightLeft = SessionData.Custom.TrialData.LightLeft(1:nTrials);
    LightLeftRight = [LightLeft; 1-LightLeft];
    TrialRewardProb = sum(RewardProb .* LightLeftRight, 1);
    
    ChoiceLeftRight = [ChoiceLeft; 1-ChoiceLeft]; 
    ChoiceRewardProb = sum(RewardProb .* ChoiceLeftRight, 1);
    
    BlockNumber = SessionData.Custom.TrialData.BlockNumber(:, 1:nTrials);
    BlockTrialNumber = SessionData.Custom.TrialData.BlockTrialNumber(:, 1:nTrials);
    
    % for files before April 2023, no DrinkingTime is available
    try
        DrinkingTime = SessionData.Custom.TrialData.DrinkingTime(1:nTrials);
    catch
        DrinkingTime = nan(1, nTrials);
    end
    
    LeftFeedbackDelayGraceTime = [];
    RightFeedbackDelayGraceTime = [];
    FirstDrinkingTime = [];
    LatestRewardTimestamp = [];
    for iTrial = 1:nTrials
        if ChoiceLeft(iTrial) == 1
            LeftFeedbackDelayGraceTime = [LeftFeedbackDelayGraceTime;...
                                          SessionData.RawEvents.Trial{iTrial}.States.LInGrace(:,2) -...
                                          SessionData.RawEvents.Trial{iTrial}.States.LInGrace(:,1)];
        elseif ChoiceLeft(iTrial) == 0
            RightFeedbackDelayGraceTime = [RightFeedbackDelayGraceTime;...
                                           SessionData.RawEvents.Trial{iTrial}.States.RInGrace(:,2) -...
                                           SessionData.RawEvents.Trial{iTrial}.States.RInGrace(:,1)];
        end
        
        FirstDrinkingTime = [FirstDrinkingTime SessionData.RawEvents.Trial{iTrial}.States.Drinking(1,1)];
        if iTrial == 1
            LatestRewardTimestamp(iTrial) = 0;
        elseif isnan(SessionData.RawEvents.Trial{iTrial-1}.States.Drinking(1,1))
            LatestRewardTimestamp(iTrial) = LatestRewardTimestamp(iTrial-1);
        else
            LatestRewardTimestamp(iTrial) = SessionData.RawEvents.Trial{iTrial-1}.States.Drinking(1,1) + SessionData.TrialStartTimestamp(iTrial-1);
        end
    end
    LatestRewardTime = SessionData.TrialStartTimestamp - LatestRewardTimestamp;
    
    LeftFeedbackDelayGraceTime = LeftFeedbackDelayGraceTime(~isnan(LeftFeedbackDelayGraceTime))';
    LeftFeedbackDelayGraceTime = LeftFeedbackDelayGraceTime(LeftFeedbackDelayGraceTime < SessionData.SettingsFile.GUI.FeedbackDelayGrace - 0.0001);
    RightFeedbackDelayGraceTime = RightFeedbackDelayGraceTime(~isnan(RightFeedbackDelayGraceTime))';
    RightFeedbackDelayGraceTime = RightFeedbackDelayGraceTime(RightFeedbackDelayGraceTime < SessionData.SettingsFile.GUI.FeedbackDelayGrace - 0.0001);
    
    RewardMagnitude = SessionData.Custom.TrialData.RewardMagnitude(:, 1:nTrials);
    TrialStartTimeStamp = SessionData.TrialStartTimestamp;
    TrialEndTimeStamp = SessionData.TrialEndTimestamp;
    
    %% Analysis across sessions
    Model = Models{iSession};
    EstimatedParameters = Model.EstimatedParameters;
    MinNegLogDataLikelihood = Model.MinNegLogDataLikelihood;
    
    BiasMLEs(iSession) = EstimatedParameters(1);
    QCoeffMLEs(iSession) = EstimatedParameters(2);
    Minus1ChoiceMLEs(iSession) = EstimatedParameters(3);
    Minus1RewardMLEs(iSession) = EstimatedParameters(4);
    Minus2ChoiceMLEs(iSession) = EstimatedParameters(5);
    Minus2RewardMLEs(iSession) = EstimatedParameters(6);
    
    MLEEstimates = [BiasMLEs(iSession), QCoeffMLEs(iSession), Minus1ChoiceMLEs(iSession),...
                    Minus1RewardMLEs(iSession), Minus2ChoiceMLEs(iSession), Minus2RewardMLEs(iSession)];
    
    [NegLogDataLikelihood, Values] = ChoiceRegressionQ(MLEEstimates, nTrials, ChoiceLeft, Rewarded);
    LogOdds = Values.ChoiceLeftLogOdds;
    
    PredictedLeftChoiceProb = 1 ./ (1 + exp(-LogOdds));

    PredictedChoice = double(PredictedLeftChoiceProb>=0.5);
    PredictedChoice(isnan(ChoiceLeft)) = nan;
    
    Explore = abs(ChoiceLeft - PredictedLeftChoiceProb) >= 0.5;
    Exploit = abs(ChoiceLeft - PredictedLeftChoiceProb) < 0.5;
    
    AbsModelResiduals = abs(ChoiceLeft - PredictedLeftChoiceProb);

    AllPredictedProb = [AllPredictedProb, PredictedLeftChoiceProb];
    AllLogOdds = [AllLogOdds, LogOdds];
    AllChoiceLeft = [AllChoiceLeft, ChoiceLeft];

    % Psychometric
    ValidTrial = ~isnan(ChoiceLeft); % and EarlyWithdrawal is always 0
    ValidLogOdds = LogOdds(ValidTrial);
    ValidChoice = ChoiceLeft(ValidTrial)';
    
    Bin = linspace(-5, 5, 11);
    [XData, YData, Error] = BinData(ValidLogOdds, ValidChoice, Bin);
    ValidData = ~isnan(XData) & ~isnan(YData) & ~isnan(Error);
    
    ChoicePsychometricLine{iSession} = line(PsychometricAxes,...
                                            'xdata', XData(ValidData),...
                                            'ydata', YData(ValidData) * 100,...
                                            'LineStyle', '-',...
                                            'LineWidth', 0.5,...
                                            'Color', ColourPalette.Session);
    
    % Posterior mode (i.e. MAP, maximum a posteriori) estimate of ChoiceSymmetricQ
    %{
    only when all session combined, unless one wants to know if some
    parameters are correlated
    %}
    
    % Vevaiometric
    NotBaited = any(~Baited .* ChoiceLeftRight, 1) & (IncorrectChoice ~= 1);
    
    ExploringTITrial = NotBaited & Explore;
    ExploitingTITrial = NotBaited & Exploit;
    ExploringTI = FeedbackWaitingTime(ExploringTITrial);
    ExploitingTI = FeedbackWaitingTime(ExploitingTITrial);
    
    ExploringLogOdds = LogOdds(ExploringTITrial);
    ExploitingLogOdds = LogOdds(ExploitingTITrial);
    
    AllExploringTI = [AllExploringTI, ExploringTI];
    AllExploitingTI = [AllExploitingTI, ExploitingTI];
    
    AllExploringLogOdds = [AllExploringLogOdds, ExploringLogOdds];
    AllExploitingLogOdds = [AllExploitingLogOdds, ExploitingLogOdds];
    
    % ExploringTrialTIScatter{iSession} = scatter(VevaiometricAxes, ExploringLogOdds, ExploringTI,...
    %                                             'Marker', '.',...
    %                                             'MarkerEdgeColor', carrot,...
    %                                             'SizeData', 1);
    % 
    % ExploitingTrialTIScatter{iSession} = scatter(VevaiometricAxes, ExploitingLogOdds, ExploitingTI,...
    %                                              'Marker', '.',...
    %                                              'MarkerEdgeColor', violet,...
    %                                              'SizeData', 1);
    
    [ExploreLineXData, ExploreLineYData] = Binvevaio(ExploringLogOdds, ExploringTI, 10);
    [ExploitLineXData, ExploitLineYData] = Binvevaio(ExploitingLogOdds, ExploitingTI, 10);
    
    ExploreLine{iSession} = line(VevaiometricAxes,...
                                 'XData', ExploreLineXData,...
                                 'YData', ExploreLineYData,...
                                 'LineStyle', '-',...
                                 'Color', 1-ColourPalette.Session./ 2);
    
    ExploitLine{iSession} = line(VevaiometricAxes,...
                                 'XData', ExploitLineXData,...
                                 'YData', ExploitLineYData,...
                                 'LineStyle', '-',...
                                 'Color', ColourPalette.Session);
    
    % Vevaiometric (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
    LeftTITrial = NotBaited & ChoiceLeft==1;
    RightTITrial = NotBaited & ChoiceLeft==0;
    LeftTI = FeedbackWaitingTime(LeftTITrial);
    RightTI = FeedbackWaitingTime(RightTITrial);
    
    LeftAbsResidual = AbsModelResiduals(LeftTITrial);
    RightAbsResidual = AbsModelResiduals(RightTITrial);
    
    AllLeftTI = [AllLeftTI, LeftTI];
    AllRightTI = [AllRightTI, RightTI];
    AllLeftAbsResidual = [AllLeftAbsResidual, LeftAbsResidual];
    AllRightAbsResidual = [AllRightAbsResidual, RightAbsResidual];
    
    %{
    [LeftTILineXData, LeftTILineYData] = Binvevaio(LeftAbsResidual, LeftTI, 10);
    [RightTILineXData, RightTILineYData] = Binvevaio(RightAbsResidual, RightTI, 10);
        
    LeftTILine{iSession} = line(LRVevaiometricAxes,...
                                'XData', LeftTILineXData,...
                                'YData', LeftTILineYData,...
                                'LineStyle', '-',...
                                'Color', 1-SessionColor ./ 2);
    
    RightTILine{iSession} = line(LRVevaiometricAxes,...
                                 'XData', RightTILineXData,...
                                 'YData', RightTILineYData,...
                                 'LineStyle', '-',...
                                 'Color', SessionColor);
    %}
    
    % Vevaiometric z-score (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
    [LeftTISqrtZScore, LeftTIMu, LeftTISigma] = zscore(sqrt(LeftTI));
    [RightTISqrtZScore, RightTIMu, RightTISigma] = zscore(sqrt(RightTI));
    
    AllLeftTISqrtZScore = [AllLeftTISqrtZScore, LeftTISqrtZScore];
    AllRightTISqrtZScore = [AllRightTISqrtZScore, RightTISqrtZScore];

    %{
    [LeftTIZScoreLineXData, LeftTIZScoreLineYData] = Binvevaio(LeftAbsResidual, LeftTIZScore, 10);
    [RightTIZScoreLineXData, RightTIZScoreLineYData] = Binvevaio(RightAbsResidual, RightTIZScore, 10);
    
    LeftTIZScoreLine{iSession} = line(LRVevaiometricZScoreAxes,...
                                      'XData', LeftTIZScoreLineXData,...
                                      'YData', LeftTIZScoreLineYData,...
                                      'LineStyle', '-',...
                                      'Color', 1-SessionColor ./ 2);
    
    RightTIZScoreLine{iSession} = line(LRVevaiometricZScoreAxes,...
                                       'XData', RightTIZScoreLineXData,...
                                       'YData', RightTIZScoreLineYData,...
                                       'LineStyle', '-',...
                                       'Color', SessionColor);
    %}
    
    % Vevaiometric z-score
    % have to calculate last as it needs the z-score info from
    % Left/Right-TI
    ExploringMu = (NotBaited & Explore & ChoiceLeft==1) * LeftTIMu +...
                  (NotBaited & Explore & ChoiceLeft==0) * RightTIMu;
    ExploringMu = ExploringMu(ExploringTITrial);

    ExploringSigma = (NotBaited & Explore & ChoiceLeft==1) * LeftTISigma +...
                     (NotBaited & Explore & ChoiceLeft==0) * RightTISigma;
    ExploringSigma = ExploringSigma(ExploringTITrial);

    ExploitingMu = (NotBaited & Exploit & ChoiceLeft==1) * LeftTIMu +...
                   (NotBaited & Exploit & ChoiceLeft==0) * RightTIMu;
    ExploitingMu = ExploitingMu(ExploitingTITrial);

    ExploitingSigma = (NotBaited & Exploit & ChoiceLeft==1) * LeftTISigma +...
                      (NotBaited & Exploit & ChoiceLeft==0) * RightTISigma;
    ExploitingSigma = ExploitingSigma(ExploitingTITrial);
    
    ExploringTISqrtZScore = (sqrt(ExploringTI) - ExploringMu) ./ ExploringSigma;
    ExploitingTISqrtZScore = (sqrt(ExploitingTI) - ExploitingMu) ./ ExploitingSigma;
    
    AllExploringTISqrtZScore = [AllExploringTISqrtZScore, ExploringTISqrtZScore];
    AllExploitingTISqrtZScore = [AllExploitingTISqrtZScore, ExploitingTISqrtZScore];

    % ExploringTrialTIZScoreScatter{iSession} = scatter(VevaiometricZScoreAxes, ExploringLogOdds, ExploringTIZScore,...
    %                                                   'Marker', '.',...
    %                                                   'MarkerEdgeColor', carrot,...
    %                                                   'SizeData', 1);
    % 
    % ExploitingTrialTIZScoreScatter{iSession} = scatter(VevaiometricZScoreAxes, ExploitingLogOdds, ExploitingTIZScore,...
    %                                                    'Marker', '.',...
    %                                                    'MarkerEdgeColor', violet,...
    %                                                    'SizeData', 1);

    [ExploreSqrtZScoreLineXData, ExploreSqrtZScoreLineYData] = Binvevaio(ExploringLogOdds, ExploringTISqrtZScore, 10);
    [ExploitSqrtZScoreLineXData, ExploitSqrtZScoreLineYData] = Binvevaio(ExploitingLogOdds, ExploitingTISqrtZScore, 10);
    
    ExploreSqrtZScoreLine{iSession} = line(VevaiometricSqrtZScoreAxes,...
                                           'XData', ExploreSqrtZScoreLineXData,...
                                           'YData', ExploreSqrtZScoreLineYData,...
                                           'LineStyle', '-',...
                                           'Color', 1-ColourPalette.Session./ 2);
    
    ExploitSqrtZScoreLine{iSession} = line(VevaiometricSqrtZScoreAxes,...
                                           'XData', ExploitSqrtZScoreLineXData,...
                                           'YData', ExploitSqrtZScoreLineYData,...
                                           'LineStyle', '-',...
                                           'Color', ColourPalette.Session);
    
    %% Explore/exploit level around block switch
    RewardedMagnitude = sum(RewardMagnitude .* ChoiceLeftRight) .* Rewarded;
    RewardedMagnitude(isnan(RewardedMagnitude)) = 0;

    TrialStartTimestamp = SessionData.TrialStartTimestamp(:, 1:nTrials) - SessionData.TrialStartTimestamp(1);
    TrialTimeDuration = [0 diff(TrialStartTimestamp)];

    RewardedHistory = 0;
    for iTrial = 1:nTrials-1
        RewardedHistory(iTrial+1) = RewardedHistory(iTrial) * exp(-TrialTimeDuration(iTrial + 1)/40) +...
                                    RewardedMagnitude(iTrial);
    end
    
    % Block 1 transition (1st -> 2nd)
    BlockTransitionIdx = find(BlockTrialNumber == 1 & BlockNumber == 2);
    Block1To2Explore(iSession, :) = AbsModelResiduals(BlockTransitionIdx - 15:BlockTransitionIdx + 50) >= 0.5;
    Block1To2AbsRes(iSession, :) = AbsModelResiduals(BlockTransitionIdx - 15:BlockTransitionIdx + 50);
    Block1To2RewRate(iSession, :) = RewardedHistory(BlockTransitionIdx - 15:BlockTransitionIdx + 50);
    
    % Block 2 transition (2nd -> 3rd)
    BlockTransitionIdx = find(BlockTrialNumber == 1 & BlockNumber == 3);
    if ~isempty(BlockTransitionIdx) & BlockTransitionIdx + 50 <= nTrials
        Block2To3Explore(iSession, :) = AbsModelResiduals(BlockTransitionIdx - 15:BlockTransitionIdx + 50) >= 0.5;
        Block2To3AbsRes(iSession, :) = AbsModelResiduals(BlockTransitionIdx - 15:BlockTransitionIdx + 50);
        Block2To3RewRate(iSession, :) = RewardedHistory(BlockTransitionIdx - 15:BlockTransitionIdx + 50);
    end
    
    % Block 3 transition (3rd -> 4th)
    BlockTransitionIdx = find(BlockTrialNumber == 1 & BlockNumber == 4);
    if ~isempty(BlockTransitionIdx) & BlockTransitionIdx + 50 <= nTrials
        Block3To4Explore(iSession, :) = AbsModelResiduals(BlockTransitionIdx - 15:BlockTransitionIdx + 50) >= 0.5;
        Block3To4AbsRes(iSession, :) = AbsModelResiduals(BlockTransitionIdx - 15:BlockTransitionIdx + 50);
        Block3To4RewRate(iSession, :) = RewardedHistory(BlockTransitionIdx - 15:BlockTransitionIdx + 50);
    end

    % Block 4 transition (4th -> 5th)
    BlockTransitionIdx = find(BlockTrialNumber == 1 & BlockNumber == 5);
    if ~isempty(BlockTransitionIdx) & BlockTransitionIdx + 50 <= nTrials
        Block4To5Explore(iSession, :) = AbsModelResiduals(BlockTransitionIdx - 15:BlockTransitionIdx + 50) >= 0.5;
        Block4To5AbsRes(iSession, :) = AbsModelResiduals(BlockTransitionIdx - 15:BlockTransitionIdx + 50);
        Block4To5RewRate(iSession, :) = RewardedHistory(BlockTransitionIdx - 15:BlockTransitionIdx + 50);
    end

    % Explore/exploit level against reward rate
    AllAbsResidual = [AllAbsResidual, AbsModelResiduals];
    AllRewardRate = [AllRewardRate, RewardedHistory];
    
    AllLeftTIRewardRate = [AllLeftTIRewardRate, RewardedHistory(LeftTITrial)];
    AllRightTIRewardRate = [AllRightTIRewardRate, RewardedHistory(RightTITrial)];
    
    %% Move time
    % Vevaiometric MT
    ExploringMT = MoveTime(Explore & ~isnan(ChoiceLeft));
    ExploitingMT = MoveTime(Exploit & ~isnan(ChoiceLeft));
    
    ExploringMTLogOdds = LogOdds(Explore & ~isnan(ChoiceLeft));
    ExploitingMTLogOdds = LogOdds(Exploit & ~isnan(ChoiceLeft));
    
    AllExploringMT = [AllExploringMT, ExploringMT];
    AllExploitingMT = [AllExploitingMT, ExploitingMT];
    
    AllExploringMTLogOdds = [AllExploringMTLogOdds, ExploringMTLogOdds];
    AllExploitingMTLogOdds = [AllExploitingMTLogOdds, ExploitingMTLogOdds];
    
    [ExploreLineXData, ExploreLineYData] = Binvevaio(ExploringMTLogOdds, ExploringMT, 10);
    [ExploitLineXData, ExploitLineYData] = Binvevaio(ExploitingMTLogOdds, ExploitingMT, 10);
    
    ExploreMTLine{iSession} = line(VevaiometricMTAxes,...
                                   'XData', ExploreLineXData,...
                                   'YData', ExploreLineYData,...
                                   'LineStyle', '-',...
                                   'Color', 1-ColourPalette.Session./ 2);
    
    ExploitMTLine{iSession} = line(VevaiometricMTAxes,...
                                   'XData', ExploitLineXData,...
                                   'YData', ExploitLineYData,...
                                   'LineStyle', '-',...
                                   'Color', ColourPalette.Session);
    
    % Vevaiometric MT (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
    LeftMT = MoveTime(ChoiceLeft==1);
    RightMT = MoveTime(ChoiceLeft==0);
    
    LeftMTAbsResidual = AbsModelResiduals(ChoiceLeft==1);
    RightMTAbsResidual = AbsModelResiduals(ChoiceLeft==0);
    
    AllLeftMT = [AllLeftMT, LeftMT];
    AllRightMT = [AllRightMT, RightMT];
    AllLeftMTAbsResidual = [AllLeftMTAbsResidual, LeftMTAbsResidual];
    AllRightMTAbsResidual = [AllRightMTAbsResidual, RightMTAbsResidual];
    
    % Vevaiometric MT z-score (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
    % log normal
    % NOT USE AS NOT NORMAL DISTRIBUTION
    EstimatedParameters = mle(LeftMT, 'Distribution', 'LogNormal');
    LeftMTLogMu = EstimatedParameters(1);
    LeftMTLogSigma = EstimatedParameters(2);

    EstimatedParameters = mle(RightMT, 'Distribution', 'LogNormal');
    RightMTLogMu = EstimatedParameters(1);
    RightMTLogSigma = EstimatedParameters(2);

    LeftMTLogZScore = (log(LeftMT) - LeftMTLogMu) ./ LeftMTLogSigma;
    RightMTLogZScore = (log(RightMT) - RightMTLogMu) ./ RightMTLogSigma;
    
    AllLeftMTLogZScore = [AllLeftMTLogZScore, LeftMTLogZScore];
    AllRightMTLogZScore = [AllRightMTLogZScore, RightMTLogZScore];
    
    % Vevaiometric MT z-score
    % have to calculate last as it needs the z-score info from
    % Left/Right-MT
    ExploringMu = (~Exploit & ChoiceLeft==1) * LeftMTLogMu +...
                  (~Exploit & ChoiceLeft==0) * RightMTLogMu;
    ExploringMu = ExploringMu(~Exploit & ~isnan(ChoiceLeft));
    
    ExploringSigma = (~Exploit & ChoiceLeft==1) * LeftMTLogSigma +...
                     (~Exploit & ChoiceLeft==0) * RightMTLogSigma;
    ExploringSigma = ExploringSigma(~Exploit & ~isnan(ChoiceLeft));
    
    ExploitingMu = (Exploit & ChoiceLeft==1) * LeftMTLogMu +...
                   (Exploit & ChoiceLeft==0) * RightMTLogMu;
    ExploitingMu = ExploitingMu(Exploit & ~isnan(ChoiceLeft));
    
    ExploitingSigma = (Exploit & ChoiceLeft==1) * LeftMTLogSigma +...
                      (Exploit & ChoiceLeft==0) * RightMTLogSigma;
    ExploitingSigma = ExploitingSigma(Exploit & ~isnan(ChoiceLeft));
    
    ExploringMTLogZScore = (log(ExploringMT) - ExploringMu) ./ ExploringSigma;
    ExploitingMTLogZScore = (log(ExploitingMT) - ExploitingMu) ./ ExploitingSigma;
    
    AllExploringMTLogZScore = [AllExploringMTLogZScore, ExploringMTLogZScore];
    AllExploitingMTLogZScore = [AllExploitingMTLogZScore, ExploitingMTLogZScore];
    
    [ExploreLogZScoreLineXData, ExploreLogZScoreLineYData] = Binvevaio(ExploringMTLogOdds, ExploringMTLogZScore, 10);
    [ExploitLogZScoreLineXData, ExploitLogZScoreLineYData] = Binvevaio(ExploitingMTLogOdds, ExploitingMTLogZScore, 10);
    
    ExploreMTLogZScoreLine{iSession} = line(VevaiometricMTLogZScoreAxes,...
                                            'XData', ExploreLogZScoreLineXData,...
                                            'YData', ExploreLogZScoreLineYData,...
                                            'LineStyle', '-',...
                                            'Color', 1-ColourPalette.Session ./ 2);
    
    ExploitMTLogZScoreLine{iSession} = line(VevaiometricMTLogZScoreAxes,...
                                            'XData', ExploitLogZScoreLineXData,...
                                            'YData', ExploitLogZScoreLineYData,...
                                            'LineStyle', '-',...
                                            'Color', ColourPalette.Session);
    
    % Value-TI GLM Coeff. & sqrt(TI) (z)
    ChosenLogOdds = LogOdds .* ChoiceLeft - LogOdds .* (1 - ChoiceLeft);
    FeedbackWaitingTimeSqrtZScore = sum(((sqrt([FeedbackWaitingTime; FeedbackWaitingTime]) - [LeftTIMu; RightTIMu]) ./ [LeftTISigma; RightTISigma]) .* ChoiceLeftRight, 1);
    
    AllTI = [AllTI, FeedbackWaitingTime(NotBaited)];
    AllTISqrtZScore = [AllTISqrtZScore, FeedbackWaitingTimeSqrtZScore(NotBaited)];
    
    AllTIRewardRate = [AllTIRewardRate, RewardedHistory(NotBaited)];
    AllTIChosenLogOdds = [AllTIChosenLogOdds, ChosenLogOdds(NotBaited)];
    
end

%% Average across sessions
% Psychometric
ValidTrial = ~isnan(AllChoiceLeft); % and EarlyWithdrawal is always 0
ValidLogOdds = AllLogOdds(ValidTrial);
ValidChoice = AllChoiceLeft(ValidTrial)';

Bin = linspace(-5, 5, 11);
[XData, YData, Error] = BinData(ValidLogOdds, ValidChoice, Bin);
ValidData = ~isnan(XData) & ~isnan(YData) & ~isnan(Error);

ChoicePsychometricLine{iSession + 1} = line(PsychometricAxes,...
                                            'xdata', XData(ValidData),...
                                            'ydata', YData(ValidData) * 100,...
                                            'LineStyle', '-',...
                                            'LineWidth', 0.5,...
                                            'Color', ColourPalette.Pooled);

PsychometricGLM = fitglm(XData, YData, 'Distribution', 'binomial');
XRange = XData(end) - XData(1);

YData = predict(PsychometricGLM, XData) * 100;
YRange = YData(end) - YData(1);

Slope = (YData(6) - YData(4)) ./ (XData(6) - XData(4));

Text = sprintf('XRange = %4.2f\nYRange = %4.1f%%\nSlope = %4.1f', XRange, YRange, Slope);
RewardCoeffText = text(PsychometricAxes, -5, 85,...
                       Text,...
                       'FontSize', 8);

% Posterior mode (i.e. MAP, maximum a posteriori) estimate of ChoiceSymmetricQ
XData = zeros(size(BiasMLEs));
BiasSwarmchart = swarmchart(BiasMLEAxes,...
                            XData,...
                            BiasMLEs,...
                            'Marker', '.',...
                            'MarkerEdgeColor', ColourPalette.Session,...
                            'XJitter', 'density',...
                            'XJitterWidth', 1);

BiasBoxchart = boxchart(BiasMLEAxes, XData, BiasMLEs);
set(BiasBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

XData = zeros(size(QCoeffMLEs));
QCoeffSwarmchart = swarmchart(QCoeffMLEAxes,...
                              XData,...
                              QCoeffMLEs,...
                              'Marker', '.',...
                              'MarkerEdgeColor', ColourPalette.Session,...
                              'XJitter', 'density',...
                              'XJitterWidth', 1);

QCoeffBoxchart = boxchart(QCoeffMLEAxes, XData, QCoeffMLEs);
set(QCoeffBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

XData = zeros(size(Minus1ChoiceMLEs));
Minus1ChoiceSwarmchart = swarmchart(Minus1ChoiceMLEAxes,...
                                    XData,...
                                    Minus1ChoiceMLEs,...
                                    'Marker', '.',...
                                    'MarkerEdgeColor', ColourPalette.Session,...
                                    'XJitter', 'density',...
                                    'XJitterWidth', 1);

Minus1ChoiceBoxchart = boxchart(Minus1ChoiceMLEAxes, XData, Minus1ChoiceMLEs);
set(Minus1ChoiceBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

XData = zeros(size(Minus1RewardMLEs));
Minus1RewardSwarmchart = swarmchart(Minus1RewardMLEAxes,...
                                    XData,...
                                    Minus1RewardMLEs,...
                                    'Marker', '.',...
                                    'MarkerEdgeColor', ColourPalette.Session,...
                                    'XJitter', 'density',...
                                    'XJitterWidth', 1);

Minus1RewardBoxchart = boxchart(Minus1RewardMLEAxes, XData, Minus1RewardMLEs);
set(Minus1RewardBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

XData = zeros(size(Minus2ChoiceMLEs));
Minus2ChoiceSwarmchart = swarmchart(Minus2ChoiceMLEAxes,...
                                    XData,...
                                    Minus2ChoiceMLEs,...
                                    'Marker', '.',...
                                    'MarkerEdgeColor', ColourPalette.Session,...
                                    'XJitter', 'density',...
                                    'XJitterWidth', 1);

Minus2ChoiceBoxchart = boxchart(Minus2ChoiceMLEAxes, XData, Minus2ChoiceMLEs);
set(Minus2ChoiceBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

XData = zeros(size(Minus2RewardMLEs));
Minus2RewardSwarmchart = swarmchart(Minus2RewardMLEAxes,...
                                    XData,...
                                    Minus2RewardMLEs,...
                                    'Marker', '.',...
                                    'MarkerEdgeColor', ColourPalette.Session,...
                                    'XJitter', 'density',...
                                    'XJitterWidth', 1);

Minus2RewardBoxchart = boxchart(Minus2RewardMLEAxes, XData, Minus2RewardMLEs);
set(Minus2RewardBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

% Vevaiometric
[ExploreLineXData, ExploreLineYData] = Binvevaio(AllExploringLogOdds, AllExploringTI, 10);
[ExploitLineXData, ExploitLineYData] = Binvevaio(AllExploitingLogOdds, AllExploitingTI, 10);

ExploreLine{iSession + 1} = line(VevaiometricAxes,...
                                 'XData', ExploreLineXData,...
                                 'YData', ExploreLineYData,...
                                 'LineStyle', '-',...
                                 'LineWidth', 2,...
                                 'Color', ColourPalette.Explore);

ExploitLine{iSession + 1} = line(VevaiometricAxes,...
                                 'XData', ExploitLineXData,...
                                 'YData', ExploitLineYData,...
                                 'LineStyle', '-',...
                                 'LineWidth', 2,...
                                 'Color', ColourPalette.Exploit);

% Vevaiometric z-score
[ExploreSqrtZScoreLineXData, ExploreSqrtZScoreLineYData] = Binvevaio(AllExploringLogOdds, AllExploringTISqrtZScore, 10);
[ExploitSqrtZScoreLineXData, ExploitSqrtZScoreLineYData] = Binvevaio(AllExploitingLogOdds, AllExploitingTISqrtZScore, 10);

ExploreSqrtZScoreLine{iSession + 1} = line(VevaiometricSqrtZScoreAxes,...
                                       'XData', ExploreSqrtZScoreLineXData,...
                                       'YData', ExploreSqrtZScoreLineYData,...
                                       'LineStyle', '-',...
                                       'LineWidth', 2,...
                                       'Color', ColourPalette.Explore);

ExploitSqrtZScoreLine{iSession + 1} = line(VevaiometricSqrtZScoreAxes,...
                                       'XData', ExploitSqrtZScoreLineXData,...
                                       'YData', ExploitSqrtZScoreLineYData,...
                                       'LineStyle', '-',...
                                       'LineWidth', 2,...
                                       'Color', ColourPalette.Exploit);

% Vevaiometric (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
LeftTIScatter = scatter(LRVevaiometricAxes,...
                        AllLeftAbsResidual,...
                        AllLeftTI);
set(LeftTIScatter,...
    'SizeData', 1,...
    'Marker', '.',...
    'CData', ColourPalette.Left);

RightTIScatter = scatter(LRVevaiometricAxes,...
                         AllRightAbsResidual,...
                         AllRightTI);
set(RightTIScatter,...
    'SizeData', 1,...
    'Marker', '.',...
    'CData', ColourPalette.Right);

[LeftTILineXData, LeftTILineYData] = Binvevaio(AllLeftAbsResidual, AllLeftTI, 10);
[RightTILineXData, RightTILineYData] = Binvevaio(AllRightAbsResidual, AllRightTI, 10);

LefTILine = line(LRVevaiometricAxes,...
                 'XData', LeftTILineXData,...
                 'YData', LeftTILineYData,...
                 'LineStyle', '-',...
                 'LineWidth', 2,...
                 'Color', ColourPalette.Left);

RightTILine = line(LRVevaiometricAxes,...
                   'XData', RightTILineXData,...
                   'YData', RightTILineYData,...
                   'LineStyle', '-',...
                   'LineWidth', 2,...
                   'Color', ColourPalette.Right);

[LeftRValue, LeftpValue] = corrcoef(AllLeftAbsResidual, AllLeftTI);
[RightRValue, RightpValue] = corrcoef(AllRightAbsResidual, AllRightTI);

LeftTIStatsText = text(LRVevaiometricAxes, 0.3, 11,...
                       sprintf('Left: R = %5.3f, p = %5.3f',...
                               LeftRValue(1, 2),...
                               LeftpValue(1, 2)),...
                       'FontSize', 8,...
                       'Color', ColourPalette.Left);

RightTIStatsText = text(LRVevaiometricAxes, 0.3, 10,...
                        sprintf('Right: R = %5.3f, p = %5.3f',...
                                RightRValue(1, 2),...
                                RightpValue(1, 2)),...
                        'FontSize', 8,...
                        'Color', ColourPalette.Right);

% Vevaiometric z-score (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
LeftTIZScoreScatter = scatter(LRVevaiometricSqrtZScoreAxes,...
                              AllLeftAbsResidual,...
                              AllLeftTISqrtZScore);
set(LeftTIZScoreScatter,...
    'SizeData', 1,...
    'Marker', '.',...
    'CData', ColourPalette.Left);

RightTIZScoreScatter = scatter(LRVevaiometricSqrtZScoreAxes,...
                               AllRightAbsResidual,...
                               AllRightTISqrtZScore);
set(RightTIZScoreScatter,...
    'SizeData', 1,...
    'Marker', '.',...
    'CData', ColourPalette.Right);

[LeftTISqrtZScoreLineXData, LeftTISqrtZScoreLineYData] = Binvevaio(AllLeftAbsResidual, AllLeftTISqrtZScore, 10);
[RightTISqrtZScoreLineXData, RightTISqrtZScoreLineYData] = Binvevaio(AllRightAbsResidual, AllRightTISqrtZScore, 10);

LeftTISqrtZScoreLine{iSession + 1} = line(LRVevaiometricSqrtZScoreAxes,...
                                          'XData', LeftTISqrtZScoreLineXData,...
                                          'YData', LeftTISqrtZScoreLineYData,...
                                          'LineStyle', '-',...
                                          'LineWidth', 2,...
                                          'Color', ColourPalette.Left);

RightTISqrtZScoreLine{iSession + 1} = line(LRVevaiometricSqrtZScoreAxes,...
                                           'XData', RightTISqrtZScoreLineXData,...
                                           'YData', RightTISqrtZScoreLineYData,...
                                           'LineStyle', '-',...
                                           'LineWidth', 2,...
                                           'Color', ColourPalette.Right);

[LeftRValue, LeftpValue] = corrcoef(AllLeftAbsResidual, AllLeftTISqrtZScore);
[RightRValue, RightpValue] = corrcoef(AllRightAbsResidual, AllRightTISqrtZScore);

LeftTISqrtZScoreStatsText = text(LRVevaiometricSqrtZScoreAxes, 0.3, 1.8,...
                                 sprintf('Left: R = %5.3f, p = %5.3f',...
                                         LeftRValue(1, 2),...
                                         LeftpValue(1, 2)),...
                                 'FontSize', 8,...
                                 'Color', ColourPalette.Left);

RightTISqrtZScoreStatsText = text(LRVevaiometricSqrtZScoreAxes, 0.3, 1.5,...
                                  sprintf('Right: R = %5.3f, p = %5.3f',...
                                          RightRValue(1, 2),...
                                          RightpValue(1, 2)),...
                                  'FontSize', 8,...
                                  'Color', ColourPalette.Right);

%% Explore/exploit level around block switch
% Block 1 transition (1st -> 2nd)
Block1To2Explore = Block1To2Explore(1:iSession, :);
Block1To2ExploreMean = mean(Block1To2Explore, 'omitnan');
Block1To2ExploreLine = line(BlockTransitionAxes,...
                            'xdata', -15:50,...
                            'ydata', movmean(Block1To2ExploreMean, [5, 0]) * 100,...
                            'LineStyle', '-',...
                            'Marker', 'none',...
                            'Color', 0.0 * [1 1 1]);

% Block 2 transition (2nd -> 3rd)
Block2To3Explore = Block2To3Explore(1:iSession, :);
Block2To3ExploreMean = mean(Block2To3Explore, 'omitnan');
Block2To3ExploreLine = line(BlockTransitionAxes,...
                            'xdata', -15:50,...
                            'ydata', movmean(Block2To3ExploreMean, [5, 0]) * 100,...
                            'LineStyle', '-',...
                            'Marker', 'none',...
                            'Color', 0.2 * [1 1 1]);

% Block 3 transition (3rd -> 4th)
Block3To4Explore = Block3To4Explore(1:iSession, :);
Block3To4ExploreMean = mean(Block3To4Explore, 'omitnan');
Block3To4ExploreLine = line(BlockTransitionAxes,...
                            'xdata', -15:50,...
                            'ydata', movmean(Block3To4ExploreMean, [5, 0]) * 100,...
                            'LineStyle', '-',...
                            'Marker', 'none',...
                            'Color', 0.4 * [1 1 1]);

% Block 4 transition (4th -> 5th)
Block4To5Explore = Block4To5Explore(1:iSession, :);
Block4To5ExploreMean = mean(Block4To5Explore, 'omitnan');
Block4To5ExploreLine = line(BlockTransitionAxes,...
                            'xdata', -15:50,...
                            'ydata', movmean(Block4To5ExploreMean, [5, 0]) * 100,...
                            'LineStyle', '-',...
                            'Marker', 'none',...
                            'Color', 0.6 * [1 1 1]);

LegendString = {'1st -> 2nd', '2nd -> 3rd', '3rd -> 4th', '4th -> 5th'};
BlockTransitionLegend = legend(BlockTransitionAxes, LegendString,...
                               'Position', [0.22    0.07    0.09    0.08],...
                               'NumColumns', 1);

%% Abs(Residuals) around block switch
% Block 1 transition (1st -> 2nd)
Block1To2AbsRes = Block1To2AbsRes(1:iSession, :);
Block1To2AbsResMean = mean(Block1To2AbsRes, 'omitnan');

Block1To2AbsResLine = line(BlockTransitionAbsResAxes,...
                           'xdata', -15:50,...
                           'ydata', movmean(Block1To2AbsResMean, [5, 0]),...
                           'LineStyle', '-',...
                           'Marker', 'none',...
                           'Color', 0.0 * [1 1 1]);

% Block 2 transition (2nd -> 3rd)
Block2To3AbsRes = Block2To3AbsRes(1:iSession, :);
Block2To3AbsResMean = mean(Block2To3AbsRes, 'omitnan');

Block2To3AbsResLine = line(BlockTransitionAbsResAxes,...
                           'xdata', -15:50,...
                           'ydata', movmean(Block2To3AbsResMean, [5, 0]),...
                           'LineStyle', '-',...
                           'Marker', 'none',...
                           'Color', 0.2 * [1 1 1]);

% Block 3 transition (3rd -> 4th)
Block3To4AbsRes = Block3To4AbsRes(1:iSession, :);
Block3To4AbsResMean = mean(Block3To4AbsRes, 'omitnan');

Block3To4AbsResLine = line(BlockTransitionAbsResAxes,...
                           'xdata', -15:50,...
                           'ydata', movmean(Block3To4AbsResMean, [5, 0]),...
                           'LineStyle', '-',...
                           'Marker', 'none',...
                           'Color', 0.4 * [1 1 1]);

% Block 4 transition (4th -> 5th)
Block4To5AbsRes = Block4To5AbsRes(1:iSession, :);
Block4To5AbsResMean = mean(Block4To5AbsRes, 'omitnan');

Block4To5AbsResLine = line(BlockTransitionAbsResAxes,...
                           'xdata', -15:50,...
                           'ydata', movmean(Block4To5AbsResMean, [5, 0]),...
                           'LineStyle', '-',...
                           'Marker', 'none',...
                           'Color', 0.6 * [1 1 1]);

%% Reward Rate around block switch
% Block 1 transition (1st -> 2nd)
Block1To2RewRate = Block1To2RewRate(1:iSession, :);
Block1To2RewRateMean = mean(Block1To2RewRate, 'omitnan');

Block1To2RewRateLine = line(BlockTransitionRewRateAxes,...
                           'xdata', -15:50,...
                           'ydata', movmean(Block1To2RewRateMean, [5, 0]),...
                           'LineStyle', '-',...
                           'Marker', 'none',...
                           'Color', 0.0 * [1 1 1]);

% Block 2 transition (2nd -> 3rd)
Block2To3RewRate = Block2To3RewRate(1:iSession, :);
Block2To3RewRateMean = mean(Block2To3RewRate, 'omitnan');

Block2To3RewRateLine = line(BlockTransitionRewRateAxes,...
                           'xdata', -15:50,...
                           'ydata', movmean(Block2To3RewRateMean, [5, 0]),...
                           'LineStyle', '-',...
                           'Marker', 'none',...
                           'Color', 0.2 * [1 1 1]);

% Block 3 transition (3rd -> 4th)
Block3To4RewRate = Block3To4RewRate(1:iSession, :);
Block3To4RewRateMean = mean(Block3To4RewRate, 'omitnan');

Block3To4RewRateLine = line(BlockTransitionRewRateAxes,...
                           'xdata', -15:50,...
                           'ydata', movmean(Block3To4RewRateMean, [5, 0]),...
                           'LineStyle', '-',...
                           'Marker', 'none',...
                           'Color', 0.4 * [1 1 1]);

% Block 4 transition (4th -> 5th)
Block4To5RewRate = Block4To5RewRate(1:iSession, :);
Block4To5RewRateMean = mean(Block4To5RewRate, 'omitnan');

Block4To5RewRateLine = line(BlockTransitionRewRateAxes,...
                           'xdata', -15:50,...
                           'ydata', movmean(Block4To5RewRateMean, [5, 0]),...
                           'LineStyle', '-',...
                           'Marker', 'none',...
                           'Color', 0.6 * [1 1 1]);

% Explore/exploit level against reward rate
ValidData = ~isnan(AllAbsResidual)& ~isnan(AllRewardRate);
RewardRateScatter = scatter(RewardRateAxes, AllAbsResidual(ValidData), AllRewardRate(ValidData));

set(RewardRateScatter,...
    'Marker', '.',...
    'SizeData', 1,...
    'CData', 0.6 * [1, 1, 1]);

[RValue, pValue] = corrcoef(AllAbsResidual(ValidData), AllRewardRate(ValidData));
RewardRateStatText = text(RewardRateAxes, 0.3, 90,...
                          sprintf('R = %5.3f, p = %5.3f',...
                                  RValue(1, 2),...
                                  pValue(1, 2)),...
                          'FontSize', 8);

% TI distribution per left-right and explore/exploit
AllLeftExploitation = AllLeftAbsResidual < 0.5;
AllRightExploitation = AllRightAbsResidual < 0.5;

AllLeftExploitingTI = AllLeftTI(AllLeftExploitation == 1);
XData = zeros(size(AllLeftExploitingTI)) - 0.2;
LeftExploitingTISwarmchart = swarmchart(TIDistributionAxes,...
                                        XData,...
                                        AllLeftExploitingTI,...
                                        'Marker', '.',...
                                        'MarkerEdgeColor', ColourPalette.Exploit,...
                                        'XJitter', 'density',...
                                        'XJitterWidth', 0.2);

LeftExploitingBoxchart = boxchart(TIDistributionAxes, XData, AllLeftExploitingTI);
set(LeftExploitingBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'w',...
    'BoxFaceAlpha', 0,...
    'WhiskerLineColor', 'w',...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllLeftExploringTI = AllLeftTI(AllLeftExploitation == 0);
XData = zeros(size(AllLeftExploringTI)) + 0.2;
LeftExploringTISwarmchart = swarmchart(TIDistributionAxes,...
                                       XData,...
                                       AllLeftExploringTI,...
                                       'Marker', '.',...
                                       'MarkerEdgeColor', ColourPalette.Explore,...
                                       'XJitter', 'density',...
                                       'XJitterWidth', 0.2);

LeftExploringBoxchart = boxchart(TIDistributionAxes, XData, AllLeftExploringTI);
set(LeftExploringBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllRightExploitingTI = AllRightTI(AllRightExploitation == 1);
XData = ones(size(AllRightExploitingTI)) - 0.2;
RightExploitingTISwarmchart = swarmchart(TIDistributionAxes,...
                                         XData,...
                                         AllRightExploitingTI,...
                                         'Marker', '.',...
                                         'MarkerEdgeColor', ColourPalette.Exploit,...
                                         'XJitter', 'density',...
                                         'XJitterWidth', 0.2);

RightExploitingBoxchart = boxchart(TIDistributionAxes, XData, AllRightExploitingTI);
set(RightExploitingBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'w',...
    'BoxFaceAlpha', 0,...
    'WhiskerLineColor', 'w',...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllRightExploringTI = AllRightTI(AllRightExploitation == 0);
XData = ones(size(AllRightExploringTI)) + 0.2;
RightExploringTISwarmchart = swarmchart(TIDistributionAxes,...
                                        XData,...
                                        AllRightExploringTI,...
                                        'Marker', '.',...
                                        'MarkerEdgeColor', ColourPalette.Explore,...
                                        'XJitter', 'density',...
                                        'XJitterWidth', 0.2);

RightExploringBoxchart = boxchart(TIDistributionAxes, XData, AllRightExploringTI);
set(RightExploringBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

% TI-ZScore distribution per left-right and explore/exploit
AllLeftExploitingSqrtTIZScore = AllLeftTISqrtZScore(AllLeftExploitation == 1);
XData = zeros(size(AllLeftExploitingSqrtTIZScore)) - 0.2;
LeftExploitingTISqrtZScoreSwarmchart = swarmchart(TISqrtZScoreDistributionAxes,...
                                                  XData,...
                                                  AllLeftExploitingSqrtTIZScore,...
                                                  'Marker', '.',...
                                                  'MarkerEdgeColor', ColourPalette.Exploit,...
                                                  'XJitter', 'density',...
                                                  'XJitterWidth', 0.2);

LeftExploitingSqrtZScoreBoxchart = boxchart(TISqrtZScoreDistributionAxes, XData, AllLeftExploitingSqrtTIZScore);
set(LeftExploitingSqrtZScoreBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'w',...
    'BoxFaceAlpha', 0,...
    'WhiskerLineColor', 'w',...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllLeftExploringTISqrtZScore = AllLeftTISqrtZScore(AllLeftExploitation == 0);
XData = zeros(size(AllLeftExploringTISqrtZScore)) + 0.2;
LeftExploringTISqrtZScoreSwarmchart = swarmchart(TISqrtZScoreDistributionAxes,...
                                                 XData,...
                                                 AllLeftExploringTISqrtZScore,...
                                                 'Marker', '.',...
                                                 'MarkerEdgeColor', ColourPalette.Explore,...
                                                 'XJitter', 'density',...
                                                 'XJitterWidth', 0.2);

LeftExploringSqrtZScoreBoxchart = boxchart(TISqrtZScoreDistributionAxes, XData, AllLeftExploringTISqrtZScore);
set(LeftExploringSqrtZScoreBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllRightExploitingTISqrtZScore = AllRightTISqrtZScore(AllRightExploitation == 1);
XData = ones(size(AllRightExploitingTISqrtZScore)) - 0.2;
RightExploitingTISqrtZScoreSwarmchart = swarmchart(TISqrtZScoreDistributionAxes,...
                                                   XData,...
                                                   AllRightExploitingTISqrtZScore,...
                                                   'Marker', '.',...
                                                   'MarkerEdgeColor', ColourPalette.Exploit,...
                                                   'XJitter', 'density',...
                                                   'XJitterWidth', 0.2);

RightExploitingSqrtZScoreBoxchart = boxchart(TISqrtZScoreDistributionAxes, XData, AllRightExploitingTISqrtZScore);
set(RightExploitingSqrtZScoreBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'w',...
    'BoxFaceAlpha', 0,...
    'WhiskerLineColor', 'w',...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllRightExploringTISqrtZScore = AllRightTISqrtZScore(AllRightExploitation == 0);
XData = ones(size(AllRightExploringTISqrtZScore)) + 0.2;
RightExploringTISqrtZScoreSwarmchart = swarmchart(TISqrtZScoreDistributionAxes,...
                                                  XData,...
                                                  AllRightExploringTISqrtZScore,...
                                                  'Marker', '.',...
                                                  'MarkerEdgeColor', ColourPalette.Explore,...
                                                  'XJitter', 'density',...
                                                  'XJitterWidth', 0.2);

RightExploringSqrtZScoreBoxchart = boxchart(TISqrtZScoreDistributionAxes, XData, AllRightExploringTISqrtZScore);
set(RightExploringSqrtZScoreBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

%% Move time
% Vevaiometric
[ExploreLineXData, ExploreLineYData] = Binvevaio(AllExploringMTLogOdds, AllExploringMT, 10);
[ExploitLineXData, ExploitLineYData] = Binvevaio(AllExploitingMTLogOdds, AllExploitingMT, 10);

ExploreMTLine{iSession + 1} = line(VevaiometricMTAxes,...
                                   'XData', ExploreLineXData,...
                                   'YData', ExploreLineYData,...
                                   'LineStyle', '-',...
                                   'LineWidth', 2,...
                                   'Color', ColourPalette.Explore);

ExploitMTLine{iSession + 1} = line(VevaiometricMTAxes,...
                                   'XData', ExploitLineXData,...
                                   'YData', ExploitLineYData,...
                                   'LineStyle', '-',...
                                   'LineWidth', 2,...
                                   'Color', ColourPalette.Exploit);

% Vevaiometric z-score
% use log normal
% NOT USE AS NOT NORMAL DISTRIBUTION
[ExploreLogZScoreLineXData, ExploreLogZScoreLineYData] = Binvevaio(AllExploringMTLogOdds, AllExploringMTLogZScore, 10);
[ExploitLogZScoreLineXData, ExploitLogZScoreLineYData] = Binvevaio(AllExploitingMTLogOdds, AllExploitingMTLogZScore, 10);

ExploreMTLogZScoreLine{iSession + 1} = line(VevaiometricMTLogZScoreAxes,...
                                            'XData', ExploreLogZScoreLineXData,...
                                            'YData', ExploreLogZScoreLineYData,...
                                            'LineStyle', '-',...
                                            'LineWidth', 2,...
                                            'Color', ColourPalette.Explore);

ExploitMTLogZScoreLine{iSession + 1} = line(VevaiometricMTLogZScoreAxes,...
                                             'XData', ExploitLogZScoreLineXData,...
                                             'YData', ExploitLogZScoreLineYData,...
                                             'LineStyle', '-',...
                                             'LineWidth', 2,...
                                             'Color', ColourPalette.Exploit);

% Vevaiometric (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
LeftMTScatter = scatter(LRVevaiometricMTAxes,...
                        AllLeftMTAbsResidual,...
                        AllLeftMT);
set(LeftMTScatter,...
    'SizeData', 1,...
    'Marker', '.',...
    'CData', ColourPalette.Left);

RightMTScatter = scatter(LRVevaiometricMTAxes,...
                         AllRightMTAbsResidual,...
                         AllRightMT);
set(RightMTScatter,...
    'SizeData', 1,...
    'Marker', '.',...
    'CData', ColourPalette.Right);

[LeftTILineXData, LeftTILineYData] = Binvevaio(AllLeftMTAbsResidual, AllLeftMT, 10);
[RightTILineXData, RightTILineYData] = Binvevaio(AllRightMTAbsResidual, AllRightMT, 10);

LefMTLine = line(LRVevaiometricMTAxes,...
                 'XData', LeftTILineXData,...
                 'YData', LeftTILineYData,...
                 'LineStyle', '-',...
                 'LineWidth', 2,...
                 'Color', ColourPalette.Left);

RightMTLine = line(LRVevaiometricMTAxes,...
                   'XData', RightTILineXData,...
                   'YData', RightTILineYData,...
                   'LineStyle', '-',...
                   'LineWidth', 2,...
                   'Color', ColourPalette.Right);

[LeftRValue, LeftpValue] = corrcoef(AllLeftMTAbsResidual, AllLeftMT);
[RightRValue, RightpValue] = corrcoef(AllRightMTAbsResidual, AllRightMT);

LeftMTStatsText = text(LRVevaiometricMTAxes, 0.3, 0.45,...
                       sprintf('Left: R = %5.3f, p = %5.3f',...
                               LeftRValue(1, 2),...
                               LeftpValue(1, 2)),...
                       'FontSize', 8,...
                       'Color', ColourPalette.Left);

RightMTStatsText = text(LRVevaiometricMTAxes, 0.3, 0.4,...
                        sprintf('Right: R = %5.3f, p = %5.3f',...
                                RightRValue(1, 2),...
                                RightpValue(1, 2)),...
                        'FontSize', 8,...
                        'Color', ColourPalette.Right);

% use log normal
% NOT USE AS NOT NORMAL DISTRIBUTION
% Vevaiometric z-score (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
LeftMTZScoreScatter = scatter(LRVevaiometricMTLogZScoreAxes,...
                              AllLeftMTAbsResidual,...
                              AllLeftMTLogZScore);
set(LeftMTZScoreScatter,...
    'SizeData', 1,...
    'Marker', '.',...
    'CData', ColourPalette.Left);

RightMTZScoreScatter = scatter(LRVevaiometricMTLogZScoreAxes,...
                               AllRightMTAbsResidual,...
                               AllRightMTLogZScore);
set(RightMTZScoreScatter,...
    'SizeData', 1,...
    'Marker', '.',...
    'CData', ColourPalette.Right);

[LeftMTLogZScoreLineXData, LeftMTLogZScoreLineYData] = Binvevaio(AllLeftMTAbsResidual, AllLeftMTLogZScore, 10);
[RightMTLogZScoreLineXData, RightMTLogZScoreLineYData] = Binvevaio(AllRightMTAbsResidual, AllRightMTLogZScore, 10);

LeftMTLogZScoreLine{iSession + 1} = line(LRVevaiometricMTLogZScoreAxes,...
                                         'XData', LeftMTLogZScoreLineXData,...
                                         'YData', LeftMTLogZScoreLineYData,...
                                         'LineStyle', '-',...
                                         'LineWidth', 2,...
                                         'Color', ColourPalette.Left);

RightMTLogZScoreLine{iSession + 1} = line(LRVevaiometricMTLogZScoreAxes,...
                                          'XData', RightMTLogZScoreLineXData,...
                                          'YData', RightMTLogZScoreLineYData,...
                                          'LineStyle', '-',...
                                          'LineWidth', 2,...
                                          'Color', ColourPalette.Right);

[LeftRValue, LeftpValue] = corrcoef(AllLeftMTAbsResidual, AllLeftMTLogZScore);
[RightRValue, RightpValue] = corrcoef(AllRightMTAbsResidual, AllRightMTLogZScore);

LeftMTLogZScoreStatsText = text(LRVevaiometricMTLogZScoreAxes, 0.3, 3.5,...
                                sprintf('Left: R = %5.3f, p = %5.3f',...
                                        LeftRValue(1, 2),...
                                        LeftpValue(1, 2)),...
                                'FontSize', 8,...
                                'Color', ColourPalette.Left);

RightMTLogZScoreStatsText = text(LRVevaiometricMTLogZScoreAxes, 0.3, 3,...
                                 sprintf('Right: R = %5.3f, p = %5.3f',...
                                         RightRValue(1, 2),...
                                         RightpValue(1, 2)),...
                                 'FontSize', 8,...
                                 'Color', ColourPalette.Right);

% TI distribution per left-right and explore/exploit
AllLeftExploitation = AllLeftMTAbsResidual < 0.5;
AllRightExploitation = AllRightMTAbsResidual < 0.5;

AllLeftExploitingMT = AllLeftMT(AllLeftExploitation == 1);
XData = zeros(size(AllLeftExploitingMT)) - 0.2;
LeftExploitingMTSwarmchart = swarmchart(MTDistributionAxes,...
                                        XData,...
                                        AllLeftExploitingMT,...
                                        'Marker', '.',...
                                        'MarkerEdgeColor', ColourPalette.Exploit,...
                                        'XJitter', 'density',...
                                        'XJitterWidth', 0.2);

LeftExploitingMTBoxchart = boxchart(MTDistributionAxes, XData, AllLeftExploitingMT);
set(LeftExploitingMTBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'w',...
    'BoxFaceAlpha', 0,...
    'WhiskerLineColor', 'w',...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllLeftExploringMT = AllLeftMT(AllLeftExploitation == 0);
XData = zeros(size(AllLeftExploringMT)) + 0.2;
LeftExploringMTSwarmchart = swarmchart(MTDistributionAxes,...
                                       XData,...
                                       AllLeftExploringMT,...
                                       'Marker', '.',...
                                       'MarkerEdgeColor', ColourPalette.Explore,...
                                       'XJitter', 'density',...
                                       'XJitterWidth', 0.2);

LeftExploringMTBoxchart = boxchart(MTDistributionAxes, XData, AllLeftExploringMT);
set(LeftExploringMTBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllRightExploitingMT = AllRightMT(AllRightExploitation == 1);
XData = ones(size(AllRightExploitingMT)) - 0.2;
RightExploitingMTSwarmchart = swarmchart(MTDistributionAxes,...
                                         XData,...
                                         AllRightExploitingMT,...
                                         'Marker', '.',...
                                         'MarkerEdgeColor', ColourPalette.Exploit,...
                                         'XJitter', 'density',...
                                         'XJitterWidth', 0.2);

RightExploitingMTBoxchart = boxchart(MTDistributionAxes, XData, AllRightExploitingMT);
set(RightExploitingMTBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'w',...
    'BoxFaceAlpha', 0,...
    'WhiskerLineColor', 'w',...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllRightExploringMT = AllRightMT(AllRightExploitation == 0);
XData = ones(size(AllRightExploringMT)) + 0.2;
RightExploringMTSwarmchart = swarmchart(MTDistributionAxes,...
                                        XData,...
                                        AllRightExploringMT,...
                                        'Marker', '.',...
                                        'MarkerEdgeColor', ColourPalette.Explore,...
                                        'XJitter', 'density',...
                                        'XJitterWidth', 0.2);

RightExploringMTBoxchart = boxchart(MTDistributionAxes, XData, AllRightExploringMT);
set(RightExploringMTBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

% MT-ZScore distribution per left-right and explore/exploit
% use log normal
% NOT USE AS NOT NORMAL DISTRIBUTION
AllLeftExploitingMTLogZScore = AllLeftMTLogZScore(AllLeftExploitation == 1);
XData = zeros(size(AllLeftExploitingMTLogZScore)) - 0.2;
LeftExploitingMTLogZScoreSwarmchart = swarmchart(MTLogZScoreDistributionAxes,...
                                                 XData,...
                                                 AllLeftExploitingMTLogZScore,...
                                                 'Marker', '.',...
                                                 'MarkerEdgeColor', ColourPalette.Exploit,...
                                                 'XJitter', 'density',...
                                                 'XJitterWidth', 0.2);

LeftExploitingMTLogZScoreBoxchart = boxchart(MTLogZScoreDistributionAxes, XData, AllLeftExploitingMTLogZScore);
set(LeftExploitingMTLogZScoreBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'w',...
    'BoxFaceAlpha', 0,...
    'WhiskerLineColor', 'w',...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllLeftExploringMTLogZScore = AllLeftMTLogZScore(AllLeftExploitation == 0);
XData = zeros(size(AllLeftExploringMTLogZScore)) + 0.2;
LeftExploringMTLogZScoreSwarmchart = swarmchart(MTLogZScoreDistributionAxes,...
                                                XData,...
                                                AllLeftExploringMTLogZScore,...
                                                'Marker', '.',...
                                                'MarkerEdgeColor', ColourPalette.Explore,...
                                                'XJitter', 'density',...
                                                'XJitterWidth', 0.2);

LeftExploringMTLogZScoreBoxchart = boxchart(MTLogZScoreDistributionAxes, XData, AllLeftExploringMTLogZScore);
set(LeftExploringMTLogZScoreBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllRightExploitingMTLogZScore = AllRightMTLogZScore(AllRightExploitation == 1);
XData = ones(size(AllRightExploitingMTLogZScore)) - 0.2;
RightExploitingMTLogZScoreSwarmchart = swarmchart(MTLogZScoreDistributionAxes,...
                                                  XData,...
                                                  AllRightExploitingMTLogZScore,...
                                                  'Marker', '.',...
                                                  'MarkerEdgeColor', ColourPalette.Exploit,...
                                                  'XJitter', 'density',...
                                                  'XJitterWidth', 0.2);

RightExploitingMTLogZScoreBoxchart = boxchart(MTLogZScoreDistributionAxes, XData, AllRightExploitingMTLogZScore);
set(RightExploitingMTLogZScoreBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'w',...
    'BoxFaceAlpha', 0,...
    'WhiskerLineColor', 'w',...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllRightExploringMTLogZScore = AllRightMTLogZScore(AllRightExploitation == 0);
XData = ones(size(AllRightExploringMTLogZScore)) + 0.2;
RightExploringMTLogZScoreSwarmchart = swarmchart(MTLogZScoreDistributionAxes,...
                                                 XData,...
                                                 AllRightExploringMTLogZScore,...
                                                 'Marker', '.',...
                                                 'MarkerEdgeColor', ColourPalette.Explore,...
                                                 'XJitter', 'density',...
                                                 'XJitterWidth', 0.2);

RightExploringMTLogZScoreBoxchart = boxchart(MTLogZScoreDistributionAxes, XData, AllRightExploringMTLogZScore);
set(RightExploringMTLogZScoreBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

% Value-TI GLM Coeff.
X = AllTIChosenLogOdds';
ValueTIGLM = fitglm(X, AllTI);

ValueTICoeffBar = bar(ValueTIGLMAxes, ValueTIGLM.Coefficients.Estimate, 'w');
ValueTICoeffErrorbar = errorbar(ValueTIGLMAxes,...
                                ValueTIGLM.Coefficients.Estimate,...
                                ValueTIGLM.Coefficients.SE,...
                                'LineStyle', 'none',...
                                'Color', 'k');

SignificantLevel = 0.05;
SignificanceIdx = find(ValueTIGLM.Coefficients.pValue < SignificantLevel);
ValueTISignificantLine = line(ValueTIGLMAxes,...
                              SignificanceIdx,...
                              zeros(size(SignificanceIdx)),...
                              'LineStyle', 'none',...
                              'Color', 'k',...
                              'Marker', '*');

% Value-sqrt(TI) (z) GLM Coeff.
ValueTISqrtZScoreGLM = fitglm(X, AllTISqrtZScore);

ValueTISqrtZScoreCoeffBar = bar(ValueTISqrtZScoreGLMAxes, ValueTISqrtZScoreGLM.Coefficients.Estimate, 'w');
ValueTISqrtZScoreCoeffErrorbar = errorbar(ValueTISqrtZScoreGLMAxes,...
                                          ValueTISqrtZScoreGLM.Coefficients.Estimate,...
                                          ValueTISqrtZScoreGLM.Coefficients.SE,...
                                          'LineStyle', 'none',...
                                          'Color', 'k');

SignificantLevel = 0.05;
SignificanceIdx = find(ValueTISqrtZScoreGLM.Coefficients.pValue < SignificantLevel);
ValueTISqrtZScoreSignificantLine = line(ValueTISqrtZScoreGLMAxes,...
                                        SignificanceIdx,...
                                        zeros(size(SignificanceIdx)),...
                                        'LineStyle', 'none',...
                                        'Color', 'k',...
                                        'Marker', '*');

disp('YOu aRE a bEAutIFul HUmaN BeiNG, saID anTOniO.')

DataPath = strcat(DataFolderPath, '\', FigureTitle, '.png');
exportgraphics(AnalysisFigure, DataPath);

DataPath = strcat(DataFolderPath, '\', FigureTitle, '.fig');
savefig(AnalysisFigure, DataPath);

end % function