function AnalysisFigure = Matching_MS_MLE_ChoiceRegressionQ_Diagnosis(DataFolderPath)
% MS = MultiSession
% MLE = Maximum Likelihood Estimate
% Matching Analysis Function
% Developed by Antonio Lee @ BCCN Berlin
% Version 1.0 ~ Oct 2025
% Model iteration see the end of script

%% load files
if nargin < 1
    DataFolderPath = uigetdir(OttLabDataServerFolderPath());
elseif ~ischar(DataFolderPath) && ~isstring(DataFolderPath)
    disp('Error: Unknown input format. No further analysis can be performed.')
    return
end

try
    load(fullfile(DataFolderPath, '\Selected_Data.mat'));
    load(fullfile(DataFolderPath, '\Concatenated_Data.mat'));
catch
    disp('Error: Selected DataFolderPath does not contain the required .mat for further steps.')
    return
end

SessionDateRange = DataFolderPath(end-16:end);
[~, RatName] = fileparts(fileparts(fileparts(DataFolderPath)));

RatID = str2double(RatName);
if isnan(RatID)
    RatID = -1;
end
RatName = num2str(RatID);

AnalysisName = 'Matching_MS_MLE_ChoiceRegressionQ';

%% Hierarchaical Symmetric Q-Learning with Forgetting and Stickiness model
try
    load(fullfile(DataFolderPath, strcat('\', AnalysisName, '.mat')));
catch
    disp('Error: no models are found')
    return
end

if ~exist('Models', 'var')
    disp('Error: Loaded data is not a Models')
    return
end

%% create figure
% create figure
AnalysisFigure = figure('Position', [   0       0    1191     842],... % DIN A3, 72 ppi
                        'NumberTitle', 'off',...
                        'Name', strcat(RatName, '_', SessionDateRange, '_', AnalysisName),...
                        'MenuBar', 'none',...
                        'Resize', 'off');

% spacer for correct saving dimension
FrameAxes = axes(AnalysisFigure, 'Position', [0 0 1 1]);
set(FrameAxes,...
    'XTick', [],...
    'YTick', [],...
    'XColor', 'w',...
    'YColor', 'w')

% Figure Info
FigureInfoAxes = axes(AnalysisFigure, 'Position', [0.01    0.98    0.48    0.01]);
set(FigureInfoAxes,...
    'XTick', [],...
    'YTick', [],...
    'XColor', 'w',...
    'YColor', 'w')

FigureTitle = strcat(RatName, '_', SessionDateRange, '_', AnalysisName, '_Diagnosis');

FigureTitleText = text(FigureInfoAxes, 0, 0,...
                       FigureTitle,...
                       'FontSize', 14,...
                       'FontWeight','bold',...
                       'Interpreter', 'none');

% colour palette
ColourPalette = CommonColourPalette();

%% Analysis across sessions
SessionDateLabel = [];
nSessions = length(DataHolder);

% Posterior mode (i.e. MLE, maximum a posteriori) estimate of ChoiceSymmetricQ
% Photometry site vs non-photometry vs day-of-week (vs estrus if female)
MLEEstimateXTicks = {'all', 'non-photo', 'left-photo', 'right-photo'};

BiasMLEAxes = axes(AnalysisFigure, 'Position', [0.05    0.77    0.10    0.16]);
hold(BiasMLEAxes, 'on');

BiasMLEs = nan(1, nSessions);

set(BiasMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [-1, 4],...
    'XTick', 0:3,...
    'XTickLabel', {},...
    'YAxisLocation', 'left')
ylabel(BiasMLEAxes, '\beta_0 (a.u.)')
title(BiasMLEAxes, 'MLE estimate')

QCoeffMLEAxes = axes(AnalysisFigure, 'Position', [0.05    0.57    0.10    0.16]);
hold(QCoeffMLEAxes, 'on');

QCoeffMLEs = nan(1, nSessions);

set(QCoeffMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [-1, 4],...
    'XTick', 0:3,...
    'XTickLabel', {},...
    'YAxisLocation', 'left')
ylabel(QCoeffMLEAxes, '\beta_{Q_{t-1}} (a.u.)')

Minus1ChoiceMLEAxes = axes(AnalysisFigure, 'Position', [0.05    0.38    0.10    0.16]);
hold(Minus1ChoiceMLEAxes, 'on');

Minus1ChoiceMLEs = nan(1, nSessions);

set(Minus1ChoiceMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [-1, 4],...
    'XTick', 0:3,...
    'XTickLabel', MLEEstimateXTicks,...
    'XTickLabelRotation', 90,...
    'YAxisLocation', 'left')
ylabel(Minus1ChoiceMLEAxes, '\beta_{c_{t-1}} (a.u.)')

Minus1RewardMLEAxes = axes(AnalysisFigure, 'Position', [0.20    0.77    0.10    0.16]);
hold(Minus1RewardMLEAxes, 'on');

Minus1RewardMLEs = nan(1, nSessions);

set(Minus1RewardMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [-1, 4],...
    'XTick', 0:3,...
    'XTickLabel', {},...
    'YAxisLocation', 'left')
ylabel(Minus1RewardMLEAxes, '\beta_{r_{t-1}} (a.u.)')

Minus2ChoiceMLEAxes = axes(AnalysisFigure, 'Position', [0.20    0.57    0.10    0.16]);
hold(Minus2ChoiceMLEAxes, 'on');

Minus2ChoiceMLEs = nan(1, nSessions);

set(Minus2ChoiceMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [-1, 4],...
    'XTick', 0:3,...
    'XTickLabel', {},...
    'YAxisLocation', 'left')
ylabel(Minus2ChoiceMLEAxes, '\beta_{c_{t-2}} (a.u.)')

Minus2RewardMLEAxes = axes(AnalysisFigure, 'Position', [0.20    0.38    0.10    0.15]);
hold(Minus2RewardMLEAxes, 'on');

Minus2RewardMLEs = nan(1, nSessions);

set(Minus2RewardMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [-1, 4],...
    'XTick', 0:3,...
    'XTickLabel', MLEEstimateXTicks,...
    'XTickLabelRotation', 90,...
    'YAxisLocation', 'left')
ylabel(Minus2RewardMLEAxes, '\beta_{r_{t-2}} (a.u.)')

%% residual distribution overview
SessionResidualDistributionAxes = axes(AnalysisFigure, 'Position', [0.35    0.15    0.64    0.09]);
hold(SessionResidualDistributionAxes, 'on')

SessionIdx = [];
Residuals = [];

set(SessionResidualDistributionAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [0 length(DataHolder)+1],...
    'XTickLabel', [],...
    'YLim', [-1, 1],...
    'YAxisLocation', 'left')
ylabel(SessionResidualDistributionAxes, 'Residuals (a.u.)')

%% MLE overview
% bias
SessionBiasMLEAxes = axes(AnalysisFigure, 'Position', [0.35    0.86    0.64    0.10]);
hold(SessionBiasMLEAxes, 'on')

set(SessionBiasMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [0 length(DataHolder)+1],...
    'XTickLabel', [],...
    'YLim', [-0.5, 0.5],...
    'YAxisLocation', 'left')
ylabel(SessionBiasMLEAxes, '\beta_0 (a.u.)')

% inverse temperature
SessionQCoeffMLEAxes = axes(AnalysisFigure, 'Position', [0.35    0.74    0.64    0.10]);
hold(SessionQCoeffMLEAxes, 'on')

set(SessionQCoeffMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [0 length(DataHolder)+1],...
    'XTickLabel', [],...
    'YLim', [0, 2],...
    'YAxisLocation', 'left')
ylabel(SessionQCoeffMLEAxes, '\beta_{Q_{t-1}} (a.u.)')

% forgetting rate
SessionMinus1ChoiceMLEAxes = axes(AnalysisFigure, 'Position', [0.35    0.62    0.64    0.10]);
hold(SessionMinus1ChoiceMLEAxes, 'on')

set(SessionMinus1ChoiceMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [0 length(DataHolder)+1],...
    'XTickLabel', [],...
    'YLim', [-1, 1],...
    'YAxisLocation', 'left')
ylabel(SessionMinus1ChoiceMLEAxes, '\beta_{c_{t-1}} (a.u.)')

% choice stickiness
SessionMinus1RewardMLEAxes = axes(AnalysisFigure, 'Position', [0.35    0.50    0.64    0.10]);
hold(SessionMinus1RewardMLEAxes, 'on')

set(SessionMinus1RewardMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [0 length(DataHolder)+1],...
    'XTickLabel', [],...
    'YLim', [0, 2],...
    'YAxisLocation', 'left')
ylabel(SessionMinus1RewardMLEAxes, '\beta_{r_{t-1}} (a.u.)')

% choice forgetting rate
SessionMinus2ChoiceMLEAxes = axes(AnalysisFigure, 'Position', [0.35    0.38    0.64    0.10]);
hold(SessionMinus2ChoiceMLEAxes, 'on')

set(SessionMinus2ChoiceMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [0 length(DataHolder)+1],...
    'XTickLabel', [],...
    'YLim', [-1, 1],...
    'YAxisLocation', 'left')
ylabel(SessionMinus2ChoiceMLEAxes, '\beta_{c_{t-2}} (a.u.)')

% bias
SessionMinus2RewardMLEAxes = axes(AnalysisFigure, 'Position', [0.35    0.26    0.64    0.10]);
hold(SessionMinus2RewardMLEAxes, 'on')

set(SessionMinus2RewardMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [0 length(DataHolder)+1],...
    'XTickLabel', [],...
    'YLim', [-2, 2],...
    'YAxisLocation', 'left')
ylabel(SessionMinus2RewardMLEAxes, '\beta_{r_{t-2}} (a.u.)')

%% SessionMeta
PhotometryRecordingTag = nan(1, length(DataHolder)); % 1: non-photo, 2:left, 3:right
WeekdayTag = nan(1, length(DataHolder)); %1: Sunday...

%% Plotting
for iSession = 1:length(DataHolder)
    % Import SessionData
    SessionData = DataHolder{iSession};
    SessionDateLabel = [SessionDateLabel, string(datestr(datetime(SessionData.Info.SessionDate), 'YYYYmmDD(ddd)'))];
    
    nTrials = SessionData.nTrials;
    if nTrials < 200
        disp(['Session ', num2str(iSession), ' has nTrial < 200. Impossible for analysis.'])
        continue
    end

    if ~isfield(SessionData.Custom.SessionMeta, 'PhotometryBrainArea')
        PhotometryRecordingTag(iSession) = 1;
    elseif contains(SessionData.Custom.SessionMeta.PhotometryBrainArea, 'eft')
        PhotometryRecordingTag(iSession) = 2;
    elseif contains(SessionData.Custom.SessionMeta.PhotometryBrainArea, 'ight')
        PhotometryRecordingTag(iSession) = 3;
    end
    WeekdayTag(iSession) = weekday(SessionData.Info.SessionDate);
    
    ChoiceLeft = SessionData.Custom.TrialData.ChoiceLeft(1:nTrials);
    Rewarded = SessionData.Custom.TrialData.Rewarded(1:nTrials);

    %% Analysis across sessions
    Model = Models{iSession};

    BiasMLEs(iSession) = Model.EstimatedParameters(1);
    QCoeffMLEs(iSession) = Model.EstimatedParameters(2);
    Minus1ChoiceMLEs(iSession) = Model.EstimatedParameters(3);
    Minus1RewardMLEs(iSession) = Model.EstimatedParameters(4);
    Minus2ChoiceMLEs(iSession) = Model.EstimatedParameters(5);
    Minus2RewardMLEs(iSession) = Model.EstimatedParameters(6);
    
    MLEEstimates = [BiasMLEs(iSession), QCoeffMLEs(iSession), Minus1ChoiceMLEs(iSession),...
                    Minus1RewardMLEs(iSession), Minus2ChoiceMLEs(iSession), Minus2RewardMLEs(iSession)];
    
    [NegLogDataLikelihood, Values] = ChoiceRegressionQ(MLEEstimates, nTrials, ChoiceLeft, Rewarded);
    LogOdds = Values.ChoiceLeftLogOdds;
    
    PredictedLeftChoiceProb = 1 ./ (1 + exp(-LogOdds));

    PredictedChoice = double(PredictedLeftChoiceProb>=0.5);
    PredictedChoice(isnan(ChoiceLeft)) = nan;
    
    Explore = abs(ChoiceLeft - PredictedLeftChoiceProb) >= 0.5;
    Exploit = abs(ChoiceLeft - PredictedLeftChoiceProb) < 0.5;
    
    AbsModelResiduals = abs(ChoiceLeft - PredictedLeftChoiceProb);

    %% session residuals overview
    SessionIdx = [SessionIdx, iSession .* ones(1, nTrials)];
    Residuals = [Residuals, ChoiceLeft - PredictedLeftChoiceProb];
    
    %% session chain summary
    % learning rate
    BiasErrorBar(iSession) = errorbar(SessionBiasMLEAxes,...
                                      iSession,...
                                      MLEEstimates(1),...
                                      Model.ParameterStandardError(1),...
                                      'Marker', 'none',...
                                      'Color', 'k');

    % inverse temperature
    QCoeffErrorBar(iSession) = errorbar(SessionQCoeffMLEAxes,...
                                        iSession,...
                                        MLEEstimates(2),...
                                        Model.ParameterStandardError(2),...
                                        'Marker', 'none',...
                                        'Color', 'k');

    % forgetting rate
    Minus1ChoiceErrorBar(iSession) = errorbar(SessionMinus1ChoiceMLEAxes,...
                                              iSession,...
                                              MLEEstimates(3),...
                                              Model.ParameterStandardError(3),...
                                              'Marker', 'none',...
                                              'Color', 'k');

    % choice stickiness
    Minus1RewardErrorBar(iSession) = errorbar(SessionMinus1RewardMLEAxes,...
                                              iSession,...
                                              MLEEstimates(4),...
                                              Model.ParameterStandardError(4),...
                                              'Marker', 'none',...
                                              'Color', 'k');
    
    % choice forgetting rate
    Minus2ChoiceErrorBar(iSession) = errorbar(SessionMinus2ChoiceMLEAxes,...
                                              iSession,...
                                              MLEEstimates(5),...
                                              Model.ParameterStandardError(5),...
                                              'Marker', 'none',...
                                              'Color', 'k');

    % bias
    Minus2RewardErrorBar(iSession) = errorbar(SessionMinus2RewardMLEAxes,...
                                              iSession,...
                                              MLEEstimates(6),...
                                              Model.ParameterStandardError(6),...
                                              'Marker', 'none',...
                                              'Color', 'k');
                                                 
end

%% Average across sessions
% Posterior mode (i.e. MLE, maximum a posteriori) estimate of ChoiceSymmetricQ
XData = zeros(size(BiasMLEs));
BiasSwarmchart = swarmchart(BiasMLEAxes,...
                            XData,...
                            BiasMLEs,...
                            'Marker', '.',...
                            'MarkerEdgeColor', ColourPalette.Session,...
                            'XJitter', 'density',...
                            'XJitterWidth', 1);

BiasBoxchart = boxchart(BiasMLEAxes, XData, BiasMLEs);
set(BiasBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

PhotometryBiasSwarmchart = swarmchart(BiasMLEAxes,...
                                      PhotometryRecordingTag,...
                                      BiasMLEs,...
                                      'Marker', '.',...
                                      'MarkerEdgeColor', ColourPalette.Session,...
                                      'XJitter', 'density',...
                                      'XJitterWidth', 1);

PhotometryBiasBoxchart = boxchart(BiasMLEAxes, PhotometryRecordingTag, BiasMLEs);
set(PhotometryBiasBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

XData = zeros(size(QCoeffMLEs));
QCoeffSwarmchart = swarmchart(QCoeffMLEAxes,...
                              XData,...
                              QCoeffMLEs,...
                              'Marker', '.',...
                              'MarkerEdgeColor', ColourPalette.Session,...
                              'XJitter', 'density',...
                              'XJitterWidth', 1);

QCoeffBoxchart = boxchart(QCoeffMLEAxes, XData, QCoeffMLEs);
set(QCoeffBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

PhotometryQCoeffSwarmchart = swarmchart(QCoeffMLEAxes,...
                                        PhotometryRecordingTag,...
                                        QCoeffMLEs,...
                                        'Marker', '.',...
                                        'MarkerEdgeColor', ColourPalette.Session,...
                                        'XJitter', 'density',...
                                        'XJitterWidth', 1);

PhotometryQCoeffBoxchart = boxchart(QCoeffMLEAxes, PhotometryRecordingTag, QCoeffMLEs);
set(PhotometryQCoeffBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

XData = zeros(size(Minus1ChoiceMLEs));
Minus1ChoiceSwarmchart = swarmchart(Minus1ChoiceMLEAxes,...
                                    XData,...
                                    Minus1ChoiceMLEs,...
                                    'Marker', '.',...
                                    'MarkerEdgeColor', ColourPalette.Session,...
                                    'XJitter', 'density',...
                                    'XJitterWidth', 1);

Minus1ChoiceBoxchart = boxchart(Minus1ChoiceMLEAxes, XData, Minus1ChoiceMLEs);
set(Minus1ChoiceBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

PhotometryMinus1ChoiceSwarmchart = swarmchart(Minus1ChoiceMLEAxes,...
                                              PhotometryRecordingTag,...
                                              Minus1ChoiceMLEs,...
                                              'Marker', '.',...
                                              'MarkerEdgeColor', ColourPalette.Session,...
                                              'XJitter', 'density',...
                                              'XJitterWidth', 1);

PhotometryMinus1ChoiceBoxchart = boxchart(Minus1ChoiceMLEAxes, PhotometryRecordingTag, Minus1ChoiceMLEs);
set(PhotometryMinus1ChoiceBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

XData = zeros(size(Minus1RewardMLEs));
Minus1RewardSwarmchart = swarmchart(Minus1RewardMLEAxes,...
                                    XData,...
                                    Minus1RewardMLEs,...
                                    'Marker', '.',...
                                    'MarkerEdgeColor', ColourPalette.Session,...
                                    'XJitter', 'density',...
                                    'XJitterWidth', 1);

Minus1RewardBoxchart = boxchart(Minus1RewardMLEAxes, XData, Minus1RewardMLEs);
set(Minus1RewardBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

PhotometryMinus1RewardSwarmchart = swarmchart(Minus1RewardMLEAxes,...
                                              PhotometryRecordingTag,...
                                              Minus1RewardMLEs,...
                                              'Marker', '.',...
                                              'MarkerEdgeColor', ColourPalette.Session,...
                                              'XJitter', 'density',...
                                              'XJitterWidth', 1);

PhotometryMinus1RewardBoxchart = boxchart(Minus1RewardMLEAxes, PhotometryRecordingTag, Minus1RewardMLEs);
set(PhotometryMinus1RewardBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

XData = zeros(size(Minus2ChoiceMLEs));
Minus2ChoiceSwarmchart = swarmchart(Minus2ChoiceMLEAxes,...
                                    XData,...
                                    Minus2ChoiceMLEs,...
                                    'Marker', '.',...
                                    'MarkerEdgeColor', ColourPalette.Session,...
                                    'XJitter', 'density',...
                                    'XJitterWidth', 1);

Minus2ChoiceBoxchart = boxchart(Minus2ChoiceMLEAxes, XData, Minus2ChoiceMLEs);
set(Minus2ChoiceBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

PhotometryMinus2ChoiceSwarmchart = swarmchart(Minus2ChoiceMLEAxes,...
                                              PhotometryRecordingTag,...
                                              Minus2ChoiceMLEs,...
                                              'Marker', '.',...
                                              'MarkerEdgeColor', ColourPalette.Session,...
                                              'XJitter', 'density',...
                                              'XJitterWidth', 1);

PhotometryMinus2ChoiceBoxchart = boxchart(Minus2ChoiceMLEAxes, PhotometryRecordingTag, Minus2ChoiceMLEs);
set(PhotometryMinus2ChoiceBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

XData = zeros(size(Minus2RewardMLEs));
Minus2RewardSwarmchart = swarmchart(Minus2RewardMLEAxes,...
                                    XData,...
                                    Minus2RewardMLEs,...
                                    'Marker', '.',...
                                    'MarkerEdgeColor', ColourPalette.Session,...
                                    'XJitter', 'density',...
                                    'XJitterWidth', 1);

Minus2RewardBoxchart = boxchart(Minus2RewardMLEAxes, XData, Minus2RewardMLEs);
set(Minus2RewardBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

PhotometryMinus2RewardSwarmchart = swarmchart(Minus2RewardMLEAxes,...
                                      PhotometryRecordingTag,...
                                      Minus2RewardMLEs,...
                                      'Marker', '.',...
                                      'MarkerEdgeColor', ColourPalette.Session,...
                                      'XJitter', 'density',...
                                      'XJitterWidth', 1);

PhotometryMinus2RewardBoxchart = boxchart(Minus2RewardMLEAxes, PhotometryRecordingTag, Minus2RewardMLEs);
set(PhotometryMinus2RewardBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

%% Session residuals overview
SessionResidualsSwamchart = swarmchart(SessionResidualDistributionAxes,...
                                       SessionIdx,...
                                       Residuals,...
                                       'Marker', '.',...
                                       'MarkerEdgeColor', ColourPalette.Session,...
                                       'XJitter', 'density',...
                                       'XJitterWidth', 1);


set(SessionResidualDistributionAxes,...
    'XTick', 1:length(SessionDateLabel),...
    'XTickLabel', SessionDateLabel,...
    'XTickLabelRotation', 90);

%% session MLE overview
SesionDateDatetime = datetime(SessionDateLabel, 'InputFormat', 'yyyyMMdd(eee)');
SessionDateDiffDays = caldays(caldiff(SesionDateDatetime, 'days'));
WaterDeprivedDayOneIdx = [1, find(SessionDateDiffDays > 1) + 1];

% forgetting rate
SessionBiasMLEPlot = plot(SessionBiasMLEAxes, 1:nSessions, BiasMLEs,...
                          'Marker', 'o',...
                          'MarkerIndices', WaterDeprivedDayOneIdx,...
                          'Color', 'k');

set(SessionBiasMLEAxes,...
    'XTick', 1:length(SessionDateLabel),...
    'XTickLabel', {});

% forgetting rate
SessionQCoeffMLEPlot = plot(SessionQCoeffMLEAxes, 1:nSessions, QCoeffMLEs,...
                            'Marker', 'o',...
                            'MarkerIndices', WaterDeprivedDayOneIdx,...
                            'Color', 'k');

set(SessionQCoeffMLEAxes,...
    'XTick', 1:length(SessionDateLabel),...
    'XTickLabel', {});

% forgetting rate
SessionMinus1ChoiceMLEPlot = plot(SessionMinus1ChoiceMLEAxes, 1:nSessions, Minus1ChoiceMLEs,...
                                  'Marker', 'o',...
                                  'MarkerIndices', WaterDeprivedDayOneIdx,...
                                  'Color', 'k');

set(SessionMinus1ChoiceMLEAxes,...
    'XTick', 1:length(SessionDateLabel),...
    'XTickLabel', {});

% choice stickiness
SessionMinus1RewardMLEPlot = plot(SessionMinus1RewardMLEAxes, 1:nSessions, Minus1RewardMLEs,...
                                  'Marker', 'o',...
                                  'MarkerIndices', WaterDeprivedDayOneIdx,...
                                  'Color', 'k');

set(SessionMinus1RewardMLEAxes,...
    'XTick', 1:length(SessionDateLabel),...
    'XTickLabel', {});

% choice forgetting rate
SessionMinus2ChoiceMLEPlot = plot(SessionMinus2ChoiceMLEAxes, 1:nSessions, Minus2ChoiceMLEs,...
                                  'Marker', 'o',...
                                  'MarkerIndices', WaterDeprivedDayOneIdx,...
                                  'Color', 'k');

set(SessionMinus2ChoiceMLEAxes,...
    'XTick', 1:length(SessionDateLabel),...
    'XTickLabel', {});

% bias
SessionMinus2RewardMLEPlot = plot(SessionMinus2RewardMLEAxes, 1:nSessions, Minus2RewardMLEs,...
                          'Marker', 'o',...
                          'MarkerIndices', WaterDeprivedDayOneIdx,...
                          'Color', 'k');

set(SessionMinus2RewardMLEAxes,...
    'XTick', 1:length(SessionDateLabel),...
    'XTickLabel', {});

disp('YOu aRE a bEAutIFul HUmaN BeiNG, saID anTOniO.')

DataPath = strcat(DataFolderPath, '\', FigureTitle, '.png');
exportgraphics(AnalysisFigure, DataPath);

DataPath = strcat(DataFolderPath, '\', FigureTitle, '.fig');
savefig(AnalysisFigure, DataPath);

end % function