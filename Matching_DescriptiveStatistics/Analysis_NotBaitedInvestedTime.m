function FigHandle = Analysis_NotBaitedInvestedTime(DataFile)
% 2ArmBanditVariant Analysis Function, focusing on NotBaited Invested Time
% Developed by Antonio Lee @ BCCN Berlin
% Version 2.0 ~ Jan 2024

if nargin < 1
    global BpodSystem
    if isempty(BpodSystem) || isempty(BpodSystem.Data)
        [datafile, datapath] = uigetfile('\\ottlabfs.bccn-berlin.pri\ottlab\data\');
        load(fullfile(datapath, datafile));
    else
        SessionData = BpodSystem.Data;
    end
else
    load(DataFile);
end

%% Load related data to local variabels
Animal = str2double(SessionData.Info.Subject);
if isnan(Animal)
    Animal = -1;
end
Date = datestr(SessionData.Info.SessionDate, 'yyyymmdd');

nTrials = SessionData.nTrials;
if nTrials < 50
    disp('nTrial < 50. Impossible for analysis.')
    FigHandle = [];
    return
end
ChoiceLeft = SessionData.Custom.TrialData.ChoiceLeft(1:nTrials);
Baited = SessionData.Custom.TrialData.Baited(:, 1:nTrials);
IncorrectChoice = SessionData.Custom.TrialData.IncorrectChoice(1:nTrials);
NoDecision = SessionData.Custom.TrialData.NoDecision(1:nTrials);
NoTrialStart = SessionData.Custom.TrialData.NoTrialStart(1:nTrials);
BrokeFixation = SessionData.Custom.TrialData.BrokeFixation(1:nTrials);
EarlyWithdrawal = SessionData.Custom.TrialData.EarlyWithdrawal(1:nTrials);
StartNewTrial = SessionData.Custom.TrialData.StartNewTrial(1:nTrials);
SkippedFeedback = SessionData.Custom.TrialData.SkippedFeedback(1:nTrials);
Rewarded = SessionData.Custom.TrialData.Rewarded(1:nTrials);

SampleTime = SessionData.Custom.TrialData.SampleTime(1:nTrials);
MoveTime = SessionData.Custom.TrialData.MoveTime(1:nTrials);
FeedbackWaitingTime = SessionData.Custom.TrialData.FeedbackWaitingTime(1:nTrials);
% FeedbackDelay = SessionData.Custom.TrialData.FeedbackDelay(1:nTrials);
% FeedbackWaitingTime = rand(nTrials,1)*10; %delete this
% FeedbackWaitingTime = FeedbackWaitingTime';  %delete this
% FeedbackDelay = rand(nTrials,1)*10; %delete this
% FeedbackDelay= FeedbackDelay'; 

RewardProb = SessionData.Custom.TrialData.RewardProb(:, 1:nTrials);
LightLeft = SessionData.Custom.TrialData.LightLeft(1:nTrials);
LightLeftRight = [LightLeft; 1-LightLeft]; 
ChoiceLeftRight = [ChoiceLeft; 1-ChoiceLeft]; 

BlockNumber = SessionData.Custom.TrialData.BlockNumber(:, 1:nTrials);
BlockTrialNumber = SessionData.Custom.TrialData.BlockTrialNumber(:, 1:nTrials);

% for files before April 2023, no DrinkingTime is available
try
    DrinkingTime = SessionData.Custom.TrialData.DrinkingTime(1:nTrials);
catch
    DrinkingTime = nan(1, nTrials);
end

LeftFeedbackDelayGraceTime = [];
RightFeedbackDelayGraceTime = [];
FirstDrinkingTime = [];
LatestRewardTimestamp = [];
for iTrial = 1:nTrials
    if ChoiceLeft(iTrial) == 1
        LeftFeedbackDelayGraceTime = [LeftFeedbackDelayGraceTime;...
                                      SessionData.RawEvents.Trial{iTrial}.States.LInGrace(:,2) -...
                                      SessionData.RawEvents.Trial{iTrial}.States.LInGrace(:,1)];
    elseif ChoiceLeft(iTrial) == 0
        RightFeedbackDelayGraceTime = [RightFeedbackDelayGraceTime;...
                                       SessionData.RawEvents.Trial{iTrial}.States.RInGrace(:,2) -...
                                       SessionData.RawEvents.Trial{iTrial}.States.RInGrace(:,1)];
    end
    
    FirstDrinkingTime = [FirstDrinkingTime SessionData.RawEvents.Trial{iTrial}.States.Drinking(1,1)];
    if iTrial == 1
        LatestRewardTimestamp(iTrial) = 0;
    elseif isnan(SessionData.RawEvents.Trial{iTrial-1}.States.Drinking(1,1))
        LatestRewardTimestamp(iTrial) = LatestRewardTimestamp(iTrial-1);
    else
        LatestRewardTimestamp(iTrial) = SessionData.RawEvents.Trial{iTrial-1}.States.Drinking(1,1) + SessionData.TrialStartTimestamp(iTrial-1);
    end
end
LatestRewardTime = SessionData.TrialStartTimestamp - LatestRewardTimestamp;

LeftFeedbackDelayGraceTime = LeftFeedbackDelayGraceTime(~isnan(LeftFeedbackDelayGraceTime))';
LeftFeedbackDelayGraceTime = LeftFeedbackDelayGraceTime(LeftFeedbackDelayGraceTime < SessionData.SettingsFile.GUI.FeedbackDelayGrace - 0.0001);
RightFeedbackDelayGraceTime = RightFeedbackDelayGraceTime(~isnan(RightFeedbackDelayGraceTime))';
RightFeedbackDelayGraceTime = RightFeedbackDelayGraceTime(RightFeedbackDelayGraceTime < SessionData.SettingsFile.GUI.FeedbackDelayGrace - 0.0001);

%% Common plots regardless of task design/ risk type
% colour palette for events (suitable for most colourblind people)
scarlet = [254, 60, 60]/255; % for incorrect sign, contracting with azure
denim = [31, 54, 104]/255; % mainly for unsuccessful trials
azure = [0, 162, 254]/255; % for rewarded sign

neon_green = [26, 255, 26]/255; % for NotBaited
neon_purple = [168, 12, 180]/255; % for SkippedBaited

sand = [225, 190 106]/255; % for left-right
turquoise = [64, 176, 166]/255;
LRPalette = [sand; turquoise];

% colour palette for cues: (1- P(r)) * 128 + 127
% P(0) = white; P(1) = smoky gray
RewardProbCategories = unique(RewardProb);
CuedPalette = ((1 - RewardProbCategories) * [128 128 128] + 127)/255;

% create figure
FigHandle = figure('Position', [   0       0     842    1191],... % DIN A3, 72 ppi (window will crop it to _ x 1024, same as disp resolution)
                   'NumberTitle', 'off',...
                   'Name', strcat(num2str(Animal), '_', Date),...
                   'MenuBar', 'none',...
                   'Resize', 'off');

%% overview of events across session
TrialOverviewAxes = axes(FigHandle, 'Position', [0.01    0.77    0.48    0.20]);
hold(TrialOverviewAxes, 'on');
set(TrialOverviewAxes,...
    'TickDir', 'out',...
    'YAxisLocation', 'right',...
    'YLim', [0,10],...
    'YTick', 1:9,...
    'YTickLabel', {'NoTrialStart', 'BrokeFixation', 'EarlyWithdrawal',...
                   'NoDecision', 'StartNewTrial', 'IncorrectChoice',...
                   'Rewarded', 'NotBaited', 'SkippedBaited'},...
    'FontSize', 12);
xlabel(TrialOverviewAxes, 'nTrial', 'FontSize', 14);

idxTrial = 1:nTrials;
NoTrialStartndxTrial = idxTrial(NoTrialStart == 1);
NoTrialStartLine = line(TrialOverviewAxes,...
                        'xdata', NoTrialStartndxTrial,...
                        'ydata', ones(size(NoTrialStartndxTrial)) * 1,...
                        'LineStyle', 'none',...
                        'Marker', '.',...
                        'MarkerEdge', denim);

BrokeFixationndxTrial = idxTrial(BrokeFixation == 1);
BrokeFixationLine = line(TrialOverviewAxes,...
                         'xdata', BrokeFixationndxTrial,...
                         'ydata', ones(size(BrokeFixationndxTrial)) * 2,...
                         'LineStyle', 'none',...
                         'Marker', '.',...
                         'MarkerEdge', denim);

EarlyWithdrawalndxTrial = idxTrial(EarlyWithdrawal == 1);
EarlyWithdrawalLine = line(TrialOverviewAxes,...
                           'xdata', EarlyWithdrawalndxTrial,...
                           'ydata', ones(size(EarlyWithdrawalndxTrial)) * 3,...
                           'LineStyle', 'none',...
                           'Marker', '.',...
                           'MarkerEdge', denim);

NoDecisionndxTrial = idxTrial(NoDecision == 1);
NoDecisionLine = line(TrialOverviewAxes,...
                      'xdata', NoDecisionndxTrial,...
                      'ydata', ones(size(NoDecisionndxTrial)) * 4,...
                      'LineStyle', 'none',...
                      'Marker', '.',...
                      'MarkerEdge', denim);

StartNewTrialndxTrial = idxTrial(StartNewTrial == 1);
StartNewTrialLine = line(TrialOverviewAxes,...
                         'xdata', StartNewTrialndxTrial,...
                         'ydata', ones(size(StartNewTrialndxTrial)) * 5,...
                         'LineStyle', 'none',...
                         'Marker', '.',...
                         'MarkerEdge', denim);

IncorrectChoicendxTrial = idxTrial(IncorrectChoice == 1);
IncorrectChoiceLine = line(TrialOverviewAxes,...
                           'xdata', IncorrectChoicendxTrial,...
                           'ydata', ones(size(IncorrectChoicendxTrial)) * 6,...
                           'LineStyle', 'none',...
                           'Marker', '.',...
                           'MarkerEdge', scarlet);

RewardedndxTrial = idxTrial(Rewarded == 1);
RewardedHandle = line(TrialOverviewAxes,...
                    'xdata', RewardedndxTrial,...
                    'ydata', ones(size(RewardedndxTrial)) * 7,...
                    'LineStyle', 'none',...
                    'Marker', '.',...
                    'MarkerEdge', azure);

NotBaited = any(~Baited .* ChoiceLeftRight, 1) &(IncorrectChoice ~= 1);
NotBaitedndxTrial = idxTrial(NotBaited == 1);
NotBaitedLine = line(TrialOverviewAxes,...
                     'xdata', NotBaitedndxTrial,...
                     'ydata', ones(size(NotBaitedndxTrial)) * 8,...
                     'LineStyle', 'none',...
                     'Marker', '.',...
                     'MarkerEdge', neon_green);

SkippedBaited = any(Baited .* ChoiceLeftRight .* [SkippedFeedback; SkippedFeedback], 1) & (IncorrectChoice ~= 1);
SkippedBaitedndxTrial = idxTrial(SkippedBaited == 1); % Choice made is Baited but Skipped
SkippedBaitedLine = line(TrialOverviewAxes,...
                         'xdata', SkippedBaitedndxTrial,...
                         'ydata', ones(size(SkippedBaitedndxTrial)) * 9,...
                         'LineStyle', 'none',...
                         'Marker', '.',...
                         'MarkerEdge', neon_purple);

BlockSwitchndxTrial = idxTrial(BlockTrialNumber == 1);
BlockSwitchPlot = plot(TrialOverviewAxes,...
                       [BlockSwitchndxTrial; BlockSwitchndxTrial],...
                       [10*ones(size(BlockSwitchndxTrial)); zeros(size(BlockSwitchndxTrial))],...
                       'Color', [0.5 0.5 0.5],...
                       'LineStyle', ':',...
                       'Marker', 'none');

%% count and ratio of events per cue
EventOverviewAxes = axes(FigHandle, 'Position', [0.76    0.77    0.22    0.20]);
hold(EventOverviewAxes, 'on');
YTickLabel = {strcat(num2str(nTrials), ' | 100%'),...
              strcat(num2str(length(NoTrialStartndxTrial)), ' | ', sprintf('%04.1f', 100*length(NoTrialStartndxTrial)/nTrials), '%'),...
              strcat(num2str(length(BrokeFixationndxTrial)), ' | ', sprintf('%04.1f', 100*length(BrokeFixationndxTrial)/nTrials), '%'),...
              strcat(num2str(length(EarlyWithdrawalndxTrial)), ' | ', sprintf('%04.1f', 100*length(EarlyWithdrawalndxTrial)/nTrials), '%'),...
              strcat(num2str(length(NoDecisionndxTrial)), ' | ', sprintf('%04.1f', 100*length(NoDecisionndxTrial)/nTrials), '%'),...
              strcat(num2str(length(StartNewTrialndxTrial)), ' | ', sprintf('%04.1f', 100*length(StartNewTrialndxTrial)/nTrials), '%'),...
              strcat(num2str(length(IncorrectChoicendxTrial)), ' | ', sprintf('%04.1f', 100*length(IncorrectChoicendxTrial)/nTrials), '%'),...
              strcat(num2str(length(RewardedndxTrial)), ' | ', sprintf('%04.1f', 100*length(RewardedndxTrial)/nTrials), '%'),...
              strcat(num2str(length(NotBaitedndxTrial)), ' | ', sprintf('%04.1f', 100*length(NotBaitedndxTrial)/nTrials), '%'),...
              strcat(num2str(length(SkippedBaitedndxTrial)), ' | ', sprintf('%04.1f', 100*length(SkippedBaitedndxTrial)/nTrials), '%'),...
              'Count |       %'};

set(EventOverviewAxes,...
    'TickDir', 'out',...
    'XLim', [0, 100],...
    'YLim', [0, 10],...
    'YTick', 0:10,...
    'YTickLabel', YTickLabel,...
    'FontSize', 12);
xlabel(EventOverviewAxes, 'Proportion (%)', 'FontSize', 12);
title('Event Proportion', 'FontSize', 12)

if any(isnan(LightLeft)) % usually 2-arm task
    TrialRewardProb = max(RewardProb .* ChoiceLeftRight, [], 1);
    xdata = 7:9;
else % usually 1-arm task
    TrialRewardProb = max(RewardProb .* LightLeftRight, [], 1);
    xdata = 3:9;
end

TrialDataTable = table(TrialRewardProb', EarlyWithdrawal', NoDecision', StartNewTrial',...
                       IncorrectChoice', Rewarded', NotBaited', SkippedBaited',...
                       ChoiceLeft', SampleTime',MoveTime',...
                       FeedbackWaitingTime', DrinkingTime',...
                       BlockNumber', BlockTrialNumber',...
                       'VariableNames',{'TrialRewardProb', 'EarlyWithdrawal', 'NoDecision', 'StartNewTrial',...
                                        'IncorrectChoice', 'Rewarded', 'NotBaited', 'SkippedBaited',...
                                        'ChoiceLeft', 'SampleTime', 'MoveTime',...
                                        'FeedbackWaitingTime', 'DrinkingTime',...,
                                        'BlockNumber', 'BlockTrialNumber'});

TrialDataTable = TrialDataTable(~isnan(TrialRewardProb), :); % filter out no choice for 2-arm version
RewardProbSortedEventMean = table2array(grpstats(fillmissing(TrialDataTable(:, 1:8), 'constant', 0), 'TrialRewardProb'));
RewardProbSortedEventCount = RewardProbSortedEventMean(:, 2) .* RewardProbSortedEventMean(:, xdata);
RewardProbSortedEventProportion = 100 * RewardProbSortedEventCount ./ sum(RewardProbSortedEventCount, 1);

ydata = RewardProbSortedEventProportion';
EventRatioBarchart = barh(EventOverviewAxes, xdata, ydata, 'stacked');

for i = 1:length(EventRatioBarchart)
    EventRatioBarchart(i).FaceColor = CuedPalette(i, :);
end

RewardProbLegend = string(RewardProbCategories)';
EventRatioLegend = legend(EventOverviewAxes, RewardProbLegend,...
                          'Position', [0.77    0.79    0.20    0.012],...
                          'NumColumns', 2);

% ??ABOVE maybe the percentage on the graph??

%% Plot based on task design/ risk type
switch SessionData.SettingsFile.GUIMeta.RiskType.String{SessionData.SettingsFile.GUI.RiskType}
    case 'Fix'
    % not yet implemented %

    case 'BlockRand'
    % not yet implemented %

    case 'BlockFix'
    % not yet implemented %

    case 'BlockFixHolding'
    %% overview of events across session
    title(TrialOverviewAxes, strcat(num2str(Animal), '\_', Date, '\_Matching'))

    %% Block switching behaviour across session
    BlockSwitchHandle = axes(FigHandle, 'Position', [0.01    0.60    0.48    0.11]);
    hold(BlockSwitchHandle, 'on');
    if ~isempty(ChoiceLeft) && ~all(isnan(ChoiceLeft))
        xdata = 1:nTrials;
        RewardProbLeft = RewardProb(1,:);
        BlockDesignHandle = plot(BlockSwitchHandle, xdata, RewardProbLeft, '-', 'Color', [.5,.5,.5], 'LineWidth', 2);
        
        BinWidth = 10;
        ChoiceLeftSmoothed = smooth(ChoiceLeft, BinWidth, 'moving','omitnan'); %current bin width: 10 trials
        BlockChoiceHandle = plot(BlockSwitchHandle, xdata, ChoiceLeftSmoothed, '-k', 'LineWidth', 1);
        TrialChoicePlot = plot(BlockSwitchHandle, 1:nTrials, ChoiceLeft, '|', 'Color', 'k', 'MarkerSize', 1);

        set(BlockSwitchHandle,...
            'TickDir', 'out',...
            'XTickLabel', [],...
            'XAxisLocation', 'top',...
            'YLim', [-0.2 1.2],...
            'YTick', [0 0.5 1],...
            'YAxisLocation', 'right',...
            'FontSize', 10);
        ylabel('Left Choices (%)')
        % title('Block switching behaviour')
    end
    
%     %% all trials overview (counts for each observed behavior)
% 
%     ChoiceLeftRight = [ChoiceLeft; 1-ChoiceLeft];
%     NotBaited = any((Baited == 0) .* ChoiceLeftRight, 1);
% 
%     counts = zeros(1,6)';
%     events = {'NoChoice', 'BrokeFix','EarlyWith','SkippedFeedback','Rewarded','NotBaited'};
%     AllSessionEvents = table(counts,'RowNames',events);
% 
%     if ~isempty(NoDecision) && ~all(isnan(NoDecision))
%         AllSessionEvents('NoChoice','counts') = {length(NoDecision(NoDecision==1))};
%     end
%     if ~isempty(BrokeFixation) && ~all(isnan(BrokeFixation))
%         AllSessionEvents('BrokeFix','counts') = {length(BrokeFixation(BrokeFixation==1))};
%     end
%     if ~isempty(EarlyWithdrawal) && ~all(isnan(EarlyWithdrawal))
%         AllSessionEvents('EarlyWith','counts') = {length(EarlyWithdrawal(EarlyWithdrawal==1))};
%     end
%     if ~isempty(SkippedFeedback) && ~all(isnan(SkippedFeedback))
%         AllSessionEvents('SkippedFeedback','counts') = {length(SkippedFeedback(SkippedFeedback==1))-length(NotBaited(NotBaited==1))};
%     end                                                                                             
%     if ~isempty(Rewarded) && ~all(isnan(Rewarded))
%         AllSessionEvents('Rewarded','counts') = {length(Rewarded(Rewarded==1))};
%     end
%     if ~isempty(NotBaited) && ~all(isnan(NotBaited))
% 
%         AllSessionEvents('NotBaited','counts')= {length(NotBaited(NotBaited==1))};
% 
%     end
%     
%     y = AllSessionEvents.counts;  
%     xlabels = {'No Choice','Broke Fix','Early With','Skipped Feedback','Rewarded','NotBaited'};
%     colors = {'yellow', "#77AC30",'blue',"#EDB120",'black','cyan'};  
% 
%     subplot(4,3,2)   %needs adjustment, depends on the number of subplots
%     hold on
% 
%     for i = 1:length(y)
%         bar(i, y(i), 'FaceColor', colors{i}, 'EdgeColor', 'none')
%     end
% 
%     set(gca, 'XTick', 1:length(y))
%     set(gca, 'XTickLabel', xlabels)
%     legend(xlabels)
%     title('All trials');
%     ylabel("counts");
% 
%     %% distribution of waiting time of notbaited trials
%     
%     if ~isempty(FeedbackWaitingTime) && ~all(isnan(FeedbackWaitingTime))
%         
%         RewardProbChosen = RewardProb .* ChoiceLeftRight;
%         RewardProbChosen = RewardProbChosen(1,:) + RewardProbChosen(2,:);
%         WaitingTimeBlocks = [FeedbackWaitingTime;RewardProbChosen];
%         NotBaitedWT = WaitingTimeBlocks(:,NotBaited==1);
%         PHigh = max(RewardProbChosen);
%         PLow = min(RewardProbChosen);
%         WTHigh = NotBaitedWT(:,NotBaitedWT(2,:) == PHigh);
%         WTLow = NotBaitedWT(:,NotBaitedWT(2,:) == PLow);
%         nHigh = length(WTHigh);
%         nLow = length(WTLow);
%         meanHigh = [mean(WTHigh(1));PHigh];
%         meanLow = [mean(WTLow(1));PLow];
% 
%         subplot(4,3,3);    %needs adjustment!
%         hold on
%         xlim([0 1]);
%         swarmchart(WTLow(2,:),WTLow(1,:),'cyan');
%         swarmchart(WTHigh(2,:),WTHigh(1,:),'blue');
%         ticks = [PLow PHigh];
%         boxplot(WTLow(1,:),'Positions',PLow);
%         boxplot(WTHigh(1,:),'Positions',PHigh);
%         xticks(ticks)
%         set(gca, 'XTickLabel', {'PLow', 'PHigh'})
%         ylabel('time investment (s)');
%         text1 = sprintf('n = %d',nLow);
%         text2 = sprintf('n = %d',nHigh);
%         text(PLow,max(FeedbackWaitingTime),text1);
%         text(PHigh,max(FeedbackWaitingTime),text2);
%         title('Waiting times for not-baited trials')
%         
%     end
% 
%     %% plotting the drinking times
%     DrinkingTime = DrinkingTime(~isnan(DrinkingTime));
% 
%     if ~all(isnan(DrinkingTime))
%         subplot(4,3,4);              % specification of the binning could be added
%         histogram(DrinkingTime,'FaceColor',[.5,.5,.5],'EdgeColor',[1,1,1]);
%         xlabel('drinking times (s)')
%         ylabel('n')
%         title('Distribution of drinking times')
%     end
% 
%     %% calculating the actual ITI (inter-trial interval)
%     ITI = nan(nTrials-1,1);
% 
%     for i = 2:nTrials
%         ITI(i) = SessionData.TrialStartTimestamp(i) - SessionData.TrialEndTimestamp(i-1) +...
%                  SessionData.RawEvents.Trial{i}.States.ITI(2) - SessionData.RawEvents.Trial{i}.States.ITI(1);
%     end
% 
%     ITI = ITI(2:nTrials)';
%     cc = linspace(min(ITI), max(ITI), 10);    % not working yet
% 
%     if ~all(isnan(ITI))
%         subplot(4,3,5);
%         xlim([min(ITI) max(ITI)])
%         histogram(ITI,cc,'FaceColor',[.5,.5,.5],'EdgeColor',[1,1,1]); %binning could be specified
%         xlabel('actual ITI');
%         ylabel('n')
%         txt = sprintf('GUI ITI: %d',SessionData.SettingsFile.GUI.ITI);
%         title('InterTrial intervals');
%         subtitle(txt);
%     end
% 
    %% Lau Glimcher-model
    try 
        % preparing the data for design matrix
        Choices = ChoiceLeft';
        Choices(Choices==0) = -1; %1 = left; -1 = right
        Rewards = Rewarded';
        Rewards = Rewards .* Choices; % reward per choice +/-1   % 1 = left and rewarded; -1 = right and rewarded
    
        % build trial history kernels (n=5)
        HistoryKernelSize = 5;
        Choices = repmat(Choices, 1, HistoryKernelSize); % creates a matrix with each row representing the data from one trial
        Rewards = repmat(Rewards, 1, HistoryKernelSize); % each column is one variable associated with the explanatory varible (Choices, Rewards)
        for j = 1:HistoryKernelSize                      % in this case being the last 5 trials
            Choices(:, j) = circshift(Choices(:, j), j);       
            Choices(1:j, j) = 0;                       
            Rewards(:, j) = circshift(Rewards(:, j), j);      
            Rewards(1:j, j) = 0;                       
        end
        
        % concatenate to build design matrix X
        X = [Choices, Rewards];
        X(isnan(X)) = 0;
        
        mdl = fitglm(X, ChoiceLeft', 'distribution', 'binomial');
    
        % predict choices
        Ppredict = mdl.Fitted.Response;
        logodds = mdl.Fitted.LinearPredictor;   %logodds for both: left and right
        
        PredictedChoice = double(Ppredict>=0.5);
        PredictedChoice(isnan(ChoiceLeft)) = nan;
        PredictedChoicePlot = plot(BlockSwitchHandle, 1:nTrials, PredictedChoice*1.2 -0.1, '|', 'Color', 'r', 'MarkerSize', 1);
        SmoothedPredictedChoiceLeft = smooth(PredictedChoice, BinWidth, 'moving','omitnan');
        SmoothedPredictedChoicePlot = plot(BlockSwitchHandle, xdata, SmoothedPredictedChoiceLeft, '-r', 'LineWidth', 0.5);
        
        % odds based on reward or choice only
%         C0 = zeros(size(Choices));
%         R0 = zeros(size(Rewards));
%         X = [Choices,R0];
%         Ppredict = mdl.predict(X);
%         Ppredict = Ppredict';
%         logoddsChoice = log(Ppredict) - log(1 - Ppredict);
%     
%         X = [C0,Rewards];
%         Ppredict = mdl.predict(X);
%         Ppredict = Ppredict';
%         logoddsReward = log(Ppredict) - log(1 - Ppredict);
        model = true;
        
    catch
        disp('error in running model');
        model = false;
        
    end
    
    HistoryCorrelationHandle = axes(FigHandle, 'Position', [0.32    0.41    0.20    0.09]);
    hold(HistoryCorrelationHandle, 'on');

    set(HistoryCorrelationHandle, 'FontSize', 10)
    xlabel(HistoryCorrelationHandle, 'nTrials back');
    ylabel(HistoryCorrelationHandle, 'Correlation Coeff.');
    title(HistoryCorrelationHandle, 'Trial History GLM Fit')

    if model ~= false
        xdata = 1:HistoryKernelSize;
        ydataChoice = mdl.Coefficients.Estimate(2:1+HistoryKernelSize);
        ydataReward = mdl.Coefficients.Estimate(7:1+2*HistoryKernelSize);
        intercept = mdl.Coefficients.Estimate(1);
    
        ChoiceHistoryCorrelationHandle = plot(HistoryCorrelationHandle, xdata, ydataChoice',...
                                              'Color', 'blue');
        RewardHistoryCorrelationHandle = plot(HistoryCorrelationHandle, xdata, ydataReward',...
                                              'Color', 'magenta');
        CorrelationInterceptHandle = plot(HistoryCorrelationHandle,...
                                          xdata, intercept.*ones(1, length(xdata)), '--k');

        HistoryLegendHandle = legend(HistoryCorrelationHandle, {'Choice','Reward','Intercept'},...
                                 'Position', [0.41    0.45    0.12    0.05],...
                                 'NumColumns', 1,...
                                 'Box', 'off');
    end
    
    %% Model Residuals
    %ModelResidualsAxes = axes(FigHandle, 'Position', [0.06    0.41    0.20    0.09]);

    %% psychometric
    PsychometricHandle = axes(FigHandle, 'Position', [0.06    0.41    0.20    0.09]);
    hold(PsychometricHandle, 'on')
    
    set(PsychometricHandle,...
        'FontSize', 10,...
        'YLim', [0,1])
    title(PsychometricHandle, 'Psychometric')
    ylabel('Left Choices (%)')
    
    if model ~= false
        % Choice Psychometric
        ndxValid = ~isnan(ChoiceLeft); % and EarlyWithdrawal is always 0
        DV = logodds(ndxValid);
        ChoiceL = ChoiceLeft(ndxValid);
        dvbin = linspace(-max(abs(DV)), max(abs(DV)), 10);
        [xdata, ydata, error] = BinData(DV, ChoiceL, dvbin);
        vv = ~isnan(xdata) & ~isnan(ydata) & ~isnan(error);
        
        ChoicePsychometricErrorBarHandle = errorbar(PsychometricHandle, xdata(vv), ydata(vv), error(vv),...
                                                    'LineStyle', 'none',...
                                                    'LineWidth', 1.5,...
                                                    'Color', 'k',...
                                                    'Marker', 'o',...
                                                    'MarkerEdgeColor', 'k');
        
        mdl = fitglm(DV, ChoiceL(:), 'Distribution', 'binomial');
        ChoicePredictedPsychometricHandle = plot(PsychometricHandle, xdata, predict(mdl, xdata), '-', 'Color', [.5,.5,.5], 'LineWidth', 0.5);
    end
    
    %% Psychometrics of NotBaited Choice with High- and Low-TI
    TIPsychometricHandle = axes(FigHandle, 'Position', [0.06    0.27    0.20    0.09]);
    hold(TIPsychometricHandle, 'on')
    
    set(TIPsychometricHandle,...
        'FontSize', 10,...
        'YLim', [0,1])
    title(TIPsychometricHandle, 'NotBaited Psychometric')
    ylabel('Left Choices (%)')

    if model ~= false
        ndxBaited = (Baited(1,:) & ChoiceLeft==1) | (Baited(2,:) & ChoiceLeft==0);
        ChoiceL = ChoiceLeft(ndxValid & ~ndxBaited);
        DV = logodds(ndxValid & ~ndxBaited);

        TI = FeedbackWaitingTime(ndxValid & ~ ndxBaited);
        TImed = nanmedian(TI);
        high = TI>TImed;
        low = TI<=TImed;
        
        [xdata, ydata, error] = BinData(DV(high), ChoiceL(high), dvbin);
        vv = ~isnan(xdata) & ~isnan(ydata) & ~isnan(error);

        HighTINotBaitedPsychometricErrorBarHandle = errorbar(TIPsychometricHandle, xdata(vv), ydata(vv), error(vv),...
                                                             'LineStyle', 'none',...
                                                             'LineWidth', 1,...
                                                             'Marker', 'o',...
                                                             'MarkerFaceColor', [0 0 0.9],...
                                                             'MarkerEdgeColor', [0 0 0.9],...
                                                             'Color', [0 0 0.9]);

        [xdata, ydata, error] = BinData(DV(low), ChoiceL(low), dvbin);
        vv = ~isnan(xdata) & ~isnan(ydata) & ~isnan(error);

        LowTINotBaitedPsychometricErrorBarHandle = errorbar(TIPsychometricHandle, xdata(vv), ydata(vv), error(vv),...
                                                            'LineStyle', 'none',...
                                                            'LineWidth', 1,...
                                                            'Marker', 'o',...
                                                            'MarkerFaceColor', 'none',...
                                                            'MarkerEdgeColor', [0.5 0.5 1],...
                                                            'Color', [0.5 0.5 1]);
        
        mdl = fitglm(DV(high), ChoiceL(high), 'Distribution', 'binomial');
        HighTINotBaitedPredictedPsychometricHandle = plot(TIPsychometricHandle, xdata, predict(mdl, xdata), '-','Color', [0,0,.9], 'LineWidth', 0.5);

        mdl = fitglm(DV(low), ChoiceL(low), 'Distribution', 'binomial');
        LowTINotBaitedPredictedPsychometricHandle = plot(TIPsychometricHandle, xdata, predict(mdl, xdata), '-', 'Color', [.5,.5,1], 'LineWidth', 0.5);
        
        TIPsychometricLegendHandle = legend(TIPsychometricHandle, {'High TI','Low TI'},...
                                            'Box', 'off',...
                                            'Position', [0.07    0.33    0.05    0.03]);
    end
    
    %% plot vevaiometric      
    VevaiometricHandle = axes(FigHandle, 'Position', [0.06    0.09    0.20    0.14]);
    hold(VevaiometricHandle, 'on')
    
    set(VevaiometricHandle, 'FontSize', 10)
    title(VevaiometricHandle, 'Vevaiometric');
    xlabel(VevaiometricHandle, 'log(odds)');
    ylabel(VevaiometricHandle, 'Invested Time (s)');
    
    if model ~= false
        ndxExploit = ChoiceLeft == (logodds'>0);
        FeedbackWT = FeedbackWaitingTime(:);

        ExploreScatter_XData = logodds(ndxValid & ~ndxBaited & ~ndxExploit);
        ExploreScatter_YData = FeedbackWT(ndxValid & ~ndxBaited & ~ndxExploit);
        ExploitScatter_XData = logodds(ndxValid & ~ndxBaited & ndxExploit);
        ExploitScatter_YData = FeedbackWT(ndxValid & ~ndxBaited & ndxExploit);

        [ExploreLine_XData, ExploreLine_YData] = Binvevaio(ExploreScatter_XData, ExploreScatter_YData, 10);
        [ExploitLine_XData, ExploitLine_YData] = Binvevaio(ExploitScatter_XData, ExploitScatter_YData, 10);
        
        ExploreLineHandle = plot(VevaiometricHandle, ExploreLine_XData, ExploreLine_YData,...
                                 'Color', 'r',...
                                 'LineWidth', 2);       
        
        ExploitLineHandle = plot(VevaiometricHandle, ExploitLine_XData, ExploitLine_YData,...
                                 'Color', 'g',...
                                 'LineWidth', 2);
        
        ExploreScatterHandle = scatter(VevaiometricHandle, ExploreScatter_XData, ExploreScatter_YData,...
                                       'Marker', '.',...
                                       'MarkerEdgeColor', 'r');
        
        ExploitScatterHandle = scatter(VevaiometricHandle, ExploitScatter_XData, ExploitScatter_YData,...
                                       'Marker', '.',...
                                       'MarkerEdgeColor', 'g');

        VevaiometryLegendHandle  = legend(VevaiometricHandle, {'Explore','Exploit'},...
                                          'Box', 'off',...
                                          'Position', [0.18    0.16    0.05    0.03]);

    end

    %% callibration plot
    CalibrationHandle = axes(FigHandle, 'Position', [0.32    0.27    0.20    0.09]);
    hold(CalibrationHandle, 'on')

    set(CalibrationHandle, 'FontSize', 10)
    % title(CalibrationHandle, 'Calibration');
    xlabel(CalibrationHandle, 'Time Investment (s)');
    ylabel(CalibrationHandle, 'Ratio Exploit');

    if model ~= false && ~all(isnan(FeedbackWaitingTime))
        Correct = ndxExploit(ndxValid & ~ndxBaited); %'correct'
        FeedbackWT = FeedbackWaitingTime;
        ti = FeedbackWT(ndxValid & ~ndxBaited);
        edges = linspace(min(ti), max(ti), 8);
        [xdata, ydata, error] = BinData(ti, Correct, edges);
        vv = ~isnan(xdata) & ~isnan(ydata) & ~isnan(error);
        CalibrationErrorBarHandle = errorbar(CalibrationHandle,...
                                             xdata(vv), ydata(vv), error(vv),...
                                             'LineWidth', 2, ...
                                             'Color', 'r');
    end
    
    case 'Cued' % currently only designed for 1-arm
        %% 
        title(TrialOverviewAxes, strcat(num2str(Animal), '\_', Date, '\_CuedRisk'))
                
        %% Single-session analysis
        if nTrials <= 2500 && nTrials >= 200
            %% time investment for NotBaited per cue/choice risk
            FeedbackWaitingTimeAxes = axes(FigHandle, 'Position', [0.76    0.60    0.22    0.11]);
            hold(FeedbackWaitingTimeAxes, 'on');
            
            NotBaitedTrialData = TrialDataTable(TrialDataTable.NotBaited==1, :);
            FeedbackWaitingTimeSwarmchart = [];
            for i = 1:length(RewardProbCategories)
                FeedbackWaitingTimeSwarmchart(i) = swarmchart(FeedbackWaitingTimeAxes, NotBaitedTrialData(NotBaitedTrialData.TrialRewardProb == RewardProbCategories(i), :),...
                                                              'TrialRewardProb', 'FeedbackWaitingTime',...
                                                              'Marker', '.',...
                                                              'MarkerEdgeColor', CuedPalette(i,:),...
                                                              'XJitter', 'density',...
                                                              'XJitterWidth', 0.15);
            end
            
            set(FeedbackWaitingTimeAxes,...
                'TickDir', 'out',...
                'XLim', [0, 1],...
                'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
                'FontSize', 10);
            set(FeedbackWaitingTimeAxes.XLabel,...
                'String', '')
            ylabel(FeedbackWaitingTimeAxes, sprintf('NotBaited\nInvested Time (s)'), 'FontSize', 12, 'FontWeight', 'bold')
            
            FeedbackWaitingTimeBoxchart = boxchart(FeedbackWaitingTimeAxes, NotBaitedTrialData.TrialRewardProb, NotBaitedTrialData.FeedbackWaitingTime);
            set(FeedbackWaitingTimeBoxchart,...
                'BoxWidth', 0.05,...
                'BoxFaceColor', 'k',...
                'BoxFaceAlpha', 0,...
                'MarkerStyle', 'none',...
                'LineWidth', 0.2);
            
            FeedbackWaitingTimeStats = grpstats(NotBaitedTrialData,...
                                                'TrialRewardProb', {'mean', 'std'},...
                                                'DataVars', 'FeedbackWaitingTime',...
                                                'VarNames', {'Pr', 'Count', 'Mean', 'Std'});
            
            FeedbackWaitingTimeStatsText = [];
            for i = 1:length(FeedbackWaitingTimeStats.Pr)
                FeedbackWaitingTimeStatsText(i) = text(FeedbackWaitingTimeAxes, RewardProbCategories(i), FeedbackWaitingTimeAxes.YLim(2) * -0.4,...
                                                       sprintf('%3.0f\n%5.3f\n%5.3f',...
                                                               FeedbackWaitingTimeStats.Count(i),...
                                                               FeedbackWaitingTimeStats.Mean(i),...
                                                               FeedbackWaitingTimeStats.Std(i)),...
                                                       'FontSize', 10,...
                                                       'HorizontalAlignment', 'center');
            end
            FeedbackWaitingTimeStatsText(i+1) = text(FeedbackWaitingTimeAxes, 0, FeedbackWaitingTimeAxes.YLim(2) * -0.4,...
                                                     sprintf('Count\nMean\nStd'),...
                                                     'FontSize', 10,...
                                                     'HorizontalAlignment', 'right');

            %% Invested time per cue across session
            TrialInvestedTimeAxes = axes(FigHandle, 'Position', [0.01    0.60    0.48    0.11]);
            hold(TrialInvestedTimeAxes, 'on');
            if ~isempty(ChoiceLeft) && ~all(isnan(ChoiceLeft))
                for i = 1:length(RewardProbCategories)
                    % NotBaited invested time per cue across session
                    CueSortedNotBaitedIdx = find(TrialDataTable.NotBaited & TrialDataTable.TrialRewardProb == RewardProbCategories(i));
                    TrialNotBaitedInvestedTimePlot(i) = plot(TrialInvestedTimeAxes, CueSortedNotBaitedIdx, TrialDataTable.FeedbackWaitingTime(CueSortedNotBaitedIdx),...
                                                             'Marker', '.',...
                                                             'MarkerSize', 4,...
                                                             'MarkerEdgeColor', 1-CuedPalette(i,:),...
                                                             'Color', CuedPalette(i,:));

                    [RValue, PValue] = corrcoef(TrialNotBaitedInvestedTimePlot(i).XData, TrialNotBaitedInvestedTimePlot(i).YData);
                    CueSortedNotBaitedRvalue(i) = RValue(1, 2);
                    CueSortedNotBaitedPValue(i) = PValue(1, 2);

                    Label{i} = sprintf('P(r) = %3.1f\nR = %5.2f\np = %6.3f',...
                                       RewardProbCategories(i),...
                                       CueSortedNotBaitedRvalue(i),...
                                       CueSortedNotBaitedPValue(i));
                end

                for i = 1:length(RewardProbCategories) % plot all NotBaited first for legend
                    % Incorrect invested time per Trial RewardProb (not Choice RewardProb) across session
                    CueSortedIncorrectChoiceIdx = find(TrialDataTable.IncorrectChoice == 1 & TrialDataTable.TrialRewardProb == RewardProbCategories(i));
                    if isempty(CueSortedIncorrectChoiceIdx)
                        continue
                    end
                    TrialIncorrectChoiceInvestedTimePlot(i) = plot(TrialInvestedTimeAxes, CueSortedIncorrectChoiceIdx, TrialDataTable.FeedbackWaitingTime(CueSortedIncorrectChoiceIdx),...
                                                                   'Marker', '.',...
                                                                   'MarkerSize', 4,...
                                                                   'MarkerEdgeColor', scarlet .* CuedPalette(i,:),...
                                                                   'LineStyle', 'none');
                    
                end
                
                TrialInvestedTimeLegend = legend(TrialInvestedTimeAxes, Label,...
                                                 'Position', [0.01    0.55    0.28    0.05],...
                                                 'NumColumns', 2);

                set(TrialInvestedTimeAxes,...
                    'TickDir', 'out',...
                    'Xlim', TrialOverviewAxes.XLim,...
                    'XTickLabel', [],...
                    'XAxisLocation', 'top',...
                    'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
                    'YAxisLocation', 'right',...
                    'FontSize', 10);
                % ylabel('Invested Time (s)')
                disp('YOu aRE a bEAutIFul HUmaN BeiNG.')
                % title('Block switching behaviour')
            end
            
            %% Last Early Withdrawal (EW) (and have to be without choice, due to either loop or no decision)
            LastEWTimeAxes = axes(FigHandle, 'Position', [0.76    0.40    0.22    0.11]);
            hold(LastEWTimeAxes, 'on');
            
            LastChoice = [0 ChoiceLeft(1:end-1)];
            TrialDataTable = addvars(TrialDataTable, LastChoice');
            TrialDataTable.Properties.VariableNames{end} = 'LastChoice';
            
            LastEW = [0 EarlyWithdrawal(1:end-1)];
            TrialDataTable = addvars(TrialDataTable, LastEW');
            TrialDataTable.Properties.VariableNames{end} = 'LastEarlyWithdrawal';

            LastEWTrialData = TrialDataTable(TrialDataTable.NotBaited==1 & TrialDataTable.LastEarlyWithdrawal==1 & isnan(TrialDataTable.LastChoice), :);
            LastEWTimeSwarmchart = [];
            for i = 1:length(RewardProbCategories)
                LastEWTimeSwarmchart(i) = swarmchart(LastEWTimeAxes, LastEWTrialData(LastEWTrialData.TrialRewardProb == RewardProbCategories(i), :),...
                                                     'TrialRewardProb', 'FeedbackWaitingTime',...
                                                     'Marker', '.',...
                                                     'MarkerEdgeColor', CuedPalette(i,:),...
                                                     'XJitter', 'density',...
                                                     'XJitterWidth', 0.15);
            end
            
            set(LastEWTimeAxes,...
                'TickDir', 'out',...
                'YTickLabel', '',...
                'XLim', [0, 1],...
                'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
                'FontSize', 10);
            set(LastEWTimeAxes.XLabel,...
                'String', '')
            set(LastEWTimeAxes.YLabel,...
                'String', '')
            title('Last EarlyWithdrawal', 'FontSize', 12)
            
            LastEWTimeBoxchart = boxchart(LastEWTimeAxes, LastEWTrialData.TrialRewardProb, LastEWTrialData.FeedbackWaitingTime);
            set(LastEWTimeBoxchart,...
                'BoxWidth', 0.05,...
                'BoxFaceColor', 'k',...
                'BoxFaceAlpha', 0,...
                'MarkerStyle', 'none',...
                'LineWidth', 0.2);
            
            LastEWTimeStats = grpstats(LastEWTrialData,...
                                       'TrialRewardProb', {'mean', 'std'},...
                                       'DataVars', 'FeedbackWaitingTime',...
                                       'VarNames', {'Pr', 'Count', 'Mean', 'Std'});
            
            LastEWTimeStatsText = [];
            for i = 1:length(LastEWTimeStats.Pr)
                LastEWTimeStatsText(i) = text(LastEWTimeAxes, RewardProbCategories(i), FeedbackWaitingTimeAxes.YLim(2) * -0.4,...
                                              sprintf('%3.0f\n%5.3f\n%5.3f',...
                                                      LastEWTimeStats.Count(i),...
                                                      LastEWTimeStats.Mean(i),...
                                                      LastEWTimeStats.Std(i)),...
                                              'FontSize', 10,...
                                              'HorizontalAlignment', 'center');
            end
            % FeedbackWaitingTimeStatsText(i+1) = text(FeedbackWaitingTimeAxes, 0, FeedbackWaitingTimeAxes.YLim(2) * -0.4,...
            %                                          sprintf('Count\nMean\nStd'),...
            %                                          'FontSize', 10,...
            %                                          'HorizontalAlignment', 'right');

            %% Last Not-Early Withdrawal (NotEW) (Also need to be with a choice, so that no decision is not involved)
            LastNotEWTimeAxes = axes(FigHandle, 'Position', [0.52    0.40    0.22    0.11]);
            hold(LastNotEWTimeAxes, 'on');
            
            LastNotEWTrialData = TrialDataTable(TrialDataTable.NotBaited==1 & TrialDataTable.LastEarlyWithdrawal==0 & ~isnan(TrialDataTable.LastChoice), :);
            LastNotEWTimeSwarmchart = [];
            for i = 1:length(RewardProbCategories)
                LastNotEWTimeSwarmchart(i) = swarmchart(LastNotEWTimeAxes, LastNotEWTrialData(LastNotEWTrialData.TrialRewardProb == RewardProbCategories(i), :),...
                                                        'TrialRewardProb', 'FeedbackWaitingTime',...
                                                        'Marker', '.',...
                                                        'MarkerEdgeColor', CuedPalette(i,:),...
                                                        'XJitter', 'density',...
                                                        'XJitterWidth', 0.15);
            end
            
            set(LastNotEWTimeAxes,...
                'TickDir', 'out',...
                'YTickLabel', '',...
                'XLim', [0, 1],...
                'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
                'FontSize', 10);
            set(LastNotEWTimeAxes.XLabel,...
                'String', '')
            set(LastNotEWTimeAxes.YLabel,...
                'String', '')
            title('Last Not EarlyWithdrawal', 'FontSize', 12)
            
            LastNotEWTimeBoxchart = boxchart(LastNotEWTimeAxes, LastNotEWTrialData.TrialRewardProb, LastNotEWTrialData.FeedbackWaitingTime);
            set(LastNotEWTimeBoxchart,...
                'BoxWidth', 0.05,...
                'BoxFaceColor', 'k',...
                'BoxFaceAlpha', 0,...
                'MarkerStyle', 'none',...
                'LineWidth', 0.2);
            
            LastNotEWTimeStats = grpstats(LastNotEWTrialData,...
                                          'TrialRewardProb', {'mean', 'std'},...
                                          'DataVars', 'FeedbackWaitingTime',...
                                          'VarNames', {'Pr', 'Count', 'Mean', 'Std'});
            
            LastNotEWTimeStatsText = [];
            for i = 1:length(LastNotEWTimeStats.Pr)
                LastNotEWTimeStatsText(i) = text(LastNotEWTimeAxes, RewardProbCategories(i), FeedbackWaitingTimeAxes.YLim(2) * -0.4,...
                                                 sprintf('%3.0f\n%5.3f\n%5.3f',...
                                                         LastNotEWTimeStats.Count(i),...
                                                         LastNotEWTimeStats.Mean(i),...
                                                         LastNotEWTimeStats.Std(i)),...
                                                 'FontSize', 10,...
                                                 'HorizontalAlignment', 'center');
            end
            LastNotEWTimeStatsText(i+1) = text(LastNotEWTimeAxes, 0, LastNotEWTimeAxes.YLim(2) * -0.4,...
                                               sprintf('Count\nMean\nStd'),...
                                               'FontSize', 10,...
                                               'HorizontalAlignment', 'right');

            %% Last Rewarded
            LastRewardedTimeAxes = axes(FigHandle, 'Position', [0.76    0.20    0.22    0.11]);
            hold(LastRewardedTimeAxes, 'on');
            
            LastRewarded = [0 Rewarded(1:end-1)];
            TrialDataTable = addvars(TrialDataTable, LastRewarded');
            TrialDataTable.Properties.VariableNames{end} = 'LastRewarded';

            LastRewardedTrialData = TrialDataTable(TrialDataTable.NotBaited==1 & TrialDataTable.LastRewarded==1, :);
            LastRewardedTimeSwarmchart = [];
            for i = 1:length(RewardProbCategories)
                LastRewardedTimeSwarmchart(i) = swarmchart(LastRewardedTimeAxes, LastRewardedTrialData(LastRewardedTrialData.TrialRewardProb == RewardProbCategories(i), :),...
                                                           'TrialRewardProb', 'FeedbackWaitingTime',...
                                                           'Marker', '.',...
                                                           'MarkerEdgeColor', CuedPalette(i,:),...
                                                           'XJitter', 'density',...
                                                           'XJitterWidth', 0.15);
            end
            
            set(LastRewardedTimeAxes,...
                'TickDir', 'out',...
                'YTickLabel', '',...
                'XLim', [0, 1],...
                'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
                'FontSize', 10);
            set(LastRewardedTimeAxes.XLabel,...
                'String', '')
            set(LastRewardedTimeAxes.YLabel,...
                'String', '')
            title('Last Rewarded', 'FontSize', 12)
            
            LastRewardedTimeBoxchart = boxchart(LastRewardedTimeAxes, LastRewardedTrialData.TrialRewardProb, LastRewardedTrialData.FeedbackWaitingTime);
            set(LastRewardedTimeBoxchart,...
                'BoxWidth', 0.05,...
                'BoxFaceColor', 'k',...
                'BoxFaceAlpha', 0,...
                'MarkerStyle', 'none',...
                'LineWidth', 0.2);
            
            LastRewardedTimeStats = grpstats(LastRewardedTrialData,...
                                             'TrialRewardProb', {'mean', 'std'},...
                                             'DataVars', 'FeedbackWaitingTime',...
                                             'VarNames', {'Pr', 'Count', 'Mean', 'Std'});
            
            LastRewardedTimeStatsText = [];
            for i = 1:length(LastRewardedTimeStats.Pr)
                LastRewardedTimeStatsText(i) = text(LastRewardedTimeAxes, RewardProbCategories(i), FeedbackWaitingTimeAxes.YLim(2) * -0.4,...
                                                    sprintf('%3.0f\n%5.3f\n%5.3f',...
                                                            LastRewardedTimeStats.Count(i),...
                                                            LastRewardedTimeStats.Mean(i),...
                                                            LastRewardedTimeStats.Std(i)),...
                                                    'FontSize', 10,...
                                                    'HorizontalAlignment', 'center');
            end
            % FeedbackWaitingTimeStatsText(i+1) = text(FeedbackWaitingTimeAxes, 0, FeedbackWaitingTimeAxes.YLim(2) * -0.4,...
            %                                          sprintf('Count\nMean\nStd'),...
            %                                          'FontSize', 10,...
            %                                          'HorizontalAlignment', 'right');

            %% Last Not Rewarded (Already means with a choice)
            LastNotRewardedTimeAxes = axes(FigHandle, 'Position', [0.52    0.20    0.22    0.11]);
            hold(LastNotRewardedTimeAxes, 'on');
            
            LastNotRewardedTrialData = TrialDataTable(TrialDataTable.NotBaited==1 & TrialDataTable.LastRewarded==0, :);
            LastNotRewardedTimeSwarmchart = [];
            for i = 1:length(RewardProbCategories)
                LastNotRewardedTimeSwarmchart(i) = swarmchart(LastNotRewardedTimeAxes, LastNotRewardedTrialData(LastNotRewardedTrialData.TrialRewardProb == RewardProbCategories(i), :),...
                                                              'TrialRewardProb', 'FeedbackWaitingTime',...
                                                              'Marker', '.',...
                                                              'MarkerEdgeColor', CuedPalette(i,:),...
                                                              'XJitter', 'density',...
                                                              'XJitterWidth', 0.15);
            end
            
            set(LastNotRewardedTimeAxes,...
                'TickDir', 'out',...
                'YTickLabel', '',...
                'XLim', [0, 1],...
                'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
                'FontSize', 10);
            set(LastNotRewardedTimeAxes.XLabel,...
                'String', '')
            set(LastNotRewardedTimeAxes.YLabel,...
                'String', '')
            title('Last Not Rewarded', 'FontSize', 12)
            
            LastNotRewardedTimeBoxchart = boxchart(LastNotRewardedTimeAxes, LastNotRewardedTrialData.TrialRewardProb, LastNotRewardedTrialData.FeedbackWaitingTime);
            set(LastNotRewardedTimeBoxchart,...
                'BoxWidth', 0.05,...
                'BoxFaceColor', 'k',...
                'BoxFaceAlpha', 0,...
                'MarkerStyle', 'none',...
                'LineWidth', 0.2);
            
            LastNotRewardedTimeStats = grpstats(LastNotRewardedTrialData,...
                                                'TrialRewardProb', {'mean', 'std'},...
                                                'DataVars', 'FeedbackWaitingTime',...
                                                'VarNames', {'Pr', 'Count', 'Mean', 'Std'});
            
            LastNotRewardedTimeStatsText = [];
            for i = 1:length(LastNotRewardedTimeStats.Pr)
                LastNotRewardedTimeStatsText(i) = text(LastNotRewardedTimeAxes, RewardProbCategories(i), FeedbackWaitingTimeAxes.YLim(2) * -0.4,...
                                                 sprintf('%3.0f\n%5.3f\n%5.3f',...
                                                         LastNotRewardedTimeStats.Count(i),...
                                                         LastNotRewardedTimeStats.Mean(i),...
                                                         LastNotRewardedTimeStats.Std(i)),...
                                                 'FontSize', 10,...
                                                 'HorizontalAlignment', 'center');
            end
            LastNotRewardedTimeStatsText(i+1) = text(LastNotRewardedTimeAxes, 0, LastNotRewardedTimeAxes.YLim(2) * -0.4,...
                                               sprintf('Count\nMean\nStd'),...
                                               'FontSize', 10,...
                                               'HorizontalAlignment', 'right');

            %% Model prediction of NotBaited Invested Time
            PredictedNotBaitedInvestedTimeAxes = axes(FigHandle, 'Position', [0.09    0.09    0.18    0.16]);
            hold(PredictedNotBaitedInvestedTimeAxes, 'on');
            
            if ~isempty(ChoiceLeft) && ~all(isnan(ChoiceLeft))
                % Estimated Reward Rate is defined here as geometrically weighted
                % rewarded trial history
                DiscountRate = 1-exp(-1); % arbitary
                HistoryKernelLength = 10; % with RewardRate ~<= 20% trials, only once in six trials is rewarded
                Kernel = flip(DiscountRate.^(0:HistoryKernelLength-1));
                RewardedHistory = repmat(Rewarded == 1, HistoryKernelLength, 1);
                for i = 1:HistoryKernelLength
                    RewardedHistory(i, :) = circshift(RewardedHistory(i, :), HistoryKernelLength + 1 - i);
                    RewardedHistory(i, 1:HistoryKernelLength + 1 - i) = 0;
                end
                
                EstimatedRewardRate = Kernel * RewardedHistory;
                ConsumedWaterPercentage = cumsum(Rewarded == 1)./sum(Rewarded==1);

                XData = [TrialRewardProb; ConsumedWaterPercentage; EstimatedRewardRate; LastEW]';
                GLM = fitglm(XData(NotBaited, :), FeedbackWaitingTime(NotBaited)',...
                             'reciprocal(y) ~ 1 + x1*x3 + x2 + x4',...
                             'Distribution', 'gamma') % use normal for now, but gamma may be better for non-zero
                
                % Plot prediction based on current best model
                PredictedNotBaitedInvestedTimeSwarmchart = [];
                for i = 1:length(RewardProbCategories)
                    Predictor = XData(NotBaited' & XData(:,1)==RewardProbCategories(i), :);
                    PredictedTI = predict(GLM, Predictor);
                    PredictedNotBaitedInvestedSwarmchart(i) = ...
                        swarmchart(PredictedNotBaitedInvestedTimeAxes,...
                                   Predictor(:,1), PredictedTI,...
                                   'Marker', '.',...
                                   'MarkerEdgeColor', CuedPalette(i,:),...
                                   'XJitter', 'density',...
                                   'XJitterWidth', 0.15);
                end
                
                set(PredictedNotBaitedInvestedTimeAxes,...
                    'TickDir', 'out',...
                    'XLim', [0, 1],...
                    'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
                    'FontSize', 10);
                % title('NotBaited Invested Time', 'FontSize', 12)
                xlabel(PredictedNotBaitedInvestedTimeAxes,...
                       'Reward Prob',...
                       'FontSize', 12,...
                       'FontWeight', 'bold')
                ylabel(PredictedNotBaitedInvestedTimeAxes,...
                       sprintf('Predicted NotBaited\nInvested Time (s)'),...
                       'FontSize', 12,...
                       'FontWeight', 'bold')
                
                PredictedNotBaitedInvestedTimeBoxchart = ...
                    boxchart(PredictedNotBaitedInvestedTimeAxes,...
                             XData(NotBaited, 1), predict(GLM, XData(NotBaited, :)));
                set(PredictedNotBaitedInvestedTimeBoxchart,...
                    'BoxWidth', 0.05,...
                    'BoxFaceColor', 'k',...
                    'BoxFaceAlpha', 0,...
                    'MarkerStyle', 'none',...
                    'LineWidth', 0.2);
                
                disp('YOu aRE fuNNy.')
%                 FeedbackWaitingTimeStats = grpstats(NotBaitedTrialData,...
%                                                     'TrialRewardProb', {'mean', 'std'},...
%                                                     'DataVars', 'FeedbackWaitingTime',...
%                                                     'VarNames', {'Pr', 'Count', 'Mean', 'Std'});
%                 
%                 FeedbackWaitingTimeStatsText = [];
%                 for i = 1:length(FeedbackWaitingTimeStats.Pr)
%                     FeedbackWaitingTimeStatsText(i) = text(FeedbackWaitingTimeAxes, RewardProbCategories(i), FeedbackWaitingTimeAxes.YLim(2) * -0.4,...
%                                                            sprintf('%3.0f\n%5.3f\n%5.3f',...
%                                                                    FeedbackWaitingTimeStats.Count(i),...
%                                                                    FeedbackWaitingTimeStats.Mean(i),...
%                                                                     FeedbackWaitingTimeStats.Std(i)),...
%                                                            'FontSize', 10,...
%                                                            'HorizontalAlignment', 'center');
%                 end
%                 FeedbackWaitingTimeStatsText(i+1) = text(FeedbackWaitingTimeAxes, 0, FeedbackWaitingTimeAxes.YLim(2) * -0.4,...
%                                                          sprintf('Count\nMean\nStd'),...
%                                                          'FontSize', 10,...
%                                                          'HorizontalAlignment', 'right');
            end

            %{
            %%%%% Trying things out %%%%%
            %% Inter-reward interval across session
            TrialInterRewardIntervalHandle = axes(FigHandle, 'Position', [0.01    0.50    0.48    0.09]);
            hold(TrialInterRewardIntervalHandle, 'on');
            if ~isempty(ChoiceLeft) && ~all(isnan(ChoiceLeft))
                FirstDrinkingTimestamp = FirstDrinkingTime + SessionData.TrialStartTimestamp;
                InterRewardInterval = FirstDrinkingTimestamp(RewardedndxTrial(2:end)) - FirstDrinkingTimestamp(RewardedndxTrial(1:end-1));
                InterRewardInterval = [FirstDrinkingTimestamp(RewardedndxTrial(1)) InterRewardInterval];
                TrialInterRewardIntervalPlotHandle = plot(TrialInterRewardIntervalHandle, RewardedndxTrial, InterRewardInterval,...
                                                          'Marker', '.',...
                                                          'MarkerSize', 4,...
                                                          'MarkerEdgeColor', azure,...
                                                          'LineStyle', 'none');
                
                set(TrialInterRewardIntervalHandle,...
                    'TickDir', 'in',...
                    'Xlim', TrialOverviewHandle.XLim,...
                    'XTickLabel', [],...
                    'XAxisLocation', 'bottom',...
                    'YLim', [0, 350],...
                    'YAxisLocation', 'right',...
                    'FontSize', 10);
                ylabel('Inter-reward Time (s)')
            end
            
            %% Correlation between weighted reward history and NotBaited Invested Time
            InvestedTimeRewardRateAxes = axes(FigHandle, 'Position', [0.07    0.09    0.18    0.16]);
            hold(InvestedTimeRewardRateAxes, 'on');
            
            if ~isempty(ChoiceLeft) && ~all(isnan(ChoiceLeft))
                % Estimated Reward Rate is defined here as geometrically weighted
                % rewarded trial history
                DiscountRate = 0.9; % arbitary
                HistoryKernelLength = 10; % with RewardRate ~<= 20% trials, only once in six trials is rewarded
                Kernel = flip(DiscountRate.^(0:HistoryKernelLength-1));
                RewardedHistory = repmat(Rewarded == 1, HistoryKernelLength, 1);
                TrialCueHistory = repmat(TrialRewardProb, HistoryKernelLength, 1);
                for i = 1:HistoryKernelLength
                    RewardedHistory(i, :) = circshift(RewardedHistory(i, :), HistoryKernelLength + 1 - i);
                    RewardedHistory(i, 1:HistoryKernelLength + 1 - i) = 0;
                    
                    TrialCueHistory(i, :) = circshift(TrialCueHistory(i, :), HistoryKernelLength - i);
                    TrialCueHistory(i, 1:HistoryKernelLength - i) = 0;
                end
                
                EstimatedRewardRate = Kernel * RewardedHistory;
                EstimatedRewardLandscape = Kernel * TrialCueHistory;
                
                for i = 1:length(RewardProbCategories)
                    CueSortedNotBaitedIdx = find(TrialDataTable.NotBaited & TrialDataTable.TrialRewardProb == RewardProbCategories(i));
                    NotBaitedInvestedTimeRewardRateScatterPlot(i) = scatter(InvestedTimeRewardRateAxes, EstimatedRewardRate(CueSortedNotBaitedIdx), FeedbackWaitingTime(CueSortedNotBaitedIdx), 16,...
                                                                            'Marker', 'o',...
                                                                            'MarkerEdgeColor', 1-CuedPalette(i,:),...
                                                                            'MarkerFaceColor', CuedPalette(i,:));
                    
%                 CueSortedIncorrectChoiceIdx = find(TrialDataTable.IncorrectChoice == 1 & TrialDataTable.TrialRewardProb == RewardProbCategories(i));
%                 if isempty(CueSortedIncorrectChoiceIdx)
%                     continue
%                 end
%                 IncorrectChoiceInvestedTimeRewardRateScatterPlot(i) = plot(TrialInvestedTimeHandle, CueSortedIncorrectChoiceIdx, TrialDataTable.FeedbackWaitingTime(CueSortedIncorrectChoiceIdx),...
%                                                                      'Marker', '.',...
%                                                                      'MarkerEdgeColor', scarlet .* CuedPalette(i,:),...
%                                                                      'LineStyle', 'none');
                end
            end
            
            set(InvestedTimeRewardRateAxes,...
                'XLim', [-0.5 5],...
                'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
                'FontSize', 10)
            xlabel('Estimated Reward Rate', 'FontSize', 12, 'FontWeight', 'bold')
            ylabel('NotBaited Invested Time(s)', 'FontSize', 12, 'FontWeight', 'bold')
            disp('YOu aRE fuNNy.')
            %}
        end % end if nTrials <= 2000
        
    case 'BlockCued' % currently only designed for 1-arm
        %% 
        title(TrialOverviewAxes, strcat(num2str(Animal), '\_', Date, '\_BlockCued'))
        
    case 'CuedBlockRatio' % currently only designed for 1-arm
        %% 
        title(TrialOverviewAxes, strcat(num2str(Animal), '\_', Date, '\_CuedBlockRatio'))

        %% Single-session analysis
        if nTrials <= 2500 && nTrials >= 200
            %% time investment for NotBaited per cue/choice risk
            FeedbackWaitingTimeAxes = axes(FigHandle, 'Position', [0.76    0.60    0.22    0.11]);
            hold(FeedbackWaitingTimeAxes, 'on');
            
            NotBaitedTrialData = TrialDataTable(TrialDataTable.NotBaited==1, :);
            FeedbackWaitingTimeSwarmchart = [];
            for i = 1:length(RewardProbCategories)
                FeedbackWaitingTimeSwarmchart(i) = swarmchart(FeedbackWaitingTimeAxes, NotBaitedTrialData(NotBaitedTrialData.TrialRewardProb == RewardProbCategories(i), :),...
                                                              'TrialRewardProb', 'FeedbackWaitingTime',...
                                                              'Marker', '.',...
                                                              'MarkerEdgeColor', CuedPalette(i,:),...
                                                              'XJitter', 'density',...
                                                              'XJitterWidth', 0.15);
            end
            
            set(FeedbackWaitingTimeAxes,...
                'TickDir', 'out',...
                'XLim', [0, 1],...
                'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
                'FontSize', 10);
            set(FeedbackWaitingTimeAxes.XLabel,...
                'String', '')
            ylabel(FeedbackWaitingTimeAxes, sprintf('NotBaited\nInvested Time (s)'), 'FontSize', 12, 'FontWeight', 'bold')
            
            FeedbackWaitingTimeBoxchart = boxchart(FeedbackWaitingTimeAxes, NotBaitedTrialData.TrialRewardProb, NotBaitedTrialData.FeedbackWaitingTime);
            set(FeedbackWaitingTimeBoxchart,...
                'BoxWidth', 0.05,...
                'BoxFaceColor', 'k',...
                'BoxFaceAlpha', 0,...
                'MarkerStyle', 'none',...
                'LineWidth', 0.2);
            
            FeedbackWaitingTimeStats = grpstats(NotBaitedTrialData,...
                                                'TrialRewardProb', {'mean', 'std'},...
                                                'DataVars', 'FeedbackWaitingTime',...
                                                'VarNames', {'Pr', 'Count', 'Mean', 'Std'});
            
            FeedbackWaitingTimeStatsText = [];
            for i = 1:length(FeedbackWaitingTimeStats.Pr)
                FeedbackWaitingTimeStatsText(i) = text(FeedbackWaitingTimeAxes, RewardProbCategories(i), FeedbackWaitingTimeAxes.YLim(2) * -0.4,...
                                                       sprintf('%3.0f\n%5.3f\n%5.3f',...
                                                               FeedbackWaitingTimeStats.Count(i),...
                                                               FeedbackWaitingTimeStats.Mean(i),...
                                                               FeedbackWaitingTimeStats.Std(i)),...
                                                       'FontSize', 10,...
                                                       'HorizontalAlignment', 'center');
            end
            FeedbackWaitingTimeStatsText(i+1) = text(FeedbackWaitingTimeAxes, 0, FeedbackWaitingTimeAxes.YLim(2) * -0.4,...
                                                     sprintf('Count\nMean\nStd'),...
                                                     'FontSize', 10,...
                                                     'HorizontalAlignment', 'right');

            %% Invested time per cue across session
            TrialInvestedTimeAxes = axes(FigHandle, 'Position', [0.01    0.60    0.48    0.11]);
            hold(TrialInvestedTimeAxes, 'on');
            if ~isempty(ChoiceLeft) && ~all(isnan(ChoiceLeft))
                for i = 1:length(RewardProbCategories)
                    % NotBaited invested time per cue across session
                    CueSortedNotBaitedIdx = find(TrialDataTable.NotBaited & TrialDataTable.TrialRewardProb == RewardProbCategories(i));
                    TrialNotBaitedInvestedTimePlot(i) = plot(TrialInvestedTimeAxes, CueSortedNotBaitedIdx, TrialDataTable.FeedbackWaitingTime(CueSortedNotBaitedIdx),...
                                                             'Marker', '.',...
                                                             'MarkerSize', 4,...
                                                             'MarkerEdgeColor', 1-CuedPalette(i,:),...
                                                             'Color', CuedPalette(i,:));

                    [RValue, PValue] = corrcoef(TrialNotBaitedInvestedTimePlot(i).XData, TrialNotBaitedInvestedTimePlot(i).YData);
                    CueSortedNotBaitedRvalue(i) = RValue(1, 2);
                    CueSortedNotBaitedPValue(i) = PValue(1, 2);

                    Label{i} = sprintf('P(r) = %3.1f\nR = %5.2f\np = %6.3f',...
                                       RewardProbCategories(i),...
                                       CueSortedNotBaitedRvalue(i),...
                                       CueSortedNotBaitedPValue(i));
                end

                for i = 1:length(RewardProbCategories) % plot all NotBaited first for legend
                    % Incorrect invested time per Trial RewardProb (not Choice RewardProb) across session
                    CueSortedIncorrectChoiceIdx = find(TrialDataTable.IncorrectChoice == 1 & TrialDataTable.TrialRewardProb == RewardProbCategories(i));
                    if isempty(CueSortedIncorrectChoiceIdx)
                        continue
                    end
                    TrialIncorrectChoiceInvestedTimePlot(i) = plot(TrialInvestedTimeAxes, CueSortedIncorrectChoiceIdx, TrialDataTable.FeedbackWaitingTime(CueSortedIncorrectChoiceIdx),...
                                                                   'Marker', '.',...
                                                                   'MarkerSize', 4,...
                                                                   'MarkerEdgeColor', scarlet .* CuedPalette(i,:),...
                                                                   'LineStyle', 'none');
                    
                end
                
                TrialInvestedTimeLegend = legend(TrialInvestedTimeAxes, Label,...
                                                 'Position', [0.01    0.55    0.28    0.05],...
                                                 'NumColumns', 2);

                set(TrialInvestedTimeAxes,...
                    'TickDir', 'out',...
                    'Xlim', TrialOverviewAxes.XLim,...
                    'XTickLabel', [],...
                    'XAxisLocation', 'top',...
                    'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
                    'YAxisLocation', 'right',...
                    'FontSize', 10);
                % ylabel('Invested Time (s)')
                disp('YOu aRE a bEAutIFul HUmaN BeiNG.')
                % title('Block switching behaviour')
            end
            
            %% Last Early Withdrawal (EW) (and have to be without choice, due to either loop or no decision)
            LastEWTimeAxes = axes(FigHandle, 'Position', [0.76    0.40    0.22    0.11]);
            hold(LastEWTimeAxes, 'on');
            
            LastChoice = [0 ChoiceLeft(1:end-1)];
            TrialDataTable = addvars(TrialDataTable, LastChoice');
            TrialDataTable.Properties.VariableNames{end} = 'LastChoice';
            
            LastEW = [0 EarlyWithdrawal(1:end-1)];
            TrialDataTable = addvars(TrialDataTable, LastEW');
            TrialDataTable.Properties.VariableNames{end} = 'LastEarlyWithdrawal';

            LastEWTrialData = TrialDataTable(TrialDataTable.NotBaited==1 & TrialDataTable.LastEarlyWithdrawal==1 & isnan(TrialDataTable.LastChoice), :);
            LastEWTimeSwarmchart = [];
            for i = 1:length(RewardProbCategories)
                LastEWTimeSwarmchart(i) = swarmchart(LastEWTimeAxes, LastEWTrialData(LastEWTrialData.TrialRewardProb == RewardProbCategories(i), :),...
                                                     'TrialRewardProb', 'FeedbackWaitingTime',...
                                                     'Marker', '.',...
                                                     'MarkerEdgeColor', CuedPalette(i,:),...
                                                     'XJitter', 'density',...
                                                     'XJitterWidth', 0.15);
            end
            
            set(LastEWTimeAxes,...
                'TickDir', 'out',...
                'YTickLabel', '',...
                'XLim', [0, 1],...
                'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
                'FontSize', 10);
            set(LastEWTimeAxes.XLabel,...
                'String', '')
            set(LastEWTimeAxes.YLabel,...
                'String', '')
            title('Last EarlyWithdrawal', 'FontSize', 12)
            
            LastEWTimeBoxchart = boxchart(LastEWTimeAxes, LastEWTrialData.TrialRewardProb, LastEWTrialData.FeedbackWaitingTime);
            set(LastEWTimeBoxchart,...
                'BoxWidth', 0.05,...
                'BoxFaceColor', 'k',...
                'BoxFaceAlpha', 0,...
                'MarkerStyle', 'none',...
                'LineWidth', 0.2);
            
            LastEWTimeStats = grpstats(LastEWTrialData,...
                                       'TrialRewardProb', {'mean', 'std'},...
                                       'DataVars', 'FeedbackWaitingTime',...
                                       'VarNames', {'Pr', 'Count', 'Mean', 'Std'});
            
            LastEWTimeStatsText = [];
            for i = 1:length(LastEWTimeStats.Pr)
                LastEWTimeStatsText(i) = text(LastEWTimeAxes, RewardProbCategories(i), FeedbackWaitingTimeAxes.YLim(2) * -0.4,...
                                              sprintf('%3.0f\n%5.3f\n%5.3f',...
                                                      LastEWTimeStats.Count(i),...
                                                      LastEWTimeStats.Mean(i),...
                                                      LastEWTimeStats.Std(i)),...
                                              'FontSize', 10,...
                                              'HorizontalAlignment', 'center');
            end
            % FeedbackWaitingTimeStatsText(i+1) = text(FeedbackWaitingTimeAxes, 0, FeedbackWaitingTimeAxes.YLim(2) * -0.4,...
            %                                          sprintf('Count\nMean\nStd'),...
            %                                          'FontSize', 10,...
            %                                          'HorizontalAlignment', 'right');
            
            %% Last Not-Early Withdrawal (NotEW) (Also need to be with a choice, so that no decision is not involved)
            LastNotEWTimeAxes = axes(FigHandle, 'Position', [0.52    0.40    0.22    0.11]);
            hold(LastNotEWTimeAxes, 'on');
            
            LastNotEWTrialData = TrialDataTable(TrialDataTable.NotBaited==1 & TrialDataTable.LastEarlyWithdrawal==0 & ~isnan(TrialDataTable.LastChoice), :);
            LastNotEWTimeSwarmchart = [];
            for i = 1:length(RewardProbCategories)
                LastNotEWTimeSwarmchart(i) = swarmchart(LastNotEWTimeAxes, LastNotEWTrialData(LastNotEWTrialData.TrialRewardProb == RewardProbCategories(i), :),...
                                                        'TrialRewardProb', 'FeedbackWaitingTime',...
                                                        'Marker', '.',...
                                                        'MarkerEdgeColor', CuedPalette(i,:),...
                                                        'XJitter', 'density',...
                                                        'XJitterWidth', 0.15);
            end
            
            set(LastNotEWTimeAxes,...
                'TickDir', 'out',...
                'YTickLabel', '',...
                'XLim', [0, 1],...
                'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
                'FontSize', 10);
            set(LastNotEWTimeAxes.XLabel,...
                'String', '')
            set(LastNotEWTimeAxes.YLabel,...
                'String', '')
            title('Last Not EarlyWithdrawal', 'FontSize', 12)
            
            LastNotEWTimeBoxchart = boxchart(LastNotEWTimeAxes, LastNotEWTrialData.TrialRewardProb, LastNotEWTrialData.FeedbackWaitingTime);
            set(LastNotEWTimeBoxchart,...
                'BoxWidth', 0.05,...
                'BoxFaceColor', 'k',...
                'BoxFaceAlpha', 0,...
                'MarkerStyle', 'none',...
                'LineWidth', 0.2);
            
            LastNotEWTimeStats = grpstats(LastNotEWTrialData,...
                                          'TrialRewardProb', {'mean', 'std'},...
                                          'DataVars', 'FeedbackWaitingTime',...
                                          'VarNames', {'Pr', 'Count', 'Mean', 'Std'});
            
            LastNotEWTimeStatsText = [];
            for i = 1:length(LastNotEWTimeStats.Pr)
                LastNotEWTimeStatsText(i) = text(LastNotEWTimeAxes, RewardProbCategories(i), FeedbackWaitingTimeAxes.YLim(2) * -0.4,...
                                                 sprintf('%3.0f\n%5.3f\n%5.3f',...
                                                         LastNotEWTimeStats.Count(i),...
                                                         LastNotEWTimeStats.Mean(i),...
                                                         LastNotEWTimeStats.Std(i)),...
                                                 'FontSize', 10,...
                                                 'HorizontalAlignment', 'center');
            end
            LastNotEWTimeStatsText(i+1) = text(LastNotEWTimeAxes, 0, LastNotEWTimeAxes.YLim(2) * -0.4,...
                                               sprintf('Count\nMean\nStd'),...
                                               'FontSize', 10,...
                                               'HorizontalAlignment', 'right');

            %% time investment for NotBaited per cue/choice risk in rich block
            RichBlockAxes = axes(FigHandle, 'Position', [0.76    0.20    0.22    0.11]);
            hold(RichBlockAxes, 'on');
            
            RichBlockTrialData = TrialDataTable(TrialDataTable.NotBaited == 1 &...
                                                TrialDataTable.BlockNumber ~= 1 &...
                                                mod(TrialDataTable.BlockNumber, 2) == 0 &...
                                                TrialDataTable.BlockTrialNumber > 15, :);
            RichBlockSwarmchart = [];
            for i = 1:length(RewardProbCategories)
                RichBlockSwarmchart(i) = swarmchart(RichBlockAxes, RichBlockTrialData(RichBlockTrialData.TrialRewardProb == RewardProbCategories(i), :),...
                                                    'TrialRewardProb', 'FeedbackWaitingTime',...
                                                    'Marker', '.',...
                                                    'MarkerEdgeColor', CuedPalette(i,:),...
                                                    'XJitter', 'density',...
                                                    'XJitterWidth', 0.15);
            end
            
            set(RichBlockAxes,...
                'TickDir', 'out',...
                'XLim', [0, 1],...
                'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
                'FontSize', 10);
            set(RichBlockAxes.XLabel,...
                'String', '')
            set(RichBlockAxes.YLabel,...
                'String', '')
            title('Rich Block', 'FontSize', 12)

            RichBlockBoxchart = boxchart(RichBlockAxes, RichBlockTrialData.TrialRewardProb, RichBlockTrialData.FeedbackWaitingTime);
            set(RichBlockBoxchart,...
                'BoxWidth', 0.05,...
                'BoxFaceColor', 'k',...
                'BoxFaceAlpha', 0,...
                'MarkerStyle', 'none',...
                'LineWidth', 0.2);
            
            RichBlockStats = grpstats(RichBlockTrialData,...
                                      'TrialRewardProb', {'mean', 'std'},...
                                      'DataVars', 'FeedbackWaitingTime',...
                                      'VarNames', {'Pr', 'Count', 'Mean', 'Std'});
            
            RichBlockStatsText = [];
            for i = 1:length(RichBlockStats.Pr)
                RichBlockStatsText(i) = text(RichBlockAxes, RewardProbCategories(i), RichBlockAxes.YLim(2) * -0.4,...
                                             sprintf('%3.0f\n%5.3f\n%5.3f',...
                                                     RichBlockStats.Count(i),...
                                                     RichBlockStats.Mean(i),...
                                                     RichBlockStats.Std(i)),...
                                             'FontSize', 10,...
                                             'HorizontalAlignment', 'center');
            end
            
            %% time investment for NotBaited per cue/choice risk in poor block
            PoorBlockAxes = axes(FigHandle, 'Position', [0.52    0.20    0.22    0.11]);
            hold(PoorBlockAxes, 'on');
            
            PoorBlockTrialData = TrialDataTable(TrialDataTable.NotBaited == 1 &...
                                                TrialDataTable.BlockNumber ~= 1 &...
                                                mod(TrialDataTable.BlockNumber, 2) == 1 &...
                                                TrialDataTable.BlockTrialNumber > 15, :);
            PoorBlockSwarmchart = [];
            for i = 1:length(RewardProbCategories)
                PoorBlockSwarmchart(i) = swarmchart(PoorBlockAxes, PoorBlockTrialData(PoorBlockTrialData.TrialRewardProb == RewardProbCategories(i), :),...
                                                    'TrialRewardProb', 'FeedbackWaitingTime',...
                                                    'Marker', '.',...
                                                    'MarkerEdgeColor', CuedPalette(i,:),...
                                                    'XJitter', 'density',...
                                                    'XJitterWidth', 0.15);
            end
            
            set(PoorBlockAxes,...
                'TickDir', 'out',...
                'XLim', [0, 1],...
                'YLim', [0, max(1, SessionData.SettingsFile.GUI.FeedbackDelayMax * 1.5)],...
                'FontSize', 10);
            set(PoorBlockAxes.XLabel,...
                'String', '')
            set(PoorBlockAxes.YLabel,...
                'String', '')
            title('Poor Block', 'FontSize', 12)
                 
            PoorBlockBoxchart = boxchart(PoorBlockAxes, PoorBlockTrialData.TrialRewardProb, PoorBlockTrialData.FeedbackWaitingTime);
            set(PoorBlockBoxchart,...
                'BoxWidth', 0.05,...
                'BoxFaceColor', 'k',...
                'BoxFaceAlpha', 0,...
                'MarkerStyle', 'none',...
                'LineWidth', 0.2);
            
            PoorBlockStats = grpstats(PoorBlockTrialData,...
                                      'TrialRewardProb', {'mean', 'std'},...
                                      'DataVars', 'FeedbackWaitingTime',...
                                      'VarNames', {'Pr', 'Count', 'Mean', 'Std'});
            
            PoorBlockStatsText = [];
            for i = 1:length(PoorBlockStats.Pr)
                PoorBlockStatsText(i) = text(PoorBlockAxes, RewardProbCategories(i), PoorBlockAxes.YLim(2) * -0.4,...
                                             sprintf('%3.0f\n%5.3f\n%5.3f',...
                                                     PoorBlockStats.Count(i),...
                                                     PoorBlockStats.Mean(i),...
                                                     PoorBlockStats.Std(i)),...
                                             'FontSize', 10,...
                                             'HorizontalAlignment', 'center');
            end
            PoorBlockStatsText(i+1) = text(PoorBlockAxes, 0, PoorBlockAxes.YLim(2) * -0.4,...
                                           sprintf('Count\nMean\nStd'),...
                                           'FontSize', 10,...
                                           'HorizontalAlignment', 'right');
            
            disp('YOu aRE fuNNy.')
        end
end