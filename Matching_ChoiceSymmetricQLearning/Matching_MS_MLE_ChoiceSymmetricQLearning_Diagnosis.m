function AnalysisFigure = Matching_MS_MLE_ChoiceSymmetricQLearning_Diagnosis(DataFolderPath)
% MS = MultiSession
% MLE = Maximum Likelihood Estimate
% Matching Analysis Function
% Developed by Antonio Lee @ BCCN Berlin
% Version 1.0 ~ Oct 2025
% Model iteration see the end of script

%% load files
if nargin < 1
    DataFolderPath = uigetdir(OttLabDataServerFolderPath());
elseif ~ischar(DataFolderPath) && ~isstring(DataFolderPath)
    disp('Error: Unknown input format. No further analysis can be performed.')
    return
end

try
    load(fullfile(DataFolderPath, '\Selected_Data.mat'));
    load(fullfile(DataFolderPath, '\Concatenated_Data.mat'));
catch
    disp('Error: Selected DataFolderPath does not contain the required .mat for further steps.')
    return
end

SessionDateRange = DataFolderPath(end-16:end);
[~, RatName] = fileparts(fileparts(fileparts(DataFolderPath)));

RatID = str2double(RatName);
if isnan(RatID)
    RatID = -1;
end
RatName = num2str(RatID);

AnalysisName = 'Matching_MS_MLE_ChoiceSymmetricQLearning';

%% Hierarchaical Symmetric Q-Learning with Forgetting and Stickiness model
try
    load(fullfile(DataFolderPath, strcat('\', AnalysisName, '.mat')));
catch
    disp('Error: no models are found')
    return
end

if ~exist('Models', 'var')
    disp('Error: Loaded data is not a Models')
    return
end

%% create figure
% create figure
AnalysisFigure = figure('Position', [   0       0    1191     842],... % DIN A3, 72 ppi
                        'NumberTitle', 'off',...
                        'Name', strcat(RatName, '_', SessionDateRange, '_', AnalysisName),...
                        'MenuBar', 'none',...
                        'Resize', 'off');

% spacer for correct saving dimension
FrameAxes = axes(AnalysisFigure, 'Position', [0 0 1 1]);
set(FrameAxes,...
    'XTick', [],...
    'YTick', [],...
    'XColor', 'w',...
    'YColor', 'w')

% Figure Info
FigureInfoAxes = axes(AnalysisFigure, 'Position', [0.01    0.98    0.48    0.01]);
set(FigureInfoAxes,...
    'XTick', [],...
    'YTick', [],...
    'XColor', 'w',...
    'YColor', 'w')

FigureTitle = strcat(RatName, '_', SessionDateRange, '_', AnalysisName, '_Diagnosis');

FigureTitleText = text(FigureInfoAxes, 0, 0,...
                       FigureTitle,...
                       'FontSize', 14,...
                       'FontWeight','bold',...
                       'Interpreter', 'none');

% colour palette
ColourPalette = CommonColourPalette();

%% Analysis across sessions
SessionDateLabel = [];
nSessions = length(DataHolder);

% Posterior mode (i.e. MLE, maximum a posteriori) estimate of ChoiceSymmetricQ
% Photometry site vs non-photometry vs day-of-week (vs estrus if female)
MLEEstimateXTicks = {'all', 'non-photo', 'left-photo', 'right-photo'};

LearningRateMLEAxes = axes(AnalysisFigure, 'Position', [0.05    0.77    0.10    0.16]);
hold(LearningRateMLEAxes, 'on');

LearningRateMLEs = nan(1, nSessions);

set(LearningRateMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [-1, 4],...
    'XTick', 0:3,...
    'XTickLabel', {},...
    'YAxisLocation', 'left')
ylabel(LearningRateMLEAxes, '\alpha (a.u.)')
title(LearningRateMLEAxes, 'MLE estimate')

InverseTemperatureMLEAxes = axes(AnalysisFigure, 'Position', [0.05    0.57    0.10    0.16]);
hold(InverseTemperatureMLEAxes, 'on');

InverseTemperatureMLEs = nan(1, nSessions);

set(InverseTemperatureMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [-1, 4],...
    'XTick', 0:3,...
    'XTickLabel', {},...
    'YAxisLocation', 'left')
ylabel(InverseTemperatureMLEAxes, '\beta (a.u.)')

ForgettingRateMLEAxes = axes(AnalysisFigure, 'Position', [0.05    0.38    0.10    0.16]);
hold(ForgettingRateMLEAxes, 'on');

ForgettingRateMLEs = nan(1, nSessions);

set(ForgettingRateMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [-1, 4],...
    'XTick', 0:3,...
    'XTickLabel', MLEEstimateXTicks,...
    'XTickLabelRotation', 90,...
    'YAxisLocation', 'left')
ylabel(ForgettingRateMLEAxes, '\gamma_v (a.u.)')

ChoiceStickinessMLEAxes = axes(AnalysisFigure, 'Position', [0.20    0.77    0.10    0.16]);
hold(ChoiceStickinessMLEAxes, 'on');

ChoiceStickinessMLEs = nan(1, nSessions);

set(ChoiceStickinessMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [-1, 4],...
    'XTick', 0:3,...
    'XTickLabel', {},...
    'YAxisLocation', 'left')
ylabel(ChoiceStickinessMLEAxes, '\phi (a.u.)')

ChoiceForgettingRateMLEAxes = axes(AnalysisFigure, 'Position', [0.20    0.57    0.10    0.16]);
hold(ChoiceForgettingRateMLEAxes, 'on');

ChoiceForgettingRateMLEs = nan(1, nSessions);

set(ChoiceForgettingRateMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [-1, 4],...
    'XTick', 0:3,...
    'XTickLabel', {},...
    'YAxisLocation', 'left')
ylabel(ChoiceForgettingRateMLEAxes, '\gamma_m (a.u.)')

BiasMLEAxes = axes(AnalysisFigure, 'Position', [0.20    0.38    0.10    0.15]);
hold(BiasMLEAxes, 'on');

BiasMLEs = nan(1, nSessions);

set(BiasMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [-1, 4],...
    'XTick', 0:3,...
    'XTickLabel', MLEEstimateXTicks,...
    'XTickLabelRotation', 90,...
    'YAxisLocation', 'left')
ylabel(BiasMLEAxes, 'bias (a.u.)')

%% residual distribution overview
SessionResidualDistributionAxes = axes(AnalysisFigure, 'Position', [0.35    0.15    0.64    0.09]);
hold(SessionResidualDistributionAxes, 'on')

SessionIdx = [];
Residuals = [];

set(SessionResidualDistributionAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [0 length(DataHolder)+1],...
    'XTickLabel', [],...
    'YLim', [-1, 1],...
    'YAxisLocation', 'left')
ylabel(SessionResidualDistributionAxes, 'Residuals (a.u.)')

%% MLE overview
% inverse temperature
SessionLearningRateMLEAxes = axes(AnalysisFigure, 'Position', [0.35    0.86    0.64    0.10]);
hold(SessionLearningRateMLEAxes, 'on')

set(SessionLearningRateMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [0 length(DataHolder)+1],...
    'XTickLabel', [],...
    'YLim', [0, 1],...
    'YAxisLocation', 'left')
ylabel(SessionLearningRateMLEAxes, '\alpha (a.u.)')

% inverse temperature
SessionInverseTemperatureMLEAxes = axes(AnalysisFigure, 'Position', [0.35    0.74    0.64    0.10]);
hold(SessionInverseTemperatureMLEAxes, 'on')

set(SessionInverseTemperatureMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [0 length(DataHolder)+1],...
    'XTickLabel', [],...
    'YLim', [0, 10],...
    'YAxisLocation', 'left')
ylabel(SessionInverseTemperatureMLEAxes, '\beta (a.u.)')

% forgetting rate
SessionForgettingRateMLEAxes = axes(AnalysisFigure, 'Position', [0.35    0.62    0.64    0.10]);
hold(SessionForgettingRateMLEAxes, 'on')

set(SessionForgettingRateMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [0 length(DataHolder)+1],...
    'XTickLabel', [],...
    'YLim', [0, 1],...
    'YAxisLocation', 'left')
ylabel(SessionForgettingRateMLEAxes, '\gamma_v (a.u.)')

% choice stickiness
SessionChoiceStickinessMLEAxes = axes(AnalysisFigure, 'Position', [0.35    0.50    0.64    0.10]);
hold(SessionChoiceStickinessMLEAxes, 'on')

set(SessionChoiceStickinessMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [0 length(DataHolder)+1],...
    'XTickLabel', [],...
    'YLim', [-2, 1],...
    'YAxisLocation', 'left')
ylabel(SessionChoiceStickinessMLEAxes, '\phi (a.u.)')

% choice forgetting rate
SessionChoiceForgettingRateMLEAxes = axes(AnalysisFigure, 'Position', [0.35    0.38    0.64    0.10]);
hold(SessionChoiceForgettingRateMLEAxes, 'on')

set(SessionChoiceForgettingRateMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [0 length(DataHolder)+1],...
    'XTickLabel', [],...
    'YLim', [0, 1],...
    'YAxisLocation', 'left')
ylabel(SessionChoiceForgettingRateMLEAxes, '\gamma_m (a.u.)')

% bias
SessionBiasMLEAxes = axes(AnalysisFigure, 'Position', [0.35    0.26    0.64    0.10]);
hold(SessionBiasMLEAxes, 'on')

set(SessionBiasMLEAxes,...
    'FontSize', 10,...
    'TickDir', 'out',...
    'XLim', [0 length(DataHolder)+1],...
    'XTickLabel', [],...
    'YLim', [-2, 2],...
    'YAxisLocation', 'left')
ylabel(SessionBiasMLEAxes, 'Bias (a.u.)')

%% SessionMeta
PhotometryRecordingTag = nan(1, length(DataHolder)); % 1: non-photo, 2:left, 3:right
WeekdayTag = nan(1, length(DataHolder)); %1: Sunday...

%% Plotting
for iSession = 1:length(DataHolder)
    % Import SessionData
    SessionData = DataHolder{iSession};
    SessionDateLabel = [SessionDateLabel, string(datestr(datetime(SessionData.Info.SessionDate), 'YYYYmmDD(ddd)'))];
    
    nTrials = SessionData.nTrials;
    if nTrials < 200
        disp(['Session ', num2str(iSession), ' has nTrial < 200. Impossible for analysis.'])
        continue
    end

    if ~isfield(SessionData.Custom.SessionMeta, 'PhotometryBrainArea')
        PhotometryRecordingTag(iSession) = 1;
    elseif contains(SessionData.Custom.SessionMeta.PhotometryBrainArea, 'eft')
        PhotometryRecordingTag(iSession) = 2;
    elseif contains(SessionData.Custom.SessionMeta.PhotometryBrainArea, 'ight')
        PhotometryRecordingTag(iSession) = 3;
    end
    WeekdayTag(iSession) = weekday(SessionData.Info.SessionDate);
    
    ChoiceLeft = SessionData.Custom.TrialData.ChoiceLeft(1:nTrials);
    Rewarded = SessionData.Custom.TrialData.Rewarded(1:nTrials);

    %% Analysis across sessions
    Model = Models{iSession};

    LearningRateMLEs(iSession) = Model.EstimatedParameters(1);
    InverseTemperatureMLEs(iSession) = Model.EstimatedParameters(2);
    ForgettingRateMLEs(iSession) = Model.EstimatedParameters(3);
    ChoiceStickinessMLEs(iSession) = Model.EstimatedParameters(4);
    ChoiceForgettingRateMLEs(iSession) = Model.EstimatedParameters(5);
    BiasMLEs(iSession) = Model.EstimatedParameters(6);
    
    MLEEstimates = [LearningRateMLEs(iSession), InverseTemperatureMLEs(iSession), ForgettingRateMLEs(iSession),...
                    ChoiceStickinessMLEs(iSession), ChoiceForgettingRateMLEs(iSession), BiasMLEs(iSession)];
    
    [NegLogDataLikelihood, Values] = ChoiceSymmetricQLearning(MLEEstimates, nTrials, ChoiceLeft, Rewarded);
    LogOdds = InverseTemperatureMLEs(iSession) * (Values.LeftValue - Values.RightValue) +...
              + ChoiceStickinessMLEs(iSession) * Values.ChoiceMemory + BiasMLEs(iSession);
    
    PredictedLeftChoiceProb = 1 ./ (1 + exp(-LogOdds));

    PredictedChoice = double(PredictedLeftChoiceProb>=0.5);
    PredictedChoice(isnan(ChoiceLeft)) = nan;
    
    Explore = abs(ChoiceLeft - PredictedLeftChoiceProb) >= 0.5;
    Exploit = abs(ChoiceLeft - PredictedLeftChoiceProb) < 0.5;
    
    AbsModelResiduals = abs(ChoiceLeft - PredictedLeftChoiceProb);

    %% session residuals overview
    SessionIdx = [SessionIdx, iSession .* ones(1, nTrials)];
    Residuals = [Residuals, ChoiceLeft - PredictedLeftChoiceProb];
    
    %% session chain summary
    % learning rate
    LearningRateErrorBar(iSession) = errorbar(SessionLearningRateMLEAxes,...
                                              iSession,...
                                              MLEEstimates(1),...
                                              Model.ParameterStandardError(1),...
                                              'Marker', 'none',...
                                              'Color', 'k');
    % inverse temperature
    InverseTemperatureErrorBar(iSession) = errorbar(SessionInverseTemperatureMLEAxes,...
                                                    iSession,...
                                                    MLEEstimates(2),...
                                                    Model.ParameterStandardError(2),...
                                                    'Marker', 'none',...
                                                    'Color', 'k');

    % forgetting rate
    ForgettingRateErrorBar(iSession) = errorbar(SessionForgettingRateMLEAxes,...
                                                iSession,...
                                                MLEEstimates(3),...
                                                Model.ParameterStandardError(3),...
                                                'Marker', 'none',...
                                                'Color', 'k');

    % choice stickiness
    ChoiceStickinessErrorBar(iSession) = errorbar(SessionChoiceStickinessMLEAxes,...
                                                  iSession,...
                                                  MLEEstimates(4),...
                                                  Model.ParameterStandardError(4),...
                                                  'Marker', 'none',...
                                                  'Color', 'k');
    
    % choice forgetting rate
    ChoiceForgettingRateErrorBar(iSession) = errorbar(SessionChoiceForgettingRateMLEAxes,...
                                                      iSession,...
                                                      MLEEstimates(5),...
                                                      Model.ParameterStandardError(5),...
                                                      'Marker', 'none',...
                                                      'Color', 'k');

    % bias
    BiasErrorBar(iSession) = errorbar(SessionBiasMLEAxes,...
                                      iSession,...
                                      MLEEstimates(6),...
                                      Model.ParameterStandardError(6),...
                                      'Marker', 'none',...
                                      'Color', 'k');
                                                 
end

%% Average across sessions
% Posterior mode (i.e. MLE, maximum a posteriori) estimate of ChoiceSymmetricQ
XData = zeros(size(LearningRateMLEs));
LearningRateSwarmchart = swarmchart(LearningRateMLEAxes,...
                                    XData,...
                                    LearningRateMLEs,...
                                    'Marker', '.',...
                                    'MarkerEdgeColor', ColourPalette.Session,...
                                    'XJitter', 'density',...
                                    'XJitterWidth', 1);

LearningRateBoxchart = boxchart(LearningRateMLEAxes, XData, LearningRateMLEs);
set(LearningRateBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

PhotometryLearningRateSwarmchart = swarmchart(LearningRateMLEAxes,...
                                              PhotometryRecordingTag,...
                                              LearningRateMLEs,...
                                              'Marker', '.',...
                                              'MarkerEdgeColor', ColourPalette.Session,...
                                              'XJitter', 'density',...
                                              'XJitterWidth', 1);

PhotometryLearningRateBoxchart = boxchart(LearningRateMLEAxes, PhotometryRecordingTag, LearningRateMLEs);
set(PhotometryLearningRateBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

XData = zeros(size(InverseTemperatureMLEs));
InverseTemperatureSwarmchart = swarmchart(InverseTemperatureMLEAxes,...
                                          XData,...
                                          InverseTemperatureMLEs,...
                                          'Marker', '.',...
                                          'MarkerEdgeColor', ColourPalette.Session,...
                                          'XJitter', 'density',...
                                          'XJitterWidth', 1);

InverseTemperatureBoxchart = boxchart(InverseTemperatureMLEAxes, XData, InverseTemperatureMLEs);
set(InverseTemperatureBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

PhotometryInverseTemperatureSwarmchart = swarmchart(InverseTemperatureMLEAxes,...
                                                    PhotometryRecordingTag,...
                                                    InverseTemperatureMLEs,...
                                                    'Marker', '.',...
                                                    'MarkerEdgeColor', ColourPalette.Session,...
                                                    'XJitter', 'density',...
                                                    'XJitterWidth', 1);

PhotometryInverseTemperatureBoxchart = boxchart(InverseTemperatureMLEAxes, PhotometryRecordingTag, InverseTemperatureMLEs);
set(PhotometryInverseTemperatureBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

XData = zeros(size(ForgettingRateMLEs));
ForgettingRateSwarmchart = swarmchart(ForgettingRateMLEAxes,...
                                      XData,...
                                      ForgettingRateMLEs,...
                                      'Marker', '.',...
                                      'MarkerEdgeColor', ColourPalette.Session,...
                                      'XJitter', 'density',...
                                      'XJitterWidth', 1);

ForgettingRateBoxchart = boxchart(ForgettingRateMLEAxes, XData, ForgettingRateMLEs);
set(ForgettingRateBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

PhotometryForgettingRateSwarmchart = swarmchart(ForgettingRateMLEAxes,...
                                                PhotometryRecordingTag,...
                                                ForgettingRateMLEs,...
                                                'Marker', '.',...
                                                'MarkerEdgeColor', ColourPalette.Session,...
                                                'XJitter', 'density',...
                                                'XJitterWidth', 1);

PhotometryForgettingRateBoxchart = boxchart(ForgettingRateMLEAxes, PhotometryRecordingTag, ForgettingRateMLEs);
set(PhotometryForgettingRateBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

XData = zeros(size(ChoiceStickinessMLEs));
ChoiceStickinessSwarmchart = swarmchart(ChoiceStickinessMLEAxes,...
                                        XData,...
                                        ChoiceStickinessMLEs,...
                                        'Marker', '.',...
                                        'MarkerEdgeColor', ColourPalette.Session,...
                                        'XJitter', 'density',...
                                        'XJitterWidth', 1);

ChoiceStickinessBoxchart = boxchart(ChoiceStickinessMLEAxes, XData, ChoiceStickinessMLEs);
set(ChoiceStickinessBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

PhotometryChoiceStickinessSwarmchart = swarmchart(ChoiceStickinessMLEAxes,...
                                                  PhotometryRecordingTag,...
                                                  ChoiceStickinessMLEs,...
                                                  'Marker', '.',...
                                                  'MarkerEdgeColor', ColourPalette.Session,...
                                                  'XJitter', 'density',...
                                                  'XJitterWidth', 1);

PhotometryChoiceStickinessBoxchart = boxchart(ChoiceStickinessMLEAxes, PhotometryRecordingTag, ChoiceStickinessMLEs);
set(PhotometryChoiceStickinessBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

XData = zeros(size(ChoiceForgettingRateMLEs));
ChoiceForgettingRateSwarmchart = swarmchart(ChoiceForgettingRateMLEAxes,...
                                            XData,...
                                            ChoiceForgettingRateMLEs,...
                                            'Marker', '.',...
                                            'MarkerEdgeColor', ColourPalette.Session,...
                                            'XJitter', 'density',...
                                            'XJitterWidth', 1);

ChoiceForgettingRateBoxchart = boxchart(ChoiceForgettingRateMLEAxes, XData, ChoiceForgettingRateMLEs);
set(ChoiceForgettingRateBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

PhotometryChoiceForgettingRateSwarmchart = swarmchart(ChoiceForgettingRateMLEAxes,...
                                                      PhotometryRecordingTag,...
                                                      ChoiceForgettingRateMLEs,...
                                                      'Marker', '.',...
                                                      'MarkerEdgeColor', ColourPalette.Session,...
                                                      'XJitter', 'density',...
                                                      'XJitterWidth', 1);

PhotometryChoiceForgettingRateBoxchart = boxchart(ChoiceForgettingRateMLEAxes, PhotometryRecordingTag, ChoiceForgettingRateMLEs);
set(PhotometryChoiceForgettingRateBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

XData = zeros(size(BiasMLEs));
BiasSwarmchart = swarmchart(BiasMLEAxes,...
                            XData,...
                            BiasMLEs,...
                            'Marker', '.',...
                            'MarkerEdgeColor', ColourPalette.Session,...
                            'XJitter', 'density',...
                            'XJitterWidth', 1);

BiasBoxchart = boxchart(BiasMLEAxes, XData, BiasMLEs);
set(BiasBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

PhotometryBiasSwarmchart = swarmchart(BiasMLEAxes,...
                                      PhotometryRecordingTag,...
                                      BiasMLEs,...
                                      'Marker', '.',...
                                      'MarkerEdgeColor', ColourPalette.Session,...
                                      'XJitter', 'density',...
                                      'XJitterWidth', 1);

PhotometryBiasBoxchart = boxchart(BiasMLEAxes, PhotometryRecordingTag, BiasMLEs);
set(PhotometryBiasBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

%% Session residuals overview
SessionResidualsSwamchart = swarmchart(SessionResidualDistributionAxes,...
                                       SessionIdx,...
                                       Residuals,...
                                       'Marker', '.',...
                                       'MarkerEdgeColor', ColourPalette.Session,...
                                       'XJitter', 'density',...
                                       'XJitterWidth', 1);


set(SessionResidualDistributionAxes,...
    'XTick', 1:length(SessionDateLabel),...
    'XTickLabel', SessionDateLabel,...
    'XTickLabelRotation', 90);

%% session MLE overview
SesionDateDatetime = datetime(SessionDateLabel, 'InputFormat', 'yyyyMMdd(eee)');
SessionDateDiffDays = caldays(caldiff(SesionDateDatetime, 'days'));
WaterDeprivedDayOneIdx = [1, find(SessionDateDiffDays > 1) + 1];

% forgetting rate
SessionLearningRateMLEPlot = plot(SessionLearningRateMLEAxes, 1:nSessions, LearningRateMLEs,...
                                  'Marker', 'o',...
                                  'MarkerIndices', WaterDeprivedDayOneIdx,...
                                  'Color', 'k');

set(SessionLearningRateMLEAxes,...
    'XTick', 1:length(SessionDateLabel),...
    'XTickLabel', {});

% forgetting rate
SessionInverseTemperatureMLEPlot = plot(SessionInverseTemperatureMLEAxes, 1:nSessions, InverseTemperatureMLEs,...
                                        'Marker', 'o',...
                                        'MarkerIndices', WaterDeprivedDayOneIdx,...
                                        'Color', 'k');

set(SessionInverseTemperatureMLEAxes,...
    'XTick', 1:length(SessionDateLabel),...
    'XTickLabel', {});

% forgetting rate
SessionForgettingRateMLEPlot = plot(SessionForgettingRateMLEAxes, 1:nSessions, ForgettingRateMLEs,...
                                    'Marker', 'o',...
                                    'MarkerIndices', WaterDeprivedDayOneIdx,...
                                    'Color', 'k');

set(SessionForgettingRateMLEAxes,...
    'XTick', 1:length(SessionDateLabel),...
    'XTickLabel', {});

% choice stickiness
SessionChoiceStickinessMLEPlot = plot(SessionChoiceStickinessMLEAxes, 1:nSessions, ChoiceStickinessMLEs,...
                                      'Marker', 'o',...
                                      'MarkerIndices', WaterDeprivedDayOneIdx,...
                                      'Color', 'k');

set(SessionChoiceStickinessMLEAxes,...
    'XTick', 1:length(SessionDateLabel),...
    'XTickLabel', {});

% choice forgetting rate
SessionChoiceForgettingRateMLEPlot = plot(SessionChoiceForgettingRateMLEAxes, 1:nSessions, ChoiceForgettingRateMLEs,...
                                          'Marker', 'o',...
                                          'MarkerIndices', WaterDeprivedDayOneIdx,...
                                          'Color', 'k');

set(SessionChoiceForgettingRateMLEAxes,...
    'XTick', 1:length(SessionDateLabel),...
    'XTickLabel', {});

% bias
SessionBiasMLEPlot = plot(SessionBiasMLEAxes, 1:nSessions, BiasMLEs,...
                          'Marker', 'o',...
                          'MarkerIndices', WaterDeprivedDayOneIdx,...
                          'Color', 'k');

set(SessionBiasMLEAxes,...
    'XTick', 1:length(SessionDateLabel),...
    'XTickLabel', {});

disp('YOu aRE a bEAutIFul HUmaN BeiNG, saID anTOniO.')

DataPath = strcat(DataFolderPath, '\', FigureTitle, '.png');
exportgraphics(AnalysisFigure, DataPath);

DataPath = strcat(DataFolderPath, '\', FigureTitle, '.fig');
savefig(AnalysisFigure, DataPath);

end % function