function TwoArmBanditVariant_Matching_MultiSession_LauGlimcherGLM(DataFolderPath)
%{
First create on 20240519 by Antonio Lee for AG Ott @HU Berlin

V1.0 20240519 dedicated script for analyzing multiple sessions with similar
settings (no checking is done). A folder is selected instead of a .mat file
(so that a bit of back and forth looking at the concatenated data and
individual session data is allowed)

The analysis is positioned to look at the data using Lau-Glimcher models of
individual sessions, i.e. sessions are considered differently. Additional
plots of how the coefficients evolve during the sessions are made.
%}

if nargin < 1
    DataFolderPath = uigetdir(OttLabDataServerFolderPath());
elseif ~ischar(DataFolderPath) && ~isstring(DataFolderPath)
    disp('Error: Unknown input format. No further analysis can be performed.')
    return
end

try
    load(fullfile(DataFolderPath, '\Selected_Data.mat'));
    load(fullfile(DataFolderPath, '\Concatenated_Data.mat'));
catch
    disp('Error: Selected DataFolderPath does not contain the required .mat for further steps.')
    return
end

SessionDateRange = DataFolderPath(end-16:end);
[~, RatName] = fileparts(fileparts(fileparts(DataFolderPath)));

RatID = str2double(RatName);
if isnan(RatID)
    RatID = -1;
end
RatName = num2str(RatID);

AnalysisName = 'Matching_MultiSession_LauGlimcherGLM';

%% Check if all sessions are of the same SettingsFile
%{
% not sure how to best do it yet, as some settings are drawn in each trial
and displayed
for iSession = 1:length(DataHolder)
    SessionData = DataHolder{iSession};

    if ~isfield(SessionData, 'SettingsFile')
        disp('Error: The selected file does not have the field "SettingsFile". No further Matching Analysis is performed.')
        AnalysisFigure = [];
        return
    elseif ~isfield(SessionData.SettingsFile.GUIMeta, 'RiskType')
        disp('Error: The selected SessionFile may not be a TwoArmBanditVariant session. No further Matching Analysis is performed.')
        AnalysisFigure = [];
        return
    elseif ~strcmpi(SessionData.SettingsFile.GUIMeta.RiskType.String{SessionData.SettingsFile.GUI.RiskType}, 'BlockFixHolding')
        disp('Error: The selected SessionData is not a Matching session. No further Matching Analysis is performed.')
        AnalysisFigure = [];
        return
    end
end
%}
    
%% Common plots regardless of task design/ risk type
% colour palette for events (suitable for most colourblind people)
scarlet = [254, 60, 60]/255; % for incorrect sign, contracting with azure
denim = [31, 54, 104]/255; % mainly for unsuccessful trials
azure = [0, 162, 254]/255; % for rewarded sign

neon_green = [26, 255, 26]/255; % for NotBaited
neon_purple = [168, 12, 180]/255; % for SkippedBaited

sand = [225, 190 106]/255; % for left-right
turquoise = [64, 176, 166]/255;
LRPalette = [sand; turquoise];

carrot = [230, 97, 0]/255; % explore
violet = [93, 58, 155]/255; % exploit

% colour palette for cues: (1- P(r)) * 128 + 127
% P(0) = white; P(1) = smoky gray
% RewardProbCategories = unique(RewardProb);
% CuedPalette = ((1 - RewardProbCategories) * [128 128 128] + 127)/255;

%{
if p.TimelineView
    EarliestSessionDate = datetime(DataHolder{1}.Info.SessionDate);
    LatestSessionDate = datetime(DataHolder{end}.Info.SessionDate);
    FullDateRange = between(EarliestSessionDate, LatestSessionDate, 'Days');
    FullDateRangeChar = char(FullDateRange);
    ColourAdjustmentDenominator = str2double(FullDateRangeChar(1:end-1));
else
    ColourAdjustmentDenominator = size(DataHolder);
end
%}

%% Initiatize figure
% create figure
AnalysisFigure = figure('Position', [   0       0    1191     842],... % DIN A3, 72 ppi
                        'NumberTitle', 'off',...
                        'Name', strcat(RatName, '_', SessionDateRange, '_', AnalysisName),...
                        'MenuBar', 'none',...
                        'Resize', 'off');

% spacer for correct saving dimension
FrameAxes = axes(AnalysisFigure, 'Position', [0 0 1 1]);
set(FrameAxes,...
    'XTick', [],...
    'YTick', [],...
    'XColor', 'w',...
    'YColor', 'w')

% Figure Info
FigureInfoAxes = axes(AnalysisFigure, 'Position', [0.01    0.98    0.48    0.01]);
set(FigureInfoAxes,...
    'XTick', [],...
    'YTick', [],...
    'XColor', 'w',...
    'YColor', 'w')

FigureTitle = strcat(RatName, '_', SessionDateRange, '_', AnalysisName);

FigureTitleText = text(FigureInfoAxes, 0, 0,...
                       FigureTitle,...
                       'FontSize', 14,...
                       'FontWeight','bold',...
                       'Interpreter', 'none');

%% Analysis across sessions
SessionDateLabel = [];

% Psychometric
PsychometricAxes = axes(AnalysisFigure, 'Position', [0.01    0.75    0.15    0.19]);
hold(PsychometricAxes, 'on')

AllPredictedProb = [];
AllLogOdds = [];
AllChoiceLeft = [];

set(PsychometricAxes,...
    'FontSize', 10,...
    'XLim', [-5 5],...
    'YLim', [0, 100],...
    'YAxisLocation', 'right')
title(PsychometricAxes, 'Psychometric')
xlabel(PsychometricAxes, 'log(odds)')
ylabel(PsychometricAxes, 'Left Choices (%)')

% Coefficient of Lau-Glimcher GLM
ModelCoefficientAxes = axes(AnalysisFigure, 'Position', [0.22    0.75    0.15    0.19]);
hold(ModelCoefficientAxes, 'on');

ChoiceCoefficients = [];
RewardCoefficients = [];
Intercept = [];

set(ModelCoefficientAxes,...
    'FontSize', 10,...
    'XLim', [-5 -1],...
    'YLim', [-1, 3],...
    'YAxisLocation', 'right')
xlabel(ModelCoefficientAxes, 'iTrial back');
ylabel(ModelCoefficientAxes, 'Coeff.');
title(ModelCoefficientAxes, 'GLM Fitted Coefficients')

% Vevaiometric      
VevaiometricAxes = axes(AnalysisFigure, 'Position', [0.01    0.48    0.15    0.19]);
hold(VevaiometricAxes, 'on')

AllExploringTI = [];
AllExploitingTI = [];

AllExploringLogOdds = [];
AllExploitingLogOdds = [];

set(VevaiometricAxes,...
    'FontSize', 10,...
    'XLim', [-5 5],...
    'YLim', [0 12],...
    'YAxisLocation', 'right')
title(VevaiometricAxes, 'Vevaiometric');
ylabel(VevaiometricAxes, 'Invested Time (s)');

% Vevaiometric z-score
VevaiometricSqrtZScoreAxes = axes(AnalysisFigure, 'Position', [0.01    0.25    0.15    0.19]);
hold(VevaiometricSqrtZScoreAxes, 'on')

AllExploringTISqrtZScore = [];
AllExploitingTISqrtZScore = [];

set(VevaiometricSqrtZScoreAxes,...
    'FontSize', 10,...
    'XLim', [-5 5],...
    'YLim', [-2 2],...
    'YAxisLocation', 'right')
xlabel(VevaiometricSqrtZScoreAxes, 'log(odds)');
ylabel(VevaiometricSqrtZScoreAxes, 'sqrt(Invested Time) (z-score)');

% Vevaiometric (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
LRVevaiometricAxes = axes(AnalysisFigure, 'Position', [0.33    0.48    0.15    0.19]);
hold(LRVevaiometricAxes, 'on')

AllLeftTI = [];
AllRightTI = [];
AllLeftAbsResidual = [];
AllRightAbsResidual = [];

set(LRVevaiometricAxes,...
    'FontSize', 10,...
    'XLim', [0 1],...
    'YLim', [0 12])
title(LRVevaiometricAxes, 'LRVevaiometric');

% Vevaiometric z-score (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
LRVevaiometricSqrtZScoreAxes = axes(AnalysisFigure, 'Position', [0.33    0.25    0.15    0.19]);
hold(LRVevaiometricSqrtZScoreAxes, 'on')

AllLeftTISqrtZScore = [];
AllRightTISqrtZScore = [];

set(LRVevaiometricSqrtZScoreAxes,...
    'FontSize', 10,...
    'XLim', [0 1],...
    'YLim', [-2 2])
xlabel(LRVevaiometricSqrtZScoreAxes, 'abs(Residuals)');

% TI distribution per left-right and explore/exploit
TIDistributionAxes = axes(AnalysisFigure, 'Position', [0.22    0.48    0.09    0.19]);
hold(TIDistributionAxes, 'on')

set(TIDistributionAxes,...
    'TickDir', 'out',...
    'XLim', [-0.5, 1.5],...
    'XTick', [0 1],...
    'XTickLabel', {},...
    'YLim', [0, 12],...
    'FontSize', 10);
xlabel(TIDistributionAxes, '')
title(TIDistributionAxes, 'TI Distribution');

% TI-ZScore distribution per left-right and explore/exploit
TISqrtZScoreDistributionAxes = axes(AnalysisFigure, 'Position', [0.22    0.25    0.09    0.19]);
hold(TISqrtZScoreDistributionAxes, 'on')

set(TISqrtZScoreDistributionAxes,...
    'TickDir', 'out',...
    'XLim', [-0.5, 1.5],...
    'XTick', [0 1],...
    'XTickLabel', {'Left', 'Right'},...
    'YLim', [-2, 2],...
    'FontSize', 10);
xlabel(TISqrtZScoreDistributionAxes, '')
title(TISqrtZScoreDistributionAxes, '');

%% Explore/exploit level around block switch
% Block transition
BlockTransitionAxes = axes(AnalysisFigure, 'Position', [0.01    0.06    0.15    0.12]);
hold(BlockTransitionAxes, 'on');

Block1TransitionYData = nan(100, 61);
Block2TransitionYData = nan(100, 61);
Block3TransitionYData = nan(100, 61);
Block4TransitionYData = nan(100, 61);

set(BlockTransitionAxes,...
    'TickDir', 'out',...
    'XLim', [-10 50],...
    'XTick', [0 20 40],...
    'XTickLabel', [1 21 41],...
    'YLim', [0 40],...
    'YAxisLocation', 'right',...
    'FontSize', 10);
ylabel(BlockTransitionAxes, 'Choice_{explore} (%)')
title(BlockTransitionAxes, 'Block Transition')

% Explore/exploit level against reward rate
RewardRateAxes = axes(AnalysisFigure, 'Position', [0.33    0.06    0.15    0.12]);
hold(RewardRateAxes, 'on');

AllAbsResidual = [];
AllRewardRate = [];

set(RewardRateAxes,...
    'TickDir', 'out',...
    'XLim', [0 1],...
    'YLim', [0 100],...
    'YAxisLocation', 'right',...
    'FontSize', 10);
xlabel(RewardRateAxes, 'abs(Residuals)')
ylabel(RewardRateAxes, 'Reward rate')

AllLeftTIRewardRate = [];
AllRightTIRewardRate = [];

%% Move time
% Vevaiometric MT
VevaiometricMTAxes = axes(AnalysisFigure, 'Position', [0.51    0.48    0.15    0.19]);
hold(VevaiometricMTAxes, 'on')

AllExploringMT = [];
AllExploitingMT = [];

AllExploringMTLogOdds = [];
AllExploitingMTLogOdds = [];

set(VevaiometricMTAxes,...
    'FontSize', 10,...
    'XLim', [-5 5],...
    'YLim', [0 0.5],...
    'YAxisLocation', 'right')
title(VevaiometricMTAxes, 'Vevaiometric MT');
ylabel(VevaiometricMTAxes, 'Move Time (s)');

% Vevaiometric MT z-score
%{
% NOT USE AS NOT NORMAL DISTRIBUTION
VevaiometricMTSqrtZScoreAxes = axes(AnalysisFigure, 'Position', [0.51    0.25    0.15    0.19]);
hold(VevaiometricMTSqrtZScoreAxes, 'on')

AllExploringMTSqrtZScore = [];
AllExploitingMTSqrtZScore = [];

set(VevaiometricMTSqrtZScoreAxes,...
    'FontSize', 10,...
    'XLim', [-5 5],...
    'YLim', [0 3],...
    'YAxisLocation', 'right')
xlabel(VevaiometricMTSqrtZScoreAxes, 'log(odds)');
ylabel(VevaiometricMTSqrtZScoreAxes, 'sqrt(Move Time) (z-score)');
%}

% Vevaiometric (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
LRVevaiometricMTAxes = axes(AnalysisFigure, 'Position', [0.83    0.48    0.15    0.19]);
hold(LRVevaiometricMTAxes, 'on')

AllLeftMT = [];
AllRightMT = [];
AllLeftMTAbsResidual = [];
AllRightMTAbsResidual = [];

set(LRVevaiometricMTAxes,...
    'FontSize', 10,...
    'XLim', [0 1],...
    'YLim', [0 0.5])
title(LRVevaiometricMTAxes, 'LRVevaiometric MT');

% Vevaiometric MT z-score (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
%{
% NOT USE AS NOT NORMAL DISTRIBUTION
LRVevaiometricMTSqrtZScoreAxes = axes(AnalysisFigure, 'Position', [0.83    0.25    0.15    0.19]);
hold(LRVevaiometricMTSqrtZScoreAxes, 'on')

AllLeftMTSqrtZScore = [];
AllRightMTSqrtZScore = [];

set(LRVevaiometricMTSqrtZScoreAxes,...
    'FontSize', 10,...
    'XLim', [0 1],...
    'YLim', [0 3])
xlabel(LRVevaiometricMTSqrtZScoreAxes, 'abs(Residuals)');
%}

% TI distribution per left-right and explore/exploit
MTDistributionAxes = axes(AnalysisFigure, 'Position', [0.72    0.48    0.09    0.19]);
hold(MTDistributionAxes, 'on')

set(MTDistributionAxes,...
    'TickDir', 'out',...
    'XLim', [-0.5, 1.5],...
    'XTick', [0 1],...
    'XTickLabel', {},...
    'YLim', [0, 0.5],...
    'FontSize', 10);
xlabel(MTDistributionAxes, '')
title(MTDistributionAxes, 'MT Distribution');

% TI-ZScore distribution per left-right and explore/exploit
%{
% NOT USE AS NOT NORMAL DISTRIBUTION
MTSqrtZScoreDistributionAxes = axes(AnalysisFigure, 'Position', [0.72    0.25    0.09    0.19]);
hold(MTSqrtZScoreDistributionAxes, 'on')

set(MTSqrtZScoreDistributionAxes,...
    'TickDir', 'out',...
    'XLim', [-0.5, 1.5],...
    'XTick', [0 1],...
    'XTickLabel', {'Left', 'Right'},...
    'YLim', [0, 3],...
    'FontSize', 10);
xlabel(MTSqrtZScoreDistributionAxes, '')
title(MTSqrtZScoreDistributionAxes, '');
%}

disp('YOu aRE a bEAutIFul HUmaN BeiNG, saID anTOniO.')

%% Plotting
for iSession = 1:length(DataHolder)
    % Import SessionData
    SessionData = DataHolder{iSession};
    
    nTrials = SessionData.nTrials;
    if nTrials < 200
        disp(['Session ', num2str(iSession), ' has nTrial < 200. Impossible for analysis.'])
        continue
    end
    
    SessionDateLabel = [SessionDateLabel string(datestr(datetime(SessionData.Info.SessionDate), 'YYYYmmDD(ddd)'))];

    ChoiceLeft = SessionData.Custom.TrialData.ChoiceLeft(1:nTrials);
    Baited = SessionData.Custom.TrialData.Baited(:, 1:nTrials);
    IncorrectChoice = SessionData.Custom.TrialData.IncorrectChoice(1:nTrials);
    NoDecision = SessionData.Custom.TrialData.NoDecision(1:nTrials);
    NoTrialStart = SessionData.Custom.TrialData.NoTrialStart(1:nTrials);
    BrokeFixation = SessionData.Custom.TrialData.BrokeFixation(1:nTrials);
    EarlyWithdrawal = SessionData.Custom.TrialData.EarlyWithdrawal(1:nTrials);
    StartNewTrial = SessionData.Custom.TrialData.StartNewTrial(1:nTrials);
    SkippedFeedback = SessionData.Custom.TrialData.SkippedFeedback(1:nTrials);
    Rewarded = SessionData.Custom.TrialData.Rewarded(1:nTrials);
    
    SampleTime = SessionData.Custom.TrialData.SampleTime(1:nTrials);
    MoveTime = SessionData.Custom.TrialData.MoveTime(1:nTrials);
    FeedbackWaitingTime = SessionData.Custom.TrialData.FeedbackWaitingTime(1:nTrials);
    % FeedbackDelay = SessionData.Custom.TrialData.FeedbackDelay(1:nTrials);
    % FeedbackWaitingTime = rand(nTrials,1)*10; %delete this
    % FeedbackWaitingTime = FeedbackWaitingTime';  %delete this
    % FeedbackDelay = rand(nTrials,1)*10; %delete this
    % FeedbackDelay= FeedbackDelay'; 
    
    RewardProb = SessionData.Custom.TrialData.RewardProb(:, 1:nTrials);
    LightLeft = SessionData.Custom.TrialData.LightLeft(1:nTrials);
    LightLeftRight = [LightLeft; 1-LightLeft]; 
    ChoiceLeftRight = [ChoiceLeft; 1-ChoiceLeft]; 
    
    BlockNumber = SessionData.Custom.TrialData.BlockNumber(:, 1:nTrials);
    BlockTrialNumber = SessionData.Custom.TrialData.BlockTrialNumber(:, 1:nTrials);
    
    % for files before April 2023, no DrinkingTime is available
    try
        DrinkingTime = SessionData.Custom.TrialData.DrinkingTime(1:nTrials);
    catch
        DrinkingTime = nan(1, nTrials);
    end
    
    LeftFeedbackDelayGraceTime = [];
    RightFeedbackDelayGraceTime = [];
    FirstDrinkingTime = [];
    LatestRewardTimestamp = [];
    for iTrial = 1:nTrials
        if ChoiceLeft(iTrial) == 1
            LeftFeedbackDelayGraceTime = [LeftFeedbackDelayGraceTime;...
                                          SessionData.RawEvents.Trial{iTrial}.States.LInGrace(:,2) -...
                                          SessionData.RawEvents.Trial{iTrial}.States.LInGrace(:,1)];
        elseif ChoiceLeft(iTrial) == 0
            RightFeedbackDelayGraceTime = [RightFeedbackDelayGraceTime;...
                                           SessionData.RawEvents.Trial{iTrial}.States.RInGrace(:,2) -...
                                           SessionData.RawEvents.Trial{iTrial}.States.RInGrace(:,1)];
        end
        
        FirstDrinkingTime = [FirstDrinkingTime SessionData.RawEvents.Trial{iTrial}.States.Drinking(1,1)];
        if iTrial == 1
            LatestRewardTimestamp(iTrial) = 0;
        elseif isnan(SessionData.RawEvents.Trial{iTrial-1}.States.Drinking(1,1))
            LatestRewardTimestamp(iTrial) = LatestRewardTimestamp(iTrial-1);
        else
            LatestRewardTimestamp(iTrial) = SessionData.RawEvents.Trial{iTrial-1}.States.Drinking(1,1) + SessionData.TrialStartTimestamp(iTrial-1);
        end
    end
    LatestRewardTime = SessionData.TrialStartTimestamp - LatestRewardTimestamp;
    
    LeftFeedbackDelayGraceTime = LeftFeedbackDelayGraceTime(~isnan(LeftFeedbackDelayGraceTime))';
    LeftFeedbackDelayGraceTime = LeftFeedbackDelayGraceTime(LeftFeedbackDelayGraceTime < SessionData.SettingsFile.GUI.FeedbackDelayGrace - 0.0001);
    RightFeedbackDelayGraceTime = RightFeedbackDelayGraceTime(~isnan(RightFeedbackDelayGraceTime))';
    RightFeedbackDelayGraceTime = RightFeedbackDelayGraceTime(RightFeedbackDelayGraceTime < SessionData.SettingsFile.GUI.FeedbackDelayGrace - 0.0001);
    
    RewardMagnitude = SessionData.Custom.TrialData.RewardMagnitude(:, 1:nTrials);
    TrialStartTimeStamp = SessionData.TrialStartTimestamp;
    TrialEndTimeStamp = SessionData.TrialEndTimestamp;

    idxTrial = 1:nTrials;
    SessionColor = [1, 1, 1] * 0.85; % ([1, 1, 1] - iSession / length(DataHolder)) * 0.9;
    
    %% Analysis across sessions
    % Lau-Glimcher Model
    try
        HistoryKernelSize = 5;

        Choices = [];
        Rewards = [];
        
        ChoiceLeftCoding = ChoiceLeft * 2 - 1;
        RewardedLeftCoding = Rewarded .* ChoiceLeftCoding;
        
        for i = 1:HistoryKernelSize
            Choices(:, i) = [zeros(i, 1); ChoiceLeftCoding(1:end-i)'];
            Rewards(:, i) = [zeros(i, 1); RewardedLeftCoding(1:end-i)'];
        end
        
        X = [Choices, Rewards];
        X(isnan(X)) = 0;

        LauGlimcherGLM = fitglm(X, ChoiceLeft', 'distribution', 'binomial');

        % predict choices
        PredictedLeftChoiceProb = LauGlimcherGLM.Fitted.Response;
        LogOdds = LauGlimcherGLM.Fitted.LinearPredictor;   %logodds for both: left and right

        PredictedChoice = double(PredictedLeftChoiceProb>=0.5);
        PredictedChoice(isnan(ChoiceLeft)) = nan;
        
        ExploringTrial = find(abs(ChoiceLeft - PredictedLeftChoiceProb') >= 0.5);
        ExploitingTrial = find(abs(ChoiceLeft - PredictedLeftChoiceProb') < 0.5);
            
    catch
        disp(strcat('Error: running model in iSession ', num2str(iSession)));
        continue
        
    end
    
    AllPredictedProb = [AllPredictedProb, PredictedLeftChoiceProb'];
    AllLogOdds = [AllLogOdds, LogOdds'];
    AllChoiceLeft = [AllChoiceLeft, ChoiceLeft];

    % Psychometric
    ValidTrial = ~isnan(ChoiceLeft); % and EarlyWithdrawal is always 0
    ValidLogOdds = LogOdds(ValidTrial);
    ValidChoice = ChoiceLeft(ValidTrial)';
    
    Bin = linspace(-5, 5, 11);
    [XData, YData, Error] = BinData(ValidLogOdds, ValidChoice, Bin);
    ValidData = ~isnan(XData) & ~isnan(YData) & ~isnan(Error);
    
    ChoicePsychometricLine{iSession} = line(PsychometricAxes,...
                                            'xdata', XData(ValidData),...
                                            'ydata', YData(ValidData) * 100,...
                                            'LineStyle', '-',...
                                            'LineWidth', 0.5,...
                                            'Color', SessionColor);
    
    % Coefficient of Lau-Glimcher GLM
    XData = 1:HistoryKernelSize;
    ChoiceCoefficients(iSession, :) = LauGlimcherGLM.Coefficients.Estimate(2:1+HistoryKernelSize);
    RewardCoefficients(iSession, :) = LauGlimcherGLM.Coefficients.Estimate(7:1+2*HistoryKernelSize);
    Intercept(iSession, :) = LauGlimcherGLM.Coefficients.Estimate(1) .* ones(flip(size(XData)));

    ChoiceCoefficientLine{iSession} = line(ModelCoefficientAxes,...
                                           'xdata', -XData,...
                                           'ydata', ChoiceCoefficients(iSession,:)',...
                                           'LineStyle', ':',...
                                           'Color', SessionColor);

    RewardCoefficientLine{iSession} = line(ModelCoefficientAxes,...
                                           'xdata', -XData,...
                                           'ydata', RewardCoefficients(iSession,:)',...
                                           'LineStyle', '-',...
                                           'Color', SessionColor);

    InterceptLine{iSession} = line(ModelCoefficientAxes,...
                                   'xdata', -XData,...
                                   'ydata', Intercept(iSession, :),...
                                   'LineStyle', '--',...
                                   'Color', SessionColor);
    
    % Vevaiometric
    NotBaited = any(~Baited .* ChoiceLeftRight, 1) & (IncorrectChoice ~= 1);
    Exploit = ChoiceLeft == (LogOdds'>0);
    
    ExploringTITrial = NotBaited & ~Exploit;
    ExploitingTITrial = NotBaited & Exploit;
    ExploringTI = FeedbackWaitingTime(ExploringTITrial);
    ExploitingTI = FeedbackWaitingTime(ExploitingTITrial);
    
    ExploringLogOdds = LogOdds(ExploringTITrial)';
    ExploitingLogOdds = LogOdds(ExploitingTITrial)';
    
    AllExploringTI = [AllExploringTI, ExploringTI];
    AllExploitingTI = [AllExploitingTI, ExploitingTI];
    
    AllExploringLogOdds = [AllExploringLogOdds, ExploringLogOdds];
    AllExploitingLogOdds = [AllExploitingLogOdds, ExploitingLogOdds];
    
    % ExploringTrialTIScatter{iSession} = scatter(VevaiometricAxes, ExploringLogOdds, ExploringTI,...
    %                                             'Marker', '.',...
    %                                             'MarkerEdgeColor', carrot,...
    %                                             'SizeData', 1);
    % 
    % ExploitingTrialTIScatter{iSession} = scatter(VevaiometricAxes, ExploitingLogOdds, ExploitingTI,...
    %                                              'Marker', '.',...
    %                                              'MarkerEdgeColor', violet,...
    %                                              'SizeData', 1);
    
    [ExploreLineXData, ExploreLineYData] = Binvevaio(ExploringLogOdds, ExploringTI, 10);
    [ExploitLineXData, ExploitLineYData] = Binvevaio(ExploitingLogOdds, ExploitingTI, 10);
    
    ExploreLine{iSession} = line(VevaiometricAxes,...
                                 'XData', ExploreLineXData,...
                                 'YData', ExploreLineYData,...
                                 'LineStyle', '-',...
                                 'Color', 1-SessionColor ./ 2);
    
    ExploitLine{iSession} = line(VevaiometricAxes,...
                                 'XData', ExploitLineXData,...
                                 'YData', ExploitLineYData,...
                                 'LineStyle', '-',...
                                 'Color', SessionColor);
    
    % Vevaiometric (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
    LeftTITrial = NotBaited & ChoiceLeft==1;
    RightTITrial = NotBaited & ChoiceLeft==0;
    LeftTI = FeedbackWaitingTime(LeftTITrial);
    RightTI = FeedbackWaitingTime(RightTITrial);
    
    AbsModelResiduals = abs(LauGlimcherGLM.Residuals.Raw);
    
    LeftAbsResidual = AbsModelResiduals(LeftTITrial)';
    RightAbsResidual = AbsModelResiduals(RightTITrial)';
    
    AllLeftTI = [AllLeftTI, LeftTI];
    AllRightTI = [AllRightTI, RightTI];
    AllLeftAbsResidual = [AllLeftAbsResidual, LeftAbsResidual];
    AllRightAbsResidual = [AllRightAbsResidual, RightAbsResidual];
    
    %{
    [LeftTILineXData, LeftTILineYData] = Binvevaio(LeftAbsResidual, LeftTI, 10);
    [RightTILineXData, RightTILineYData] = Binvevaio(RightAbsResidual, RightTI, 10);
        
    LeftTILine{iSession} = line(LRVevaiometricAxes,...
                                'XData', LeftTILineXData,...
                                'YData', LeftTILineYData,...
                                'LineStyle', '-',...
                                'Color', 1-SessionColor ./ 2);
    
    RightTILine{iSession} = line(LRVevaiometricAxes,...
                                 'XData', RightTILineXData,...
                                 'YData', RightTILineYData,...
                                 'LineStyle', '-',...
                                 'Color', SessionColor);
    %}
    
    % Vevaiometric z-score (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
    [LeftTISqrtZScore, LeftTIMu, LeftTISigma] = zscore(sqrt(LeftTI));
    [RightTISqrtZScore, RightTIMu, RightTISigma] = zscore(sqrt(RightTI));
    
    AllLeftTISqrtZScore = [AllLeftTISqrtZScore, LeftTISqrtZScore];
    AllRightTISqrtZScore = [AllRightTISqrtZScore, RightTISqrtZScore];

    %{
    [LeftTIZScoreLineXData, LeftTIZScoreLineYData] = Binvevaio(LeftAbsResidual, LeftTIZScore, 10);
    [RightTIZScoreLineXData, RightTIZScoreLineYData] = Binvevaio(RightAbsResidual, RightTIZScore, 10);
    
    LeftTIZScoreLine{iSession} = line(LRVevaiometricZScoreAxes,...
                                      'XData', LeftTIZScoreLineXData,...
                                      'YData', LeftTIZScoreLineYData,...
                                      'LineStyle', '-',...
                                      'Color', 1-SessionColor ./ 2);
    
    RightTIZScoreLine{iSession} = line(LRVevaiometricZScoreAxes,...
                                       'XData', RightTIZScoreLineXData,...
                                       'YData', RightTIZScoreLineYData,...
                                       'LineStyle', '-',...
                                       'Color', SessionColor);
    %}
    
    % Vevaiometric z-score
    % have to calculate last as it needs the z-score info from
    % Left/Right-TI
    ExploringMu = (NotBaited & ~Exploit & ChoiceLeft==1) * LeftTIMu +...
                  (NotBaited & ~Exploit & ChoiceLeft==0) * RightTIMu;
    ExploringMu = ExploringMu(ExploringTITrial);

    ExploringSigma = (NotBaited & ~Exploit & ChoiceLeft==1) * LeftTISigma +...
                     (NotBaited & ~Exploit & ChoiceLeft==0) * RightTISigma;
    ExploringSigma = ExploringSigma(ExploringTITrial);

    ExploitingMu = (NotBaited & Exploit & ChoiceLeft==1) * LeftTIMu +...
                   (NotBaited & Exploit & ChoiceLeft==0) * RightTIMu;
    ExploitingMu = ExploitingMu(ExploitingTITrial);

    ExploitingSigma = (NotBaited & Exploit & ChoiceLeft==1) * LeftTISigma +...
                      (NotBaited & Exploit & ChoiceLeft==0) * RightTISigma;
    ExploitingSigma = ExploitingSigma(ExploitingTITrial);
    
    ExploringTISqrtZScore = (sqrt(ExploringTI) - ExploringMu) ./ ExploringSigma;
    ExploitingTISqrtZScore = (sqrt(ExploitingTI) - ExploitingMu) ./ ExploitingSigma;
    
    AllExploringTISqrtZScore = [AllExploringTISqrtZScore, ExploringTISqrtZScore];
    AllExploitingTISqrtZScore = [AllExploitingTISqrtZScore, ExploitingTISqrtZScore];

    % ExploringTrialTIZScoreScatter{iSession} = scatter(VevaiometricZScoreAxes, ExploringLogOdds, ExploringTIZScore,...
    %                                                   'Marker', '.',...
    %                                                   'MarkerEdgeColor', carrot,...
    %                                                   'SizeData', 1);
    % 
    % ExploitingTrialTIZScoreScatter{iSession} = scatter(VevaiometricZScoreAxes, ExploitingLogOdds, ExploitingTIZScore,...
    %                                                    'Marker', '.',...
    %                                                    'MarkerEdgeColor', violet,...
    %                                                    'SizeData', 1);

    [ExploreSqrtZScoreLineXData, ExploreSqrtZScoreLineYData] = Binvevaio(ExploringLogOdds, ExploringTISqrtZScore, 10);
    [ExploitSqrtZScoreLineXData, ExploitSqrtZScoreLineYData] = Binvevaio(ExploitingLogOdds, ExploitingTISqrtZScore, 10);
    
    ExploreSqrtZScoreLine{iSession} = line(VevaiometricSqrtZScoreAxes,...
                                           'XData', ExploreSqrtZScoreLineXData,...
                                           'YData', ExploreSqrtZScoreLineYData,...
                                           'LineStyle', '-',...
                                           'Color', 1-SessionColor ./ 2);
    
    ExploitSqrtZScoreLine{iSession} = line(VevaiometricSqrtZScoreAxes,...
                                           'XData', ExploitSqrtZScoreLineXData,...
                                           'YData', ExploitSqrtZScoreLineYData,...
                                           'LineStyle', '-',...
                                           'Color', SessionColor);
    
    %% Explore/exploit level around block switch
    % Block 1 transition (1st -> 2nd)
    BlockTransitionIdx = find(BlockTrialNumber == 1 & BlockNumber == 2);
    Block1TransitionYData(iSession, :) = AbsModelResiduals(BlockTransitionIdx - 10:BlockTransitionIdx + 50) >= 0.5;

    % Block 2 transition (2nd -> 3rd)
    BlockTransitionIdx = find(BlockTrialNumber == 1 & BlockNumber == 3);
    Block2TransitionYData(iSession, :) = AbsModelResiduals(BlockTransitionIdx - 10:BlockTransitionIdx + 50) >= 0.5;

    % Block 3 transition (3rd -> 4th)
    BlockTransitionIdx = find(BlockTrialNumber == 1 & BlockNumber == 4);
    if ~isempty(BlockTransitionIdx) & BlockTransitionIdx + 50 <= nTrials
        Block3TransitionYData(iSession, :) = AbsModelResiduals(BlockTransitionIdx - 10:BlockTransitionIdx + 50) >= 0.5;
    end

    % Block 4 transition (4th -> 5th)
    BlockTransitionIdx = find(BlockTrialNumber == 1 & BlockNumber == 5);
    if ~isempty(BlockTransitionIdx) & BlockTransitionIdx + 50 <= nTrials
        Block4TransitionYData(iSession, :) = AbsModelResiduals(BlockTransitionIdx - 10:BlockTransitionIdx + 50) >= 0.5;
    end

    % Explore/exploit level against reward rate
    RewardedMagnitude = sum(RewardMagnitude .* ChoiceLeftRight) .* Rewarded;
    RewardedMagnitude(isnan(RewardedMagnitude)) = 0;

    TrialStartTimestamp = SessionData.TrialStartTimestamp(:, 1:nTrials) - SessionData.TrialStartTimestamp(1);
    TrialTimeDuration = [0 diff(TrialStartTimestamp)];

    RewardedHistory = 0;
    for iTrial = 1:nTrials-1
        RewardedHistory(iTrial+1) = RewardedHistory(iTrial) * exp(-TrialTimeDuration(iTrial + 1)/40) +...
                                    RewardedMagnitude(iTrial);
    end
    
    AllAbsResidual = [AllAbsResidual, AbsModelResiduals'];
    AllRewardRate = [AllRewardRate, RewardedHistory];
    
    AllLeftTIRewardRate = [AllLeftTIRewardRate, RewardedHistory(LeftTITrial)];
    AllRightTIRewardRate = [AllRightTIRewardRate, RewardedHistory(RightTITrial)];
    
    %% Move time
    % Vevaiometric MT
    ExploringMT = MoveTime(~Exploit & ~isnan(ChoiceLeft));
    ExploitingMT = MoveTime(Exploit & ~isnan(ChoiceLeft));
    
    ExploringMTLogOdds = LogOdds(~Exploit & ~isnan(ChoiceLeft))';
    ExploitingMTLogOdds = LogOdds(Exploit & ~isnan(ChoiceLeft))';
    
    AllExploringMT = [AllExploringMT, ExploringMT];
    AllExploitingMT = [AllExploitingMT, ExploitingMT];
    
    AllExploringMTLogOdds = [AllExploringMTLogOdds, ExploringMTLogOdds];
    AllExploitingMTLogOdds = [AllExploitingMTLogOdds, ExploitingMTLogOdds];
    
    [ExploreLineXData, ExploreLineYData] = Binvevaio(ExploringMTLogOdds, ExploringMT, 10);
    [ExploitLineXData, ExploitLineYData] = Binvevaio(ExploitingMTLogOdds, ExploitingMT, 10);
    
    ExploreMTLine{iSession} = line(VevaiometricMTAxes,...
                                   'XData', ExploreLineXData,...
                                   'YData', ExploreLineYData,...
                                   'LineStyle', '-',...
                                   'Color', 1-SessionColor ./ 2);
    
    ExploitMTLine{iSession} = line(VevaiometricMTAxes,...
                                   'XData', ExploitLineXData,...
                                   'YData', ExploitLineYData,...
                                   'LineStyle', '-',...
                                   'Color', SessionColor);
    
    % Vevaiometric MT (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
    LeftMT = MoveTime(ChoiceLeft==1);
    RightMT = MoveTime(ChoiceLeft==0);
    
    LeftMTAbsResidual = AbsModelResiduals(ChoiceLeft==1)';
    RightMTAbsResidual = AbsModelResiduals(ChoiceLeft==0)';
    
    AllLeftMT = [AllLeftMT, LeftMT];
    AllRightMT = [AllRightMT, RightMT];
    AllLeftMTAbsResidual = [AllLeftMTAbsResidual, LeftMTAbsResidual];
    AllRightMTAbsResidual = [AllRightMTAbsResidual, RightMTAbsResidual];
    
    % Vevaiometric MT z-score (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
    %{
    % NOT USE AS NOT NORMAL DISTRIBUTION
    LeftMTSigma = mle(sqrt(LeftMT), 'Distribution', 'Half Normal');
    RightMTSigma = mle(sqrt(RightMT), 'Distribution', 'Half Normal');
    LeftMTSqrtZScore = sqrt(LeftMT) / LeftMTSigma;
    RightMTSqrtZScore = sqrt(RightMT) / RightMTSigma;
    
    AllLeftMTSqrtZScore = [AllLeftMTSqrtZScore, LeftMTSqrtZScore];
    AllRightMTSqrtZScore = [AllRightMTSqrtZScore, RightMTSqrtZScore];
    
    % Vevaiometric MT z-score
    % have to calculate last as it needs the z-score info from
    % Left/Right-MT
    ExploringSigma = (~Exploit & ChoiceLeft==1) * LeftMTSigma +...
                     (~Exploit & ChoiceLeft==0) * RightMTSigma;
    ExploringSigma = ExploringSigma(~Exploit & ~isnan(ChoiceLeft));

    ExploitingSigma = (Exploit & ChoiceLeft==1) * LeftMTSigma +...
                      (Exploit & ChoiceLeft==0) * RightMTSigma;
    ExploitingSigma = ExploitingSigma(Exploit & ~isnan(ChoiceLeft));
    
    ExploringMTSqrtZScore = sqrt(ExploringMT) ./ ExploringSigma;
    ExploitingMTSqrtZScore = sqrt(ExploitingMT) ./ ExploitingSigma;
    
    AllExploringMTSqrtZScore = [AllExploringMTSqrtZScore, ExploringMTSqrtZScore];
    AllExploitingMTSqrtZScore = [AllExploitingMTSqrtZScore, ExploitingMTSqrtZScore];
    
    [ExploreSqrtZScoreLineXData, ExploreSqrtZScoreLineYData] = Binvevaio(ExploringMTLogOdds, ExploringMTSqrtZScore, 10);
    [ExploitSqrtZScoreLineXData, ExploitSqrtZScoreLineYData] = Binvevaio(ExploitingMTLogOdds, ExploitingMTSqrtZScore, 10);
    
    ExploreMTSqrtZScoreLine{iSession} = line(VevaiometricMTSqrtZScoreAxes,...
                                             'XData', ExploreSqrtZScoreLineXData,...
                                             'YData', ExploreSqrtZScoreLineYData,...
                                             'LineStyle', '-',...
                                             'Color', 1-SessionColor ./ 2);
    
    ExploitMTSqrtZScoreLine{iSession} = line(VevaiometricMTSqrtZScoreAxes,...
                                             'XData', ExploitSqrtZScoreLineXData,...
                                             'YData', ExploitSqrtZScoreLineYData,...
                                             'LineStyle', '-',...
                                             'Color', SessionColor);
    %}
end

%% Average across sessions
% Psychometric
ValidTrial = ~isnan(AllChoiceLeft); % and EarlyWithdrawal is always 0
ValidLogOdds = AllLogOdds(ValidTrial);
ValidChoice = AllChoiceLeft(ValidTrial)';

Bin = linspace(-5, 5, 11);
[XData, YData, Error] = BinData(ValidLogOdds, ValidChoice, Bin);
ValidData = ~isnan(XData) & ~isnan(YData) & ~isnan(Error);

ChoicePsychometricLine{iSession} = line(PsychometricAxes,...
                                        'xdata', XData(ValidData),...
                                        'ydata', YData(ValidData) * 100,...
                                        'LineStyle', '-',...
                                        'LineWidth', 0.5,...
                                        'Color', 'k');

% Coefficient of Lau-Glimcher GLM
XData = 1:HistoryKernelSize;
AverageChoiceCoefficients = mean(ChoiceCoefficients);
AverageRewardCoefficients = mean(RewardCoefficients);
AverageIntercept = mean(Intercept);

ChoiceCoefficientLine{iSession + 1} = line(ModelCoefficientAxes,...
                                           'xdata', -XData,...
                                           'ydata', AverageChoiceCoefficients',...
                                           'LineStyle', ':',...
                                           'Color', 'k');

RewardCoefficientLine{iSession + 1} = line(ModelCoefficientAxes,...
                                           'xdata', -XData,...
                                           'ydata', AverageRewardCoefficients',...
                                           'LineStyle', '-',...
                                           'Color', 'k');

InterceptLine{iSession + 1} = line(ModelCoefficientAxes,...
                                   'xdata', -XData,...
                                   'ydata', AverageIntercept,...
                                   'LineStyle', '--',...
                                   'Color', 'k');

% Vevaiometric
[ExploreLineXData, ExploreLineYData] = Binvevaio(AllExploringLogOdds, AllExploringTI, 10);
[ExploitLineXData, ExploitLineYData] = Binvevaio(AllExploitingLogOdds, AllExploitingTI, 10);

ExploreLine{iSession + 1} = line(VevaiometricAxes,...
                                 'XData', ExploreLineXData,...
                                 'YData', ExploreLineYData,...
                                 'LineStyle', '-',...
                                 'LineWidth', 2,...
                                 'Color', carrot);

ExploitLine{iSession + 1} = line(VevaiometricAxes,...
                                 'XData', ExploitLineXData,...
                                 'YData', ExploitLineYData,...
                                 'LineStyle', '-',...
                                 'LineWidth', 2,...
                                 'Color', violet);

% Vevaiometric z-score
[ExploreSqrtZScoreLineXData, ExploreSqrtZScoreLineYData] = Binvevaio(AllExploringLogOdds, AllExploringTISqrtZScore, 10);
[ExploitSqrtZScoreLineXData, ExploitSqrtZScoreLineYData] = Binvevaio(AllExploitingLogOdds, AllExploitingTISqrtZScore, 10);

ExploreSqrtZScoreLine{iSession + 1} = line(VevaiometricSqrtZScoreAxes,...
                                       'XData', ExploreSqrtZScoreLineXData,...
                                       'YData', ExploreSqrtZScoreLineYData,...
                                       'LineStyle', '-',...
                                       'LineWidth', 2,...
                                       'Color', carrot);

ExploitSqrtZScoreLine{iSession + 1} = line(VevaiometricSqrtZScoreAxes,...
                                       'XData', ExploitSqrtZScoreLineXData,...
                                       'YData', ExploitSqrtZScoreLineYData,...
                                       'LineStyle', '-',...
                                       'LineWidth', 2,...
                                       'Color', violet);

% Vevaiometric (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
LeftTIScatter = scatter(LRVevaiometricAxes,...
                        AllLeftAbsResidual,...
                        AllLeftTI);
set(LeftTIScatter,...
    'SizeData', 1,...
    'Marker', '.',...
    'CData', sand);

RightTIScatter = scatter(LRVevaiometricAxes,...
                         AllRightAbsResidual,...
                         AllRightTI);
set(RightTIScatter,...
    'SizeData', 1,...
    'Marker', '.',...
    'CData', turquoise);

[LeftTILineXData, LeftTILineYData] = Binvevaio(AllLeftAbsResidual, AllLeftTI, 10);
[RightTILineXData, RightTILineYData] = Binvevaio(AllRightAbsResidual, AllRightTI, 10);

LefTILine = line(LRVevaiometricAxes,...
                 'XData', LeftTILineXData,...
                 'YData', LeftTILineYData,...
                 'LineStyle', '-',...
                 'LineWidth', 2,...
                 'Color', sand);

RightTILine = line(LRVevaiometricAxes,...
                   'XData', RightTILineXData,...
                   'YData', RightTILineYData,...
                   'LineStyle', '-',...
                   'LineWidth', 2,...
                   'Color', turquoise);

[LeftRValue, LeftpValue] = corrcoef(AllLeftAbsResidual, AllLeftTI);
[RightRValue, RightpValue] = corrcoef(AllRightAbsResidual, AllRightTI);

LeftTIStatsText = text(LRVevaiometricAxes, 0.3, 11,...
                       sprintf('Left: R = %5.3f, p = %5.3f',...
                               LeftRValue(1, 2),...
                               LeftpValue(1, 2)),...
                       'FontSize', 8,...
                       'Color', sand);

RightTIStatsText = text(LRVevaiometricAxes, 0.3, 10,...
                        sprintf('Right: R = %5.3f, p = %5.3f',...
                                RightRValue(1, 2),...
                                RightpValue(1, 2)),...
                        'FontSize', 8,...
                        'Color', turquoise);

% Vevaiometric z-score (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
LeftTIZScoreScatter = scatter(LRVevaiometricSqrtZScoreAxes,...
                              AllLeftAbsResidual,...
                              AllLeftTISqrtZScore);
set(LeftTIZScoreScatter,...
    'SizeData', 1,...
    'Marker', '.',...
    'CData', sand);

RightTIZScoreScatter = scatter(LRVevaiometricSqrtZScoreAxes,...
                               AllRightAbsResidual,...
                               AllRightTISqrtZScore);
set(RightTIZScoreScatter,...
    'SizeData', 1,...
    'Marker', '.',...
    'CData', turquoise);

[LeftTISqrtZScoreLineXData, LeftTISqrtZScoreLineYData] = Binvevaio(AllLeftAbsResidual, AllLeftTISqrtZScore, 10);
[RightTISqrtZScoreLineXData, RightTISqrtZScoreLineYData] = Binvevaio(AllRightAbsResidual, AllRightTISqrtZScore, 10);

LeftTISqrtZScoreLine{iSession + 1} = line(LRVevaiometricSqrtZScoreAxes,...
                                          'XData', LeftTISqrtZScoreLineXData,...
                                          'YData', LeftTISqrtZScoreLineYData,...
                                          'LineStyle', '-',...
                                          'LineWidth', 2,...
                                          'Color', sand);

RightTISqrtZScoreLine{iSession + 1} = line(LRVevaiometricSqrtZScoreAxes,...
                                           'XData', RightTISqrtZScoreLineXData,...
                                           'YData', RightTISqrtZScoreLineYData,...
                                           'LineStyle', '-',...
                                           'LineWidth', 2,...
                                           'Color', turquoise);

[LeftRValue, LeftpValue] = corrcoef(AllLeftAbsResidual, AllLeftTISqrtZScore);
[RightRValue, RightpValue] = corrcoef(AllRightAbsResidual, AllRightTISqrtZScore);

LeftTISqrtZScoreStatsText = text(LRVevaiometricSqrtZScoreAxes, 0.3, 1.8,...
                                 sprintf('Left: R = %5.3f, p = %5.3f',...
                                         LeftRValue(1, 2),...
                                         LeftpValue(1, 2)),...
                                 'FontSize', 8,...
                                 'Color', sand);

RightTISqrtZScoreStatsText = text(LRVevaiometricSqrtZScoreAxes, 0.3, 1.5,...
                                  sprintf('Right: R = %5.3f, p = %5.3f',...
                                          RightRValue(1, 2),...
                                          RightpValue(1, 2)),...
                                  'FontSize', 8,...
                                  'Color', turquoise);

%% Explore/exploit level around block switch
% Block 1 transition (1st -> 2nd)
Block1TransitionYData = Block1TransitionYData(1:iSession, :);
AverageBlock1Transition = mean(Block1TransitionYData, 'omitnan');
Block1TransitionLine = line(BlockTransitionAxes,...
                            'xdata', -10:50,...
                            'ydata', smooth(AverageBlock1Transition) * 100,...
                            'LineStyle', '-',...
                            'Marker', 'none',...
                            'Color', 0.0 * [1 1 1]);

% Block 2 transition (2nd -> 3rd)
Block2TransitionYData = Block2TransitionYData(1:iSession, :);
AverageBlock2Transition = mean(Block2TransitionYData, 'omitnan');
Block2TransitionLine = line(BlockTransitionAxes,...
                            'xdata', -10:50,...
                            'ydata', smooth(AverageBlock2Transition) * 100,...
                            'LineStyle', '-',...
                            'Marker', 'none',...
                            'Color', 0.2 * [1 1 1]);

% Block 3 transition (3rd -> 4th)
Block3TransitionYData = Block3TransitionYData(1:iSession, :);
AverageBlock3Transition = mean(Block3TransitionYData, 'omitnan');
Block3TransitionLine = line(BlockTransitionAxes,...
                            'xdata', -10:50,...
                            'ydata', smooth(AverageBlock3Transition) * 100,...
                            'LineStyle', '-',...
                            'Marker', 'none',...
                            'Color', 0.4 * [1 1 1]);

% Block 4 transition (4th -> 5th)
Block4TransitionYData = Block4TransitionYData(1:iSession, :);
AverageBlock4Transition = mean(Block4TransitionYData, 'omitnan');
Block4TransitionLine = line(BlockTransitionAxes,...
                            'xdata', -10:50,...
                            'ydata', smooth(AverageBlock4Transition) * 100,...
                            'LineStyle', '-',...
                            'Marker', 'none',...
                            'Color', 0.6 * [1 1 1]);

LegendString = {'1st -> 2nd', '2nd -> 3rd', '3rd -> 4th', '4th -> 5th'};
BlockTransitionLegend = legend(BlockTransitionAxes, LegendString,...
                               'Position', [0.22    0.07    0.09    0.08],...
                               'NumColumns', 1);

% Explore/exploit level against reward rate
ValidData = ~isnan(AllAbsResidual)& ~isnan(AllRewardRate);
RewardRateScatter = scatter(RewardRateAxes, AllAbsResidual(ValidData), AllRewardRate(ValidData));

set(RewardRateScatter,...
    'Marker', '.',...
    'SizeData', 1,...
    'CData', 0.6 * [1, 1, 1]);

[RValue, pValue] = corrcoef(AllAbsResidual(ValidData), AllRewardRate(ValidData));
RewardRateStatText = text(RewardRateAxes, 0.3, 90,...
                          sprintf('R = %5.3f, p = %5.3f',...
                                  RValue(1, 2),...
                                  pValue(1, 2)),...
                          'FontSize', 8);

% TI distribution per left-right and explore/exploit
AllLeftExploitation = AllLeftAbsResidual < 0.5;
AllRightExploitation = AllRightAbsResidual < 0.5;

AllLeftExploitingTI = AllLeftTI(AllLeftExploitation == 1);
XData = zeros(size(AllLeftExploitingTI)) - 0.2;
LeftExploitingTISwarmchart = swarmchart(TIDistributionAxes,...
                                        XData,...
                                        AllLeftExploitingTI,...
                                        'Marker', '.',...
                                        'MarkerEdgeColor', violet,...
                                        'XJitter', 'density',...
                                        'XJitterWidth', 0.2);

LeftExploitingBoxchart = boxchart(TIDistributionAxes, XData, AllLeftExploitingTI);
set(LeftExploitingBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'w',...
    'BoxFaceAlpha', 0,...
    'WhiskerLineColor', 'w',...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllLeftExploringTI = AllLeftTI(AllLeftExploitation == 0);
XData = zeros(size(AllLeftExploringTI)) + 0.2;
LeftExploringTISwarmchart = swarmchart(TIDistributionAxes,...
                                       XData,...
                                       AllLeftExploringTI,...
                                       'Marker', '.',...
                                       'MarkerEdgeColor', carrot,...
                                       'XJitter', 'density',...
                                       'XJitterWidth', 0.2);

LeftExploringBoxchart = boxchart(TIDistributionAxes, XData, AllLeftExploringTI);
set(LeftExploringBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllRightExploitingTI = AllRightTI(AllRightExploitation == 1);
XData = ones(size(AllRightExploitingTI)) - 0.2;
RightExploitingTISwarmchart = swarmchart(TIDistributionAxes,...
                                         XData,...
                                         AllRightExploitingTI,...
                                         'Marker', '.',...
                                         'MarkerEdgeColor', violet,...
                                         'XJitter', 'density',...
                                         'XJitterWidth', 0.2);

RightExploitingBoxchart = boxchart(TIDistributionAxes, XData, AllRightExploitingTI);
set(RightExploitingBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'w',...
    'BoxFaceAlpha', 0,...
    'WhiskerLineColor', 'w',...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllRightExploringTI = AllRightTI(AllRightExploitation == 0);
XData = ones(size(AllRightExploringTI)) + 0.2;
RightExploringTISwarmchart = swarmchart(TIDistributionAxes,...
                                        XData,...
                                        AllRightExploringTI,...
                                        'Marker', '.',...
                                        'MarkerEdgeColor', carrot,...
                                        'XJitter', 'density',...
                                        'XJitterWidth', 0.2);

RightExploringBoxchart = boxchart(TIDistributionAxes, XData, AllRightExploringTI);
set(RightExploringBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

% TI-ZScore distribution per left-right and explore/exploit
AllLeftExploitingSqrtTIZScore = AllLeftTISqrtZScore(AllLeftExploitation == 1);
XData = zeros(size(AllLeftExploitingSqrtTIZScore)) - 0.2;
LeftExploitingTISqrtZScoreSwarmchart = swarmchart(TISqrtZScoreDistributionAxes,...
                                                  XData,...
                                                  AllLeftExploitingSqrtTIZScore,...
                                                  'Marker', '.',...
                                                  'MarkerEdgeColor', violet,...
                                                  'XJitter', 'density',...
                                                  'XJitterWidth', 0.2);

LeftExploitingSqrtZScoreBoxchart = boxchart(TISqrtZScoreDistributionAxes, XData, AllLeftExploitingSqrtTIZScore);
set(LeftExploitingSqrtZScoreBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'w',...
    'BoxFaceAlpha', 0,...
    'WhiskerLineColor', 'w',...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllLeftExploringTISqrtZScore = AllLeftTISqrtZScore(AllLeftExploitation == 0);
XData = zeros(size(AllLeftExploringTISqrtZScore)) + 0.2;
LeftExploringTISqrtZScoreSwarmchart = swarmchart(TISqrtZScoreDistributionAxes,...
                                                 XData,...
                                                 AllLeftExploringTISqrtZScore,...
                                                 'Marker', '.',...
                                                 'MarkerEdgeColor', carrot,...
                                                 'XJitter', 'density',...
                                                 'XJitterWidth', 0.2);

LeftExploringSqrtZScoreBoxchart = boxchart(TISqrtZScoreDistributionAxes, XData, AllLeftExploringTISqrtZScore);
set(LeftExploringSqrtZScoreBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllRightExploitingTISqrtZScore = AllRightTISqrtZScore(AllRightExploitation == 1);
XData = ones(size(AllRightExploitingTISqrtZScore)) - 0.2;
RightExploitingTISqrtZScoreSwarmchart = swarmchart(TISqrtZScoreDistributionAxes,...
                                                   XData,...
                                                   AllRightExploitingTISqrtZScore,...
                                                   'Marker', '.',...
                                                   'MarkerEdgeColor', violet,...
                                                   'XJitter', 'density',...
                                                   'XJitterWidth', 0.2);

RightExploitingSqrtZScoreBoxchart = boxchart(TISqrtZScoreDistributionAxes, XData, AllRightExploitingTISqrtZScore);
set(RightExploitingSqrtZScoreBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'w',...
    'BoxFaceAlpha', 0,...
    'WhiskerLineColor', 'w',...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllRightExploringTISqrtZScore = AllRightTISqrtZScore(AllRightExploitation == 0);
XData = ones(size(AllRightExploringTISqrtZScore)) + 0.2;
RightExploringTISqrtZScoreSwarmchart = swarmchart(TISqrtZScoreDistributionAxes,...
                                                  XData,...
                                                  AllRightExploringTISqrtZScore,...
                                                  'Marker', '.',...
                                                  'MarkerEdgeColor', carrot,...
                                                  'XJitter', 'density',...
                                                  'XJitterWidth', 0.2);

RightExploringSqrtZScoreBoxchart = boxchart(TISqrtZScoreDistributionAxes, XData, AllRightExploringTISqrtZScore);
set(RightExploringSqrtZScoreBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

%% Move time
% Vevaiometric
[ExploreLineXData, ExploreLineYData] = Binvevaio(AllExploringMTLogOdds, AllExploringMT, 10);
[ExploitLineXData, ExploitLineYData] = Binvevaio(AllExploitingMTLogOdds, AllExploitingMT, 10);

ExploreMTLine{iSession + 1} = line(VevaiometricMTAxes,...
                                   'XData', ExploreLineXData,...
                                   'YData', ExploreLineYData,...
                                   'LineStyle', '-',...
                                   'LineWidth', 2,...
                                   'Color', carrot);

ExploitMTLine{iSession + 1} = line(VevaiometricMTAxes,...
                                   'XData', ExploitLineXData,...
                                   'YData', ExploitLineYData,...
                                   'LineStyle', '-',...
                                   'LineWidth', 2,...
                                   'Color', violet);

% Vevaiometric z-score
%{
% NOT USE AS NOT NORMAL DISTRIBUTION
[ExploreSqrtZScoreLineXData, ExploreSqrtZScoreLineYData] = Binvevaio(AllExploringMTLogOdds, AllExploringMTSqrtZScore, 10);
[ExploitSqrtZScoreLineXData, ExploitSqrtZScoreLineYData] = Binvevaio(AllExploitingMTLogOdds, AllExploitingMTSqrtZScore, 10);

ExploreMTSqrtZScoreLine{iSession + 1} = line(VevaiometricMTSqrtZScoreAxes,...
                                             'XData', ExploreSqrtZScoreLineXData,...
                                             'YData', ExploreSqrtZScoreLineYData,...
                                             'LineStyle', '-',...
                                             'LineWidth', 2,...
                                             'Color', carrot);

ExploitMTSqrtZScoreLine{iSession + 1} = line(VevaiometricMTSqrtZScoreAxes,...
                                             'XData', ExploitSqrtZScoreLineXData,...
                                             'YData', ExploitSqrtZScoreLineYData,...
                                             'LineStyle', '-',...
                                             'LineWidth', 2,...
                                             'Color', violet);
%}

% Vevaiometric (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
LeftMTScatter = scatter(LRVevaiometricMTAxes,...
                        AllLeftMTAbsResidual,...
                        AllLeftMT);
set(LeftMTScatter,...
    'SizeData', 1,...
    'Marker', '.',...
    'CData', sand);

RightMTScatter = scatter(LRVevaiometricMTAxes,...
                         AllRightMTAbsResidual,...
                         AllRightMT);
set(RightMTScatter,...
    'SizeData', 1,...
    'Marker', '.',...
    'CData', turquoise);

[LeftTILineXData, LeftTILineYData] = Binvevaio(AllLeftMTAbsResidual, AllLeftMT, 10);
[RightTILineXData, RightTILineYData] = Binvevaio(AllRightMTAbsResidual, AllRightMT, 10);

LefMTLine = line(LRVevaiometricMTAxes,...
                 'XData', LeftTILineXData,...
                 'YData', LeftTILineYData,...
                 'LineStyle', '-',...
                 'LineWidth', 2,...
                 'Color', sand);

RightMTLine = line(LRVevaiometricMTAxes,...
                   'XData', RightTILineXData,...
                   'YData', RightTILineYData,...
                   'LineStyle', '-',...
                   'LineWidth', 2,...
                   'Color', turquoise);

[LeftRValue, LeftpValue] = corrcoef(AllLeftMTAbsResidual, AllLeftMT);
[RightRValue, RightpValue] = corrcoef(AllRightMTAbsResidual, AllRightMT);

LeftMTStatsText = text(LRVevaiometricMTAxes, 0.3, 0.45,...
                       sprintf('Left: R = %5.3f, p = %5.3f',...
                               LeftRValue(1, 2),...
                               LeftpValue(1, 2)),...
                       'FontSize', 8,...
                       'Color', sand);

RightMTStatsText = text(LRVevaiometricMTAxes, 0.3, 0.4,...
                        sprintf('Right: R = %5.3f, p = %5.3f',...
                                RightRValue(1, 2),...
                                RightpValue(1, 2)),...
                        'FontSize', 8,...
                        'Color', turquoise);

%{
% NOT USE AS NOT NORMAL DISTRIBUTION
% Vevaiometric z-score (L/R sorted residuals = abs(ChoiceLeft - P({ChoiceLeft}^))
LeftMTZScoreScatter = scatter(LRVevaiometricMTSqrtZScoreAxes,...
                              AllLeftMTAbsResidual,...
                              AllLeftMTSqrtZScore);
set(LeftMTZScoreScatter,...
    'SizeData', 1,...
    'Marker', '.',...
    'CData', sand);

RightMTZScoreScatter = scatter(LRVevaiometricMTSqrtZScoreAxes,...
                               AllRightMTAbsResidual,...
                               AllRightMTSqrtZScore);
set(RightMTZScoreScatter,...
    'SizeData', 1,...
    'Marker', '.',...
    'CData', turquoise);

[LeftMTSqrtZScoreLineXData, LeftMTSqrtZScoreLineYData] = Binvevaio(AllLeftMTAbsResidual, AllLeftMTSqrtZScore, 10);
[RightMTSqrtZScoreLineXData, RightMTSqrtZScoreLineYData] = Binvevaio(AllRightMTAbsResidual, AllRightMTSqrtZScore, 10);

LeftMTSqrtZScoreLine{iSession + 1} = line(LRVevaiometricMTSqrtZScoreAxes,...
                                          'XData', LeftMTSqrtZScoreLineXData,...
                                          'YData', LeftMTSqrtZScoreLineYData,...
                                          'LineStyle', '-',...
                                          'LineWidth', 2,...
                                          'Color', sand);

RightMTSqrtZScoreLine{iSession + 1} = line(LRVevaiometricMTSqrtZScoreAxes,...
                                           'XData', RightMTSqrtZScoreLineXData,...
                                           'YData', RightMTSqrtZScoreLineYData,...
                                           'LineStyle', '-',...
                                           'LineWidth', 2,...
                                           'Color', turquoise);

[LeftRValue, LeftpValue] = corrcoef(AllLeftMTAbsResidual, AllLeftMTSqrtZScore);
[RightRValue, RightpValue] = corrcoef(AllRightMTAbsResidual, AllRightMTSqrtZScore);

LeftMTSqrtZScoreStatsText = text(LRVevaiometricMTSqrtZScoreAxes, 0.3, 1.8,...
                                 sprintf('Left: R = %5.3f, p = %5.3f',...
                                         LeftRValue(1, 2),...
                                         LeftpValue(1, 2)),...
                                 'FontSize', 8,...
                                 'Color', sand);

RightMTSqrtZScoreStatsText = text(LRVevaiometricMTSqrtZScoreAxes, 0.3, 1.5,...
                                  sprintf('Right: R = %5.3f, p = %5.3f',...
                                          RightRValue(1, 2),...
                                          RightpValue(1, 2)),...
                                  'FontSize', 8,...
                                  'Color', turquoise);
%}

% TI distribution per left-right and explore/exploit
AllLeftExploitation = AllLeftMTAbsResidual < 0.5;
AllRightExploitation = AllRightMTAbsResidual < 0.5;

AllLeftExploitingMT = AllLeftMT(AllLeftExploitation == 1);
XData = zeros(size(AllLeftExploitingMT)) - 0.2;
LeftExploitingMTSwarmchart = swarmchart(MTDistributionAxes,...
                                        XData,...
                                        AllLeftExploitingMT,...
                                        'Marker', '.',...
                                        'MarkerEdgeColor', violet,...
                                        'XJitter', 'density',...
                                        'XJitterWidth', 0.2);

LeftExploitingMTBoxchart = boxchart(MTDistributionAxes, XData, AllLeftExploitingMT);
set(LeftExploitingMTBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'w',...
    'BoxFaceAlpha', 0,...
    'WhiskerLineColor', 'w',...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllLeftExploringMT = AllLeftMT(AllLeftExploitation == 0);
XData = zeros(size(AllLeftExploringMT)) + 0.2;
LeftExploringMTSwarmchart = swarmchart(MTDistributionAxes,...
                                       XData,...
                                       AllLeftExploringMT,...
                                       'Marker', '.',...
                                       'MarkerEdgeColor', carrot,...
                                       'XJitter', 'density',...
                                       'XJitterWidth', 0.2);

LeftExploringMTBoxchart = boxchart(MTDistributionAxes, XData, AllLeftExploringMT);
set(LeftExploringMTBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllRightExploitingMT = AllRightMT(AllRightExploitation == 1);
XData = ones(size(AllRightExploitingMT)) - 0.2;
RightExploitingMTSwarmchart = swarmchart(MTDistributionAxes,...
                                         XData,...
                                         AllRightExploitingMT,...
                                         'Marker', '.',...
                                         'MarkerEdgeColor', violet,...
                                         'XJitter', 'density',...
                                         'XJitterWidth', 0.2);

RightExploitingMTBoxchart = boxchart(MTDistributionAxes, XData, AllRightExploitingMT);
set(RightExploitingMTBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'w',...
    'BoxFaceAlpha', 0,...
    'WhiskerLineColor', 'w',...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllRightExploringMT = AllRightMT(AllRightExploitation == 0);
XData = ones(size(AllRightExploringMT)) + 0.2;
RightExploringMTSwarmchart = swarmchart(MTDistributionAxes,...
                                        XData,...
                                        AllRightExploringMT,...
                                        'Marker', '.',...
                                        'MarkerEdgeColor', carrot,...
                                        'XJitter', 'density',...
                                        'XJitterWidth', 0.2);

RightExploringMTBoxchart = boxchart(MTDistributionAxes, XData, AllRightExploringMT);
set(RightExploringMTBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

% TI-ZScore distribution per left-right and explore/exploit
%{
% NOT USE AS NOT NORMAL DISTRIBUTION
AllLeftExploitingMTSqrtZScore = AllLeftMTSqrtZScore(AllLeftExploitation == 1);
XData = zeros(size(AllLeftExploitingMTSqrtZScore)) - 0.2;
LeftExploitingMTSqrtZScoreSwarmchart = swarmchart(MTSqrtZScoreDistributionAxes,...
                                                  XData,...
                                                  AllLeftExploitingMTSqrtZScore,...
                                                  'Marker', '.',...
                                                  'MarkerEdgeColor', violet,...
                                                  'XJitter', 'density',...
                                                  'XJitterWidth', 0.2);

LeftExploitingMTSqrtZScoreBoxchart = boxchart(MTSqrtZScoreDistributionAxes, XData, AllLeftExploitingMTSqrtZScore);
set(LeftExploitingMTSqrtZScoreBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'w',...
    'BoxFaceAlpha', 0,...
    'WhiskerLineColor', 'w',...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllLeftExploringMTSqrtZScore = AllLeftMTSqrtZScore(AllLeftExploitation == 0);
XData = zeros(size(AllLeftExploringMTSqrtZScore)) + 0.2;
LeftExploringMTSqrtZScoreSwarmchart = swarmchart(MTSqrtZScoreDistributionAxes,...
                                                 XData,...
                                                 AllLeftExploringMTSqrtZScore,...
                                                 'Marker', '.',...
                                                 'MarkerEdgeColor', carrot,...
                                                 'XJitter', 'density',...
                                                 'XJitterWidth', 0.2);

LeftExploringMTSqrtZScoreBoxchart = boxchart(MTSqrtZScoreDistributionAxes, XData, AllLeftExploringMTSqrtZScore);
set(LeftExploringMTSqrtZScoreBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllRightExploitingMTSqrtZScore = AllRightMTSqrtZScore(AllRightExploitation == 1);
XData = ones(size(AllRightExploitingMTSqrtZScore)) - 0.2;
RightExploitingMTSqrtZScoreSwarmchart = swarmchart(MTSqrtZScoreDistributionAxes,...
                                                   XData,...
                                                   AllRightExploitingMTSqrtZScore,...
                                                   'Marker', '.',...
                                                   'MarkerEdgeColor', violet,...
                                                   'XJitter', 'density',...
                                                   'XJitterWidth', 0.2);

RightExploitingMTSqrtZScoreBoxchart = boxchart(MTSqrtZScoreDistributionAxes, XData, AllRightExploitingMTSqrtZScore);
set(RightExploitingMTSqrtZScoreBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'w',...
    'BoxFaceAlpha', 0,...
    'WhiskerLineColor', 'w',...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);

AllRightExploringMTSqrtZScore = AllRightMTSqrtZScore(AllRightExploitation == 0);
XData = ones(size(AllRightExploringMTSqrtZScore)) + 0.2;
RightExploringMTSqrtZScoreSwarmchart = swarmchart(MTSqrtZScoreDistributionAxes,...
                                                  XData,...
                                                  AllRightExploringMTSqrtZScore,...
                                                  'Marker', '.',...
                                                  'MarkerEdgeColor', carrot,...
                                                  'XJitter', 'density',...
                                                  'XJitterWidth', 0.2);

RightExploringMTSqrtZScoreBoxchart = boxchart(MTSqrtZScoreDistributionAxes, XData, AllRightExploringMTSqrtZScore);
set(RightExploringMTSqrtZScoreBoxchart,...
    'BoxWidth', 0.2,...
    'BoxFaceColor', 'k',...
    'BoxFaceAlpha', 0,...
    'MarkerStyle', 'none',...
    'LineWidth', 0.2);
%}

disp('YOu aRE a bEAutIFul HUmaN BeiNG, saID anTOniO.')

DataPath = strcat(DataFolderPath, '\', FigureTitle, '.png');
exportgraphics(AnalysisFigure, DataPath);

end % function